
running 10 tests
test format::tests::format_implicit_point_unscaled_notation ... ok
test format::tests::format_zero ... ok
test format::tests::format_explicit_point_unscaled_notation ... ok
test format::tests::format_explicit_point_scaled_notation ... ok
test format::tests::test_omitting_extrand ... ok
test format::tests::test_round_explicit_point_notation ... ok
test parser::tests::test_numeric_constant ... ok
test parser::tests::test_print_tab_call ... ok
test parser::tests::test_print_constant ... ok
test parser::tests::test_tab_call ... ok

test result: ok. 10 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 200 tests
test P005 ... ok
test P002 ... ok
test P007 ... ok
test P004 ... ok
test P001 ... ok
test P003 ... ok
test P008 ... ok
test P006 ... ok
test P011 ... ok
test P014 ... ok
test P012 ... ok
test P017 ... ok
test P010 ... ok
test P016 ... ok
test P020 ... FAILED
test P023 ... FAILED
test P022 ... ok
test P013 ... ok
test P015 ... ok
test P026 ... FAILED
test P009 ... ok
test P027 ... FAILED
test P018 ... ok
test P028 ... FAILED
test P021 ... FAILED
test P031 ... FAILED
test P019 ... ok
test P032 ... FAILED
test P034 ... ok
test P037 ... FAILED
test P036 ... FAILED
test P024 ... ok
test P035 ... FAILED
test P038 ... FAILED
test P040 ... FAILED
test P042 ... FAILED
test P043 ... FAILED
test P030 ... FAILED
test P025 ... ok
test P039 ... FAILED
test P045 ... FAILED
test P047 ... FAILED
test P033 ... ok
test P046 ... FAILED
test P041 ... FAILED
test P044 ... FAILED
test P052 ... FAILED
test P049 ... FAILED
test P051 ... FAILED
test P048 ... FAILED
test P056 ... FAILED
test P055 ... FAILED
test P054 ... FAILED
test P059 ... FAILED
test P060 ... FAILED
test P058 ... FAILED
test P061 ... FAILED
test P062 ... FAILED
test P063 ... FAILED
test P053 ... FAILED
test P066 ... FAILED
test P065 ... FAILED
test P064 ... FAILED
test P069 ... FAILED
test P067 ... FAILED
test P071 ... FAILED
test P068 ... FAILED
test P072 ... FAILED
test P070 ... FAILED
test P050 ... FAILED
test P073 ... FAILED
test P074 ... FAILED
test P075 ... FAILED
test P076 ... FAILED
test P077 ... FAILED
test P080 ... FAILED
test P083 ... FAILED
test P078 ... FAILED
test P081 ... FAILED
test P079 ... FAILED
test P082 ... FAILED
test P088 ... FAILED
test P086 ... FAILED
test P084 ... FAILED
test P087 ... FAILED
test P085 ... FAILED
test P090 ... FAILED
test P091 ... FAILED
test P089 ... FAILED
test P096 ... FAILED
test P093 ... FAILED
test P092 ... FAILED
test P097 ... FAILED
test P095 ... FAILED
test P100 ... FAILED
test P094 ... FAILED
test P101 ... FAILED
test P098 ... FAILED
test P102 ... FAILED
test P099 ... FAILED
test P103 ... FAILED
test P105 ... FAILED
test P104 ... FAILED
test P106 ... FAILED
test P114 ... FAILED
test P116 ... FAILED
test P113 ... FAILED
test P115 ... FAILED
test P117 ... FAILED
test P118 ... FAILED
test P122 ... FAILED
test P119 ... FAILED
test P121 ... FAILED
test P057 ... FAILED
test P123 ... FAILED
test P125 ... FAILED
test P124 ... FAILED
test P126 ... FAILED
test P120 ... FAILED
test P127 ... FAILED
test P129 ... FAILED
test P132 ... FAILED
test P136 ... FAILED
test P134 ... FAILED
test P133 ... FAILED
test P135 ... FAILED
test P128 ... FAILED
test P139 ... FAILED
test P137 ... FAILED
test P138 ... FAILED
test P141 ... FAILED
test P142 ... FAILED
test P140 ... FAILED
test P144 ... FAILED
test P143 ... FAILED
test P145 ... FAILED
test P148 ... FAILED
test P146 ... FAILED
test P147 ... FAILED
test P150 ... FAILED
test P151 ... FAILED
test P153 ... FAILED
test P149 ... FAILED
test P152 ... FAILED
test P155 ... FAILED
test P157 ... FAILED
test P156 ... FAILED
test P130 ... FAILED
test P160 ... FAILED
test P154 ... FAILED
test P161 ... FAILED
test P158 ... FAILED
test P159 ... FAILED
test P165 ... FAILED
test P162 ... FAILED
test P167 ... FAILED
test P164 ... FAILED
test P171 ... FAILED
test P169 ... FAILED
test P166 ... FAILED
test P172 ... FAILED
test P168 ... FAILED
test P170 ... FAILED
test P174 ... FAILED
test P173 ... FAILED
test P175 ... FAILED
test P179 ... FAILED
test P180 ... FAILED
test P177 ... FAILED
test P163 ... FAILED
test P182 ... FAILED
test P176 ... FAILED
test P181 ... FAILED
test P186 ... FAILED
test P187 ... FAILED
test P178 ... FAILED
test P183 ... FAILED
test P184 ... FAILED
test P188 ... FAILED
test P190 ... FAILED
test P189 ... FAILED
test P192 ... FAILED
test P194 ... FAILED
test P195 ... FAILED
test P191 ... FAILED
test P193 ... FAILED
test P197 ... FAILED
test P199 ... FAILED
test P185 ... FAILED
test P196 ... ok
test P200 ... FAILED
test P201 ... FAILED
test P198 ... FAILED
test P207 ... FAILED
test P204 ... FAILED
test P202 ... FAILED
test P208 ... FAILED
test P205 ... FAILED
test P206 ... FAILED
test P029 ... FAILED

failures:

---- P020 stdout ----
thread 'P020' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n300 IF A$=X THEN 330\n310 PRINT \"IF TESTED FALSE.\"\n320 GOTO 340\n330 PRINT \"IF TESTED TRUE.\"\n340 PRINT\n350 PRINT \"                     END TEST.\"\n360 PRINT\n370 PRINT \"END PROGRAM 20\"\n380 END\n"`,
 right: `"300: error: string expression expected \n IF A$=X THEN 330\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 300 IF A$=X THEN 330
+ 310 PRINT "IF TESTED FALSE."
+ 320 GOTO 340
+ 330 PRINT "IF TESTED TRUE."
+ 340 PRINT
+ 350 PRINT "                     END TEST."
+ 360 PRINT
+ 370 PRINT "END PROGRAM 20"
+ 380 END
- 300: error: string expression expected 
-  IF A$=X THEN 330
-        ^
', tests/integration.rs:37:13
note: Run with `RUST_BACKTRACE=1` for a backtrace.

---- P023 stdout ----
thread 'P023' panicked at 'assertion failed: `(left == right)`
  left: `"error: undefined string variable \'A$\'"`,
 right: `""`: 
Diff:
+ error: undefined string variable 'A$'
', tests/integration.rs:37:13

---- P026 stdout ----
thread 'P026' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n190 LET A=3+4   *  5\n200 LET Y=23\n210 GOSUB 9000\n220 LET A=8+4  /  2\n230 LET O$=\"2\"\n240 LET Y=10\n250 GOSUB 9000\n260 LET A=3.+3  ^  3\n270 LET O$=\"3\"\n280 LET Y=30\n290 GOSUB 9000\n300 LET A=3  -  40.00E-1+5\n310 LET O$=\"4\"\n320 LET Y=4\n330 GOSUB 9000\n340 LET A=3.00 - 4-.5E+1\n350 LET O$=\"5\"\n360 LET Y=-6\n370 GOSUB 9000\n380 LET O$=\"6\"\n390 LET A=20.E-1-3 * 4\n400 LET Y=-10\n410 GOSUB 9000\n420 LET A=8-4  /  2\n430 LET O$=\"7\"\n440 LET Y=6\n450 GOSUB 9000\n460 LET A=3-2 ^ 3\n470 LET O$=\"8\"\n480 LET Y=-5\n490 GOSUB 9000\n500 LET A=3 * 4+5\n510 LET O$=\"9\"\n520 LET Y=17\n530 GOSUB 9000\n540 LET O$=\"10\"\n550 LET A=3.00E0 * 4.00E+00-5.00E-00\n560 LET Y=7\n570 GOSUB 9000\n580 LET A=003.0*2. ^ 3.\n590 LET O$=\"11\"\n600 LET Y=24\n610 GOSUB 9000\n620 LET A=6 / 2+1\n630 LET O$=\"12\"\n640 LET Y=4\n650 GOSUB 9000\n660 LET A=6 / 2-1\n670 LET O$=\"13\"\n680 LET Y=2\n690 GOSUB 9000\n700 LET A=2 / 1*2\n710 LET O$=\"14\"\n720 LET Y=4\n730 GOSUB 9000\n740 LET A=8 / 2/2\n750 LET O$=\"15\"\n760 LET Y=2\n770 GOSUB 9000\n780 LET O$=\"16\"\n790 LET A=8/2 ^ 2\n800 LET Y=2\n810 GOSUB 9000\n820 LET A=2 ^ 2+2\n830 LET O$=\"17\"\n840 LET Y=6\n850 GOSUB 9000\n860 LET A=2 ^ 3-2\n870 LET O$=\"18\"\n880 LET Y=6\n890 GOSUB 9000\n900 LET A=2 ^ 2*2\n910 LET O$=\"19\"\n920 LET Y=8\n930 GOSUB 9000\n940 LET A=3 ^ 3/3\n950 LET O$=\"20\"\n960 LET Y=9\n970 GOSUB 9000\n980 LET A=2 ^ 3^2\n990 LET O$=\"21\"\n1000 LET Y=64\n1010 GOSUB 9000\n1020 LET A=-  2+2\n1030 LET O$=\"22\"\n1040 LET Y=0\n1050 GOSUB 9000\n1060 LET A=-  2-2\n1070 LET O$=\"23\"\n1080 LET Y=-4\n1090 GOSUB 9000\n1100 LET A=-2  ^  2\n1110 LET O$=\"24\"\n1120 LET Y=-4\n1130 GOSUB 9000\n1140 PRINT\n1150 IF F=0 THEN 1180\n1160 PRINT \"*** TEST FAILED IN \";F;\" CASE(S). ***\"\n1170 GOTO 1190\n1180 PRINT \"*** TEST PASSED ***\"\n1190 PRINT\n1200 PRINT \"                  END TEST\"\n1210 PRINT\n2000 PRINT \"SECTION 26.2: MIXED OPERATORS, PARENTHESES, AND VARIABLES\"\n2020 PRINT\n2030 PRINT \"THIS SECTION TESTS THE USE OF PARENTHESES TO ALTER THE\"\n2040 PRINT \"ORDER OF EVALUATION, EXPRESSIONS WITH SEVERAL OPERATORS,\"\n2050 PRINT \"AND THE USE OF VARIABLES AND CONSTANTS.\"\n2060 PRINT\n2070 PRINT \"                   BEGIN TEST\"\n2080 PRINT\n2083 PRINT \"CASE #\",\"SHOULD BE\",\"ACTUAL\",\"OUTCOME\"\n2086 PRINT\n2090 LET F=0\n2100 LET O$=\"1\"\n2110 LET A=4\n2120 LET A=3-(A-5)\n2130 LET Y=4\n2140 GOSUB 9000\n2150 LET O$=\"2\"\n2160 LET B=2\n2170 LET A=+2-B+2/B*2^B\n2180 LET Y=4\n2190 GOSUB 9000\n2195 LET O$=\"3\"\n2200 LET A=-B-B+B/002.*.2E+01^2\n2210 LET Y=0\n2220 GOSUB 9000\n2225 LET O$=\"4\"\n2230 LET A=-3\n2240 LET B=-4\n2250 LET A=-(A-B)-B-(A-((+B-(B-A))-A))\n2260 LET Y=6\n2270 GOSUB 9000\n2280 LET O$=\"5\"\n2290 LET B=4\n2300 LET A=-(1-(-3))^(+(-B^1)/(-2))\n2310 LET Y=-16\n2320 GOSUB 9000\n2330 LET O$=\"6\"\n2340 LET A=-2\n2350 LET B=16\n2360 LET C=-30\n2370 LET A=(-B+(B^.02E+02-4*A*C)^.5)/(2*A)\n2380 LET Y=3\n2390 GOSUB 9000\n2400 LET O$=\"7\"\n2410 LET A=60/(10-(-(-9))-7)/2\n2420 LET Y=-5\n2430 GOSUB 9000\n2900 PRINT\n2910 IF F=0 THEN 2940\n2920 PRINT \"*** TEST FAILED IN \";F;\" CASE(S). ***\"\n2930 GOTO 2950\n2940 PRINT \"*** TEST PASSED ***\"\n2950 PRINT\n2960 PRINT \"                    END TEST\"\n8970 PRINT\n8980 PRINT \"END PROGRAM 26\"\n8990 STOP\n9000 REM HANDLE ERROR REPORT\n9005 PRINT O$,Y,A,\n9007 LET P$=\"FAILS\"\n9010 LET M=0.1\n9020 IF Y>1 THEN 9050\n9030 IF Y<-1 THEN 9050\n9040 LET M=0.01\n9050 LET T=A-Y\n9060 IF T>M THEN 9100\n9070 LET T=Y-A\n9080 IF T>M THEN 9100\n9090 LET P$=\"PASSES\"\n9095 GOTO 9110\n9100 LET F=F+1\n9110 PRINT \"TEST \";P$\n9130 RETURN\n9140 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 190 LET A=3+4   *  5
+ 200 LET Y=23
+ 210 GOSUB 9000
+ 220 LET A=8+4  /  2
+ 230 LET O$="2"
+ 240 LET Y=10
+ 250 GOSUB 9000
+ 260 LET A=3.+3  ^  3
+ 270 LET O$="3"
+ 280 LET Y=30
+ 290 GOSUB 9000
+ 300 LET A=3  -  40.00E-1+5
+ 310 LET O$="4"
+ 320 LET Y=4
+ 330 GOSUB 9000
+ 340 LET A=3.00 - 4-.5E+1
+ 350 LET O$="5"
+ 360 LET Y=-6
+ 370 GOSUB 9000
+ 380 LET O$="6"
+ 390 LET A=20.E-1-3 * 4
+ 400 LET Y=-10
+ 410 GOSUB 9000
+ 420 LET A=8-4  /  2
+ 430 LET O$="7"
+ 440 LET Y=6
+ 450 GOSUB 9000
+ 460 LET A=3-2 ^ 3
+ 470 LET O$="8"
+ 480 LET Y=-5
+ 490 GOSUB 9000
+ 500 LET A=3 * 4+5
+ 510 LET O$="9"
+ 520 LET Y=17
+ 530 GOSUB 9000
+ 540 LET O$="10"
+ 550 LET A=3.00E0 * 4.00E+00-5.00E-00
+ 560 LET Y=7
+ 570 GOSUB 9000
+ 580 LET A=003.0*2. ^ 3.
+ 590 LET O$="11"
+ 600 LET Y=24
+ 610 GOSUB 9000
+ 620 LET A=6 / 2+1
+ 630 LET O$="12"
+ 640 LET Y=4
+ 650 GOSUB 9000
+ 660 LET A=6 / 2-1
+ 670 LET O$="13"
+ 680 LET Y=2
+ 690 GOSUB 9000
+ 700 LET A=2 / 1*2
+ 710 LET O$="14"
+ 720 LET Y=4
+ 730 GOSUB 9000
+ 740 LET A=8 / 2/2
+ 750 LET O$="15"
+ 760 LET Y=2
+ 770 GOSUB 9000
+ 780 LET O$="16"
+ 790 LET A=8/2 ^ 2
+ 800 LET Y=2
+ 810 GOSUB 9000
+ 820 LET A=2 ^ 2+2
+ 830 LET O$="17"
+ 840 LET Y=6
+ 850 GOSUB 9000
+ 860 LET A=2 ^ 3-2
+ 870 LET O$="18"
+ 880 LET Y=6
+ 890 GOSUB 9000
+ 900 LET A=2 ^ 2*2
+ 910 LET O$="19"
+ 920 LET Y=8
+ 930 GOSUB 9000
+ 940 LET A=3 ^ 3/3
+ 950 LET O$="20"
+ 960 LET Y=9
+ 970 GOSUB 9000
+ 980 LET A=2 ^ 3^2
+ 990 LET O$="21"
+ 1000 LET Y=64
+ 1010 GOSUB 9000
+ 1020 LET A=-  2+2
+ 1030 LET O$="22"
+ 1040 LET Y=0
+ 1050 GOSUB 9000
+ 1060 LET A=-  2-2
+ 1070 LET O$="23"
+ 1080 LET Y=-4
+ 1090 GOSUB 9000
+ 1100 LET A=-2  ^  2
+ 1110 LET O$="24"
+ 1120 LET Y=-4
+ 1130 GOSUB 9000
+ 1140 PRINT
+ 1150 IF F=0 THEN 1180
+ 1160 PRINT "*** TEST FAILED IN ";F;" CASE(S). ***"
+ 1170 GOTO 1190
+ 1180 PRINT "*** TEST PASSED ***"
+ 1190 PRINT
+ 1200 PRINT "                  END TEST"
+ 1210 PRINT
+ 2000 PRINT "SECTION 26.2: MIXED OPERATORS, PARENTHESES, AND VARIABLES"
+ 2020 PRINT
+ 2030 PRINT "THIS SECTION TESTS THE USE OF PARENTHESES TO ALTER THE"
+ 2040 PRINT "ORDER OF EVALUATION, EXPRESSIONS WITH SEVERAL OPERATORS,"
+ 2050 PRINT "AND THE USE OF VARIABLES AND CONSTANTS."
+ 2060 PRINT
+ 2070 PRINT "                   BEGIN TEST"
+ 2080 PRINT
+ 2083 PRINT "CASE #","SHOULD BE","ACTUAL","OUTCOME"
+ 2086 PRINT
+ 2090 LET F=0
+ 2100 LET O$="1"
+ 2110 LET A=4
+ 2120 LET A=3-(A-5)
+ 2130 LET Y=4
+ 2140 GOSUB 9000
+ 2150 LET O$="2"
+ 2160 LET B=2
+ 2170 LET A=+2-B+2/B*2^B
+ 2180 LET Y=4
+ 2190 GOSUB 9000
+ 2195 LET O$="3"
+ 2200 LET A=-B-B+B/002.*.2E+01^2
+ 2210 LET Y=0
+ 2220 GOSUB 9000
+ 2225 LET O$="4"
+ 2230 LET A=-3
+ 2240 LET B=-4
+ 2250 LET A=-(A-B)-B-(A-((+B-(B-A))-A))
+ 2260 LET Y=6
+ 2270 GOSUB 9000
+ 2280 LET O$="5"
+ 2290 LET B=4
+ 2300 LET A=-(1-(-3))^(+(-B^1)/(-2))
+ 2310 LET Y=-16
+ 2320 GOSUB 9000
+ 2330 LET O$="6"
+ 2340 LET A=-2
+ 2350 LET B=16
+ 2360 LET C=-30
+ 2370 LET A=(-B+(B^.02E+02-4*A*C)^.5)/(2*A)
+ 2380 LET Y=3
+ 2390 GOSUB 9000
+ 2400 LET O$="7"
+ 2410 LET A=60/(10-(-(-9))-7)/2
+ 2420 LET Y=-5
+ 2430 GOSUB 9000
+ 2900 PRINT
+ 2910 IF F=0 THEN 2940
+ 2920 PRINT "*** TEST FAILED IN ";F;" CASE(S). ***"
+ 2930 GOTO 2950
+ 2940 PRINT "*** TEST PASSED ***"
+ 2950 PRINT
+ 2960 PRINT "                    END TEST"
+ 8970 PRINT
+ 8980 PRINT "END PROGRAM 26"
+ 8990 STOP
+ 9000 REM HANDLE ERROR REPORT
+ 9005 PRINT O$,Y,A,
+ 9007 LET P$="FAILS"
+ 9010 LET M=0.1
+ 9020 IF Y>1 THEN 9050
+ 9030 IF Y<-1 THEN 9050
+ 9040 LET M=0.01
+ 9050 LET T=A-Y
+ 9060 IF T>M THEN 9100
+ 9070 LET T=Y-A
+ 9080 IF T>M THEN 9100
+ 9090 LET P$="PASSES"
+ 9095 GOTO 9110
+ 9100 LET F=F+1
+ 9110 PRINT "TEST ";P$
+ 9130 RETURN
+ 9140 END
+ 
', tests/integration.rs:37:13

---- P027 stdout ----
thread 'P027' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 FOR I=6 TO 9\n230 PRINT A$;\n240 LET J=I-5\n250 ON J GOTO 600,700,800,900\n600 LET B= 9.876533E-7\n610 PRINT \"9.876533E-7\";\n620 GOTO 1000\n700 LET B= 9.8765422E-7\n710 PRINT \"9.8765422E-7\";\n720 GOTO 1000\n800 LET B= 9.87654311E-7\n810 PRINT \"9.87654311E-7\";\n820 GOTO 1000\n900 LET B= 9.876543201E-7\n910 PRINT \"9.876543201E-7\";\n920 GOTO 1000\n1000 LET U$=\"T\"\n1010 LET E$=\"T\"\n1020 IF A > B THEN 1040\n1030 LET U$=\"F\"\n1040 IF A = B THEN 1060\n1050 LET E$=\"F\"\n1060 REM COMPARISONS FINISHED\n1200 GOSUB 8160\n1210 NEXT I\n1220 GOSUB 8280\n3000 PRINT \"SECTION 27.2: ACCURACY IN THE COMPARISON OF VARIABLES\"\n3010 PRINT \"              WITH CONSTANTS.\"\n3020 PRINT\n3030 PRINT \"THIS SECTION COMPARES A VARIABLE AND A CONSTANT WHICH HAVE\"\n3040 PRINT \"NUMERICALLY \'CLOSE\' VALUES AND THEN DETERMINES WHETHER THE\"\n3050 PRINT \"IMPLEMENTATION CAN DISTINGUISH BETWEEN THEM OR IF THEY ARE\"\n3060 PRINT \"TREATED AS EQUAL.\"\n3070 PRINT\n3080 LET C$=\"  >   =\"\n3090 GOSUB 8000\n3100 LET A$=\"-9.999988888E36 : \"\n3110 FOR I=6 TO 9\n3120 PRINT A$;\n3130 LET J=I-5\n3140 ON J GOTO 3200,3300,3400,3500\n3200 LET B= -9.999999E36\n3210 PRINT \"-9.999999E36\";\n3220 GOTO 3600\n3300 LET B= -9.9999899E36\n3310 PRINT \"-9.9999899E36\";\n3320 GOTO 3600\n3400 LET B= -9.99998899E36\n3410 PRINT \"-9.99998899E36\";\n3420 GOTO 3600\n3500 LET B= -9.999988899E36\n3510 PRINT \"-9.999988899E36\";\n3520 GOTO 3600\n3600 LET U$=\"T\"\n3610 LET E$=\"T\"\n3620 IF -9.999988888E36 > B THEN 3640\n3630 LET U$=\"F\"\n3640 IF -9.999988888E36 = B THEN 3660\n3650 LET E$=\"F\"\n3660 REM COMPARISON FINISHED\n3670 GOSUB 8160\n3680 NEXT I\n3690 GOSUB 8280\n5000 PRINT \"SECTION 27.3: ACCURACY IN THE COMPARISON OF CONSTANTS.\"\n5010 PRINT\n5020 PRINT \"THIS SECTION COMPARES TWO CONSTANTS WHICH HAVE\"\n5030 PRINT \"NUMERICALLY \'CLOSE\' VALUES AND THEN DETERMINES WHETHER THE\"\n5040 PRINT \"IMPLEMENTATION CAN DISTINGUISH BETWEEN THEM OR IF THEY ARE\"\n5050 PRINT \"TREATED AS EQUAL.\"\n5060 PRINT\n5070 LET C$=\"  <   =\"\n5080 GOSUB 8000\n5090 LET A$=\"9.40395E-37 : \"\n5100 FOR I=6 TO 9\n5110 PRINT A$;\n5120 LET U$=\"T\"\n5130 LET E$=\"T\"\n5140 LET J=I-5\n5150 ON J GOTO 5200,5300,5400,5500\n5200 IF 9.40395E-37 < 9.40396E-37 THEN 5220\n5210 LET U$=\"F\"\n5220 IF 9.40395E-37 = 9.40396E-17 THEN 5240\n5230 LET E$=\"F\"\n5240 PRINT \"9.40396E-37\";\n5250 GOTO 5600\n5300 IF 9.40395E-37 < 9.403951E-37 THEN 5320\n5310 LET U$=\"F\"\n5320 IF 9.40395E-37 = 9.403951E-37 THEN 5340\n5330 LET E$=\"F\"\n5340 PRINT \"9.403951E-37\";\n5350 GOTO 5600\n5400 IF 9.40395E-37 < 9.4039501E-37 THEN 5420\n5410 LET U$=\"F\"\n5420 IF 9.40395E-37 = 9.4039501E-37 THEN 5440\n5430 LET E$=\"F\"\n5440 PRINT \"9.4039501E-37\";\n5450 GOTO 5600\n5500 IF 9.40395E-37 < 9.40395001E-37 THEN 5520\n5510 LET U$=\"F\"\n5520 IF 9.40395E-37 = 9.40395001E-37 THEN 5540\n5530 LET E$=\"F\"\n5540 PRINT \"9.40395001E-37\";\n5550 GOTO 5600\n5600 REM COMPARISONS FINISHED\n5610 GOSUB 8160\n5620 NEXT I\n5630 GOSUB 8280\n5800 PRINT \"SECTION 27.4: ACCURACY FOR CONSTANTS EXPRESSED WITH\"\n5810 PRINT \"        DIFFERENT EXPONENTS.\"\n5820 PRINT\n5830 PRINT \"CONSTANTS MUST BE ACCURATE EVEN WHEN NOT EXPRESSED IN\"\n5840 PRINT \"NORMALIZED FORM (1 <= SIGNIFICAND < 10).\"\n5850 PRINT\n5860 PRINT \"                 BEGIN TEST.\"\n5870 PRINT\n5880 IF .0000000999991E-18 >= 99999200000E-36 THEN 5950\n5890 IF -.0000000999991E-18 <= -99999200000E-36 THEN 5950\n5900 IF .0000000999992E-18 >= 99999300000E-36 THEN 5950\n5910 IF -.0000000999992E-18 <= -99999300000E-36 THEN 5950\n5920 IF .0000000999993E-18 >= 99999400000E-36 THEN 5950\n5930 IF -.0000000999993E-18 <= -99999400000E-36 THEN 5950\n5940 PRINT \"*** TEST PASSED ***\"\n5945 GO TO 5955\n5950 PRINT \"*** TEST FAILED ***\"\n5955 PRINT\n5960 PRINT \"                  END TEST.\"\n5970 PRINT\n6000 PRINT \"SECTION 27.5: COMPUTED ACCURACY OF NUMERIC VALUES.\"\n6010 PRINT\n6020 PRINT \"THIS SECTION USES A COMPUTATIONAL ALGORITHM TO ATTEMPT TO\"\n6030 PRINT \"DISCOVER THIS IMPLEMENTATION\'S INTERNAL ACCURACY. BECAUSE\"\n6040 PRINT \"THE ALGORITHM RELIES SOMEWHAT ON ACCURACY OF EXPRESSION\"\n6050 PRINT \"EVALUATION, THE RESULTS ARE NOT ABSOLUTELY TRUSTWORTHY AND\"\n6060 PRINT \"SHOULD BE INTERPRETED IN LIGHT OF GENERAL KNOWLEDGE OF\"\n6070 PRINT \"THE CHARACTERISTICS OF THE SYSTEM.\"\n6080 PRINT\n6090 PRINT \"*** THIS TEST IS INFORMATIVE ONLY ***\"\n6100 PRINT\n6110 PRINT \"              BEGIN TEST.\"\n6120 PRINT\n6130 LET B=10\n6140 LET B$=\"DECIMAL\"\n6150 GOSUB 6230\n6160 LET B=2\n6170 LET B$=\"BINARY\"\n6180 GOSUB 6230\n6190 PRINT\n6200 PRINT \"               END TEST.\"\n6210 PRINT\n6220 GOTO 6430\n6230 LET S=1\n6240 LET E=S\n6250 LET D=-1\n6260 LET E=E/B\n6270 LET T2 = S - E\n6280 LET T1=T2\n6290 REM THE NEXT FOUR STATEMENTS HAVE NO ALGORITHMIC PURPOSE -\n6300 REM THEY ARE AN ATTEMPT TO FORCE THE VARIABLE T1 TO BE STORED\n6310 REM RATHER THAN SAVED IN OVERLENGTH REGISTERS, AS IS DONE\n6320 REM BY SOME MACHINES, WITH AN OPTIMIZING COMPILER.\n6325 LET V=1\n6330 LET U=E+D\n6340 LET V=U*D*(-V)\n6350 IF V < 0 THEN 6330\n6360 LET D=D+1\n6370 IF D>500 THEN 6410\n6380 IF T1 < S THEN 6260\n6390 PRINT \"COMPUTED ACCURACY = \";D;B$;\" DIGITS.\"\n6400 RETURN\n6410 PRINT \"UNABLE TO COMPUTE ACCURACY OF \";B$;\" DIGITS.\"\n6420 RETURN\n6430 REM END SECTION\n6440 PRINT \"END PROGRAM 27\"\n6450 STOP\n8000 REM SUBROUTINE TO BEGIN SECTION\n8010 PRINT \"                  BEGIN TEST.\"\n8020 PRINT\n8030 PRINT \"NUMERIC VALUES\";TAB(T1);\"DIGITS OF\";TAB(T2);\n8040 PRINT \"RESULT OF\"\n8050 PRINT \"BEING COMPARED\";TAB(T1);\"DECIMAL\";TAB(T2);\n8060 PRINT \"COMPARISONS\"\n8070 PRINT TAB(T1);\"ACCURACY\";TAB(T2);C$\n8080 PRINT\n8090 REM NO. OF ANOMALOUS RESULTS (BOTH TRUE OR BOTH FALSE)\n8100 LET S2=0\n8110 REM SIGNIFICANCE SWITCH - 1 IMPLIES LOST SIGNIFICANCE\n8120 LET S1=0\n8130 REM NO. OF SIGNIFICANT DIGITS\n8140 LET S0=5\n8150 RETURN\n8160 REM SUBROUTINE TO SUMMARIZE LINE\n8170 LET W$=\" \"\n8180 IF E$=U$ THEN 8230\n8190 IF U$=\"F\" THEN 8250\n8200 IF S1=1 THEN 8260\n8210 LET S0=I\n8220 GOTO 8260\n8230 LET W$=\"***\"\n8240 LET S2=S2+1\n8250 LET S1=1\n8260 PRINT TAB(T3);I;TAB(T4);U$;\"   \";E$;\"   \";W$\n8270 RETURN\n8280 REM SUBROUTINE TO END SECTION\n8290 LET T$=\"LEAST\"\n8300 IF S0=9 THEN 8320\n8310 LET T$=\"MOST\"\n8320 PRINT\n8330 PRINT \"*** TEST INDICATES DECIMAL ACCURACY OF AT \";T$;\" \";S0;\n8340 PRINT \"DIGITS. ***\"\n8350 IF S0 < 6 THEN 8400\n8360 PRINT \"IF DOCUMENTATION FOR THE IMPLEMENTATION-DEFINED ACCURACY\"\n8370 PRINT \"   FOR NUMERIC VALUES IS COMPATIBLE WITH THIS RESULT, THEN\"\n8380 PRINT \"*** TEST PASSED ***\"\n8390 GOTO 8410\n8400 PRINT \"*** TEST FAILED: MINIMUM ACCURACY IS SIX DIGITS. ***\"\n8410 PRINT\n8420 IF S2=0 THEN 8460\n8430 PRINT \"*** NOTE ANOMALOUS COMPARISON RESULTS IN THE \";S2;\" ROW(S)\"\n8440 PRINT \"    ABOVE FOLLOWED BY ASTERISKS. ***\"\n8450 PRINT\n8460 PRINT \"                   END TEST.\"\n8470 PRINT\n8480 RETURN\n8490 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 FOR I=6 TO 9
+ 230 PRINT A$;
+ 240 LET J=I-5
+ 250 ON J GOTO 600,700,800,900
+ 600 LET B= 9.876533E-7
+ 610 PRINT "9.876533E-7";
+ 620 GOTO 1000
+ 700 LET B= 9.8765422E-7
+ 710 PRINT "9.8765422E-7";
+ 720 GOTO 1000
+ 800 LET B= 9.87654311E-7
+ 810 PRINT "9.87654311E-7";
+ 820 GOTO 1000
+ 900 LET B= 9.876543201E-7
+ 910 PRINT "9.876543201E-7";
+ 920 GOTO 1000
+ 1000 LET U$="T"
+ 1010 LET E$="T"
+ 1020 IF A > B THEN 1040
+ 1030 LET U$="F"
+ 1040 IF A = B THEN 1060
+ 1050 LET E$="F"
+ 1060 REM COMPARISONS FINISHED
+ 1200 GOSUB 8160
+ 1210 NEXT I
+ 1220 GOSUB 8280
+ 3000 PRINT "SECTION 27.2: ACCURACY IN THE COMPARISON OF VARIABLES"
+ 3010 PRINT "              WITH CONSTANTS."
+ 3020 PRINT
+ 3030 PRINT "THIS SECTION COMPARES A VARIABLE AND A CONSTANT WHICH HAVE"
+ 3040 PRINT "NUMERICALLY 'CLOSE' VALUES AND THEN DETERMINES WHETHER THE"
+ 3050 PRINT "IMPLEMENTATION CAN DISTINGUISH BETWEEN THEM OR IF THEY ARE"
+ 3060 PRINT "TREATED AS EQUAL."
+ 3070 PRINT
+ 3080 LET C$="  >   ="
+ 3090 GOSUB 8000
+ 3100 LET A$="-9.999988888E36 : "
+ 3110 FOR I=6 TO 9
+ 3120 PRINT A$;
+ 3130 LET J=I-5
+ 3140 ON J GOTO 3200,3300,3400,3500
+ 3200 LET B= -9.999999E36
+ 3210 PRINT "-9.999999E36";
+ 3220 GOTO 3600
+ 3300 LET B= -9.9999899E36
+ 3310 PRINT "-9.9999899E36";
+ 3320 GOTO 3600
+ 3400 LET B= -9.99998899E36
+ 3410 PRINT "-9.99998899E36";
+ 3420 GOTO 3600
+ 3500 LET B= -9.999988899E36
+ 3510 PRINT "-9.999988899E36";
+ 3520 GOTO 3600
+ 3600 LET U$="T"
+ 3610 LET E$="T"
+ 3620 IF -9.999988888E36 > B THEN 3640
+ 3630 LET U$="F"
+ 3640 IF -9.999988888E36 = B THEN 3660
+ 3650 LET E$="F"
+ 3660 REM COMPARISON FINISHED
+ 3670 GOSUB 8160
+ 3680 NEXT I
+ 3690 GOSUB 8280
+ 5000 PRINT "SECTION 27.3: ACCURACY IN THE COMPARISON OF CONSTANTS."
+ 5010 PRINT
+ 5020 PRINT "THIS SECTION COMPARES TWO CONSTANTS WHICH HAVE"
+ 5030 PRINT "NUMERICALLY 'CLOSE' VALUES AND THEN DETERMINES WHETHER THE"
+ 5040 PRINT "IMPLEMENTATION CAN DISTINGUISH BETWEEN THEM OR IF THEY ARE"
+ 5050 PRINT "TREATED AS EQUAL."
+ 5060 PRINT
+ 5070 LET C$="  <   ="
+ 5080 GOSUB 8000
+ 5090 LET A$="9.40395E-37 : "
+ 5100 FOR I=6 TO 9
+ 5110 PRINT A$;
+ 5120 LET U$="T"
+ 5130 LET E$="T"
+ 5140 LET J=I-5
+ 5150 ON J GOTO 5200,5300,5400,5500
+ 5200 IF 9.40395E-37 < 9.40396E-37 THEN 5220
+ 5210 LET U$="F"
+ 5220 IF 9.40395E-37 = 9.40396E-17 THEN 5240
+ 5230 LET E$="F"
+ 5240 PRINT "9.40396E-37";
+ 5250 GOTO 5600
+ 5300 IF 9.40395E-37 < 9.403951E-37 THEN 5320
+ 5310 LET U$="F"
+ 5320 IF 9.40395E-37 = 9.403951E-37 THEN 5340
+ 5330 LET E$="F"
+ 5340 PRINT "9.403951E-37";
+ 5350 GOTO 5600
+ 5400 IF 9.40395E-37 < 9.4039501E-37 THEN 5420
+ 5410 LET U$="F"
+ 5420 IF 9.40395E-37 = 9.4039501E-37 THEN 5440
+ 5430 LET E$="F"
+ 5440 PRINT "9.4039501E-37";
+ 5450 GOTO 5600
+ 5500 IF 9.40395E-37 < 9.40395001E-37 THEN 5520
+ 5510 LET U$="F"
+ 5520 IF 9.40395E-37 = 9.40395001E-37 THEN 5540
+ 5530 LET E$="F"
+ 5540 PRINT "9.40395001E-37";
+ 5550 GOTO 5600
+ 5600 REM COMPARISONS FINISHED
+ 5610 GOSUB 8160
+ 5620 NEXT I
+ 5630 GOSUB 8280
+ 5800 PRINT "SECTION 27.4: ACCURACY FOR CONSTANTS EXPRESSED WITH"
+ 5810 PRINT "        DIFFERENT EXPONENTS."
+ 5820 PRINT
+ 5830 PRINT "CONSTANTS MUST BE ACCURATE EVEN WHEN NOT EXPRESSED IN"
+ 5840 PRINT "NORMALIZED FORM (1 <= SIGNIFICAND < 10)."
+ 5850 PRINT
+ 5860 PRINT "                 BEGIN TEST."
+ 5870 PRINT
+ 5880 IF .0000000999991E-18 >= 99999200000E-36 THEN 5950
+ 5890 IF -.0000000999991E-18 <= -99999200000E-36 THEN 5950
+ 5900 IF .0000000999992E-18 >= 99999300000E-36 THEN 5950
+ 5910 IF -.0000000999992E-18 <= -99999300000E-36 THEN 5950
+ 5920 IF .0000000999993E-18 >= 99999400000E-36 THEN 5950
+ 5930 IF -.0000000999993E-18 <= -99999400000E-36 THEN 5950
+ 5940 PRINT "*** TEST PASSED ***"
+ 5945 GO TO 5955
+ 5950 PRINT "*** TEST FAILED ***"
+ 5955 PRINT
+ 5960 PRINT "                  END TEST."
+ 5970 PRINT
+ 6000 PRINT "SECTION 27.5: COMPUTED ACCURACY OF NUMERIC VALUES."
+ 6010 PRINT
+ 6020 PRINT "THIS SECTION USES A COMPUTATIONAL ALGORITHM TO ATTEMPT TO"
+ 6030 PRINT "DISCOVER THIS IMPLEMENTATION'S INTERNAL ACCURACY. BECAUSE"
+ 6040 PRINT "THE ALGORITHM RELIES SOMEWHAT ON ACCURACY OF EXPRESSION"
+ 6050 PRINT "EVALUATION, THE RESULTS ARE NOT ABSOLUTELY TRUSTWORTHY AND"
+ 6060 PRINT "SHOULD BE INTERPRETED IN LIGHT OF GENERAL KNOWLEDGE OF"
+ 6070 PRINT "THE CHARACTERISTICS OF THE SYSTEM."
+ 6080 PRINT
+ 6090 PRINT "*** THIS TEST IS INFORMATIVE ONLY ***"
+ 6100 PRINT
+ 6110 PRINT "              BEGIN TEST."
+ 6120 PRINT
+ 6130 LET B=10
+ 6140 LET B$="DECIMAL"
+ 6150 GOSUB 6230
+ 6160 LET B=2
+ 6170 LET B$="BINARY"
+ 6180 GOSUB 6230
+ 6190 PRINT
+ 6200 PRINT "               END TEST."
+ 6210 PRINT
+ 6220 GOTO 6430
+ 6230 LET S=1
+ 6240 LET E=S
+ 6250 LET D=-1
+ 6260 LET E=E/B
+ 6270 LET T2 = S - E
+ 6280 LET T1=T2
+ 6290 REM THE NEXT FOUR STATEMENTS HAVE NO ALGORITHMIC PURPOSE -
+ 6300 REM THEY ARE AN ATTEMPT TO FORCE THE VARIABLE T1 TO BE STORED
+ 6310 REM RATHER THAN SAVED IN OVERLENGTH REGISTERS, AS IS DONE
+ 6320 REM BY SOME MACHINES, WITH AN OPTIMIZING COMPILER.
+ 6325 LET V=1
+ 6330 LET U=E+D
+ 6340 LET V=U*D*(-V)
+ 6350 IF V < 0 THEN 6330
+ 6360 LET D=D+1
+ 6370 IF D>500 THEN 6410
+ 6380 IF T1 < S THEN 6260
+ 6390 PRINT "COMPUTED ACCURACY = ";D;B$;" DIGITS."
+ 6400 RETURN
+ 6410 PRINT "UNABLE TO COMPUTE ACCURACY OF ";B$;" DIGITS."
+ 6420 RETURN
+ 6430 REM END SECTION
+ 6440 PRINT "END PROGRAM 27"
+ 6450 STOP
+ 8000 REM SUBROUTINE TO BEGIN SECTION
+ 8010 PRINT "                  BEGIN TEST."
+ 8020 PRINT
+ 8030 PRINT "NUMERIC VALUES";TAB(T1);"DIGITS OF";TAB(T2);
+ 8040 PRINT "RESULT OF"
+ 8050 PRINT "BEING COMPARED";TAB(T1);"DECIMAL";TAB(T2);
+ 8060 PRINT "COMPARISONS"
+ 8070 PRINT TAB(T1);"ACCURACY";TAB(T2);C$
+ 8080 PRINT
+ 8090 REM NO. OF ANOMALOUS RESULTS (BOTH TRUE OR BOTH FALSE)
+ 8100 LET S2=0
+ 8110 REM SIGNIFICANCE SWITCH - 1 IMPLIES LOST SIGNIFICANCE
+ 8120 LET S1=0
+ 8130 REM NO. OF SIGNIFICANT DIGITS
+ 8140 LET S0=5
+ 8150 RETURN
+ 8160 REM SUBROUTINE TO SUMMARIZE LINE
+ 8170 LET W$=" "
+ 8180 IF E$=U$ THEN 8230
+ 8190 IF U$="F" THEN 8250
+ 8200 IF S1=1 THEN 8260
+ 8210 LET S0=I
+ 8220 GOTO 8260
+ 8230 LET W$="***"
+ 8240 LET S2=S2+1
+ 8250 LET S1=1
+ 8260 PRINT TAB(T3);I;TAB(T4);U$;"   ";E$;"   ";W$
+ 8270 RETURN
+ 8280 REM SUBROUTINE TO END SECTION
+ 8290 LET T$="LEAST"
+ 8300 IF S0=9 THEN 8320
+ 8310 LET T$="MOST"
+ 8320 PRINT
+ 8330 PRINT "*** TEST INDICATES DECIMAL ACCURACY OF AT ";T$;" ";S0;
+ 8340 PRINT "DIGITS. ***"
+ 8350 IF S0 < 6 THEN 8400
+ 8360 PRINT "IF DOCUMENTATION FOR THE IMPLEMENTATION-DEFINED ACCURACY"
+ 8370 PRINT "   FOR NUMERIC VALUES IS COMPATIBLE WITH THIS RESULT, THEN"
+ 8380 PRINT "*** TEST PASSED ***"
+ 8390 GOTO 8410
+ 8400 PRINT "*** TEST FAILED: MINIMUM ACCURACY IS SIX DIGITS. ***"
+ 8410 PRINT
+ 8420 IF S2=0 THEN 8460
+ 8430 PRINT "*** NOTE ANOMALOUS COMPARISON RESULTS IN THE ";S2;" ROW(S)"
+ 8440 PRINT "    ABOVE FOLLOWED BY ASTERISKS. ***"
+ 8450 PRINT
+ 8460 PRINT "                   END TEST."
+ 8470 PRINT
+ 8480 RETURN
+ 8490 END
+ 
', tests/integration.rs:37:13

---- P028 stdout ----
thread 'P028' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 LET A=5/(B-B)\n230 PRINT \"VALUE SUPPLIED = \";A\n240 PRINT\n250 IF A > .99E38 THEN 290\n260 PRINT \"*** TEST FAILED: VALUE SUPPLIED LESS THAN MINIMUM\"\n270 PRINT \"    POSITIVE MACHINE INFINITY. ***\"\n280 GOTO 320\n290 PRINT \"IF VALUE SUPPLIED = POSITIVE MACHINE INFINITY, AND\"\n300 PRINT \"   EXCEPTION REPORTED, THEN\"\n310 PRINT \"*** TEST PASSED ***\"\n320 PRINT\n330 PRINT \"                END TEST.\"\n340 PRINT\n1060 PRINT \"SECTION 28.2: NEGATIVE NUMBER DIVIDED BY ZERO.\"\n1070 PRINT\n1080 PRINT \"THIS SECTION TESTS THE RESULT OF DIVIDING A NEGATIVE \"\n1090 PRINT \"QUANTITY BY ZERO.\"\n1100 PRINT\n1110 PRINT \"TO PASS THIS TEST:\"\n1120 PRINT\n1130 PRINT \"    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\"\n1140 PRINT \"       DISPLAYED, AND\"\n1150 PRINT\n1160 PRINT \"    2) NEGATIVE INFINITY MUST BE SUPPLIED AS THE VALUE\"\n1170 PRINT \"       OF THE EXPRESSION AND EXECUTION CONTINUES.\"\n1180 PRINT\n1190 PRINT \"               BEGIN TEST.\"\n1200 PRINT\n1210 LET B=6\n1220 LET A=-5/(B-B)\n1230 PRINT \"VALUE SUPPLIED = \";A\n1240 PRINT\n1250 IF A < -.99E38 THEN 1290\n1260 PRINT \"*** TEST FAILED: VALUE SUPPLIED GREATER THAN MINIMUM\"\n1270 PRINT \"    NEGATIVE MACHINE INFINITY. ***\"\n1280 GOTO 1320\n1290 PRINT \"IF VALUE SUPPLIED = NEGATIVE MACHINE INFINITY, AND\"\n1300 PRINT \"   EXCEPTION REPORTED, THEN\"\n1310 PRINT \"*** TEST PASSED ***\"\n1320 PRINT\n1330 PRINT \"                END TEST.\"\n1340 PRINT\n2060 PRINT \"SECTION 28.3: ZERO DIVIDED BY ZERO.\"\n2070 PRINT\n2080 PRINT \"THIS SECTION TESTS THE RESULT OF DIVIDING ZERO BY ZERO.\"\n2100 PRINT\n2110 PRINT \"TO PASS THIS TEST:\"\n2120 PRINT\n2130 PRINT \"    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\"\n2140 PRINT \"       DISPLAYED, AND\"\n2150 PRINT\n2160 PRINT \"    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\"\n2170 PRINT \"       OF THE EXPRESSION AND EXECUTION CONTINUES.\"\n2180 PRINT\n2190 PRINT \"               BEGIN TEST.\"\n2200 PRINT\n2210 LET B=6\n2220 LET A=0/(B-B)\n2230 PRINT \"VALUE SUPPLIED = \";A\n2240 PRINT\n2250 IF A > .99E38 THEN 2290\n2260 PRINT \"*** TEST FAILED: VALUE SUPPLIED LESS THAN MINIMUM\"\n2270 PRINT \"    POSITIVE MACHINE INFINITY. ***\"\n2280 GOTO 2320\n2290 PRINT \"IF VALUE SUPPLIED = POSITIVE MACHINE INFINITY, AND\"\n2300 PRINT \"   EXCEPTION REPORTED, THEN\"\n2310 PRINT \"*** TEST PASSED ***\"\n2320 PRINT\n2330 PRINT \"                END TEST.\"\n2340 PRINT\n3000 PRINT \"END PROGRAM 28\"\n3010 END\n"`,
 right: `"220: warning: division by zero \n1220: warning: division by zero \n2220: warning: division by zero \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 LET A=5/(B-B)
+ 230 PRINT "VALUE SUPPLIED = ";A
+ 240 PRINT
+ 250 IF A > .99E38 THEN 290
+ 260 PRINT "*** TEST FAILED: VALUE SUPPLIED LESS THAN MINIMUM"
+ 270 PRINT "    POSITIVE MACHINE INFINITY. ***"
+ 280 GOTO 320
+ 290 PRINT "IF VALUE SUPPLIED = POSITIVE MACHINE INFINITY, AND"
+ 300 PRINT "   EXCEPTION REPORTED, THEN"
+ 310 PRINT "*** TEST PASSED ***"
+ 320 PRINT
+ 330 PRINT "                END TEST."
+ 340 PRINT
+ 1060 PRINT "SECTION 28.2: NEGATIVE NUMBER DIVIDED BY ZERO."
+ 1070 PRINT
+ 1080 PRINT "THIS SECTION TESTS THE RESULT OF DIVIDING A NEGATIVE "
+ 1090 PRINT "QUANTITY BY ZERO."
+ 1100 PRINT
+ 1110 PRINT "TO PASS THIS TEST:"
+ 1120 PRINT
+ 1130 PRINT "    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE"
+ 1140 PRINT "       DISPLAYED, AND"
+ 1150 PRINT
+ 1160 PRINT "    2) NEGATIVE INFINITY MUST BE SUPPLIED AS THE VALUE"
+ 1170 PRINT "       OF THE EXPRESSION AND EXECUTION CONTINUES."
+ 1180 PRINT
+ 1190 PRINT "               BEGIN TEST."
+ 1200 PRINT
+ 1210 LET B=6
+ 1220 LET A=-5/(B-B)
+ 1230 PRINT "VALUE SUPPLIED = ";A
+ 1240 PRINT
+ 1250 IF A < -.99E38 THEN 1290
+ 1260 PRINT "*** TEST FAILED: VALUE SUPPLIED GREATER THAN MINIMUM"
+ 1270 PRINT "    NEGATIVE MACHINE INFINITY. ***"
+ 1280 GOTO 1320
+ 1290 PRINT "IF VALUE SUPPLIED = NEGATIVE MACHINE INFINITY, AND"
+ 1300 PRINT "   EXCEPTION REPORTED, THEN"
+ 1310 PRINT "*** TEST PASSED ***"
+ 1320 PRINT
+ 1330 PRINT "                END TEST."
+ 1340 PRINT
+ 2060 PRINT "SECTION 28.3: ZERO DIVIDED BY ZERO."
+ 2070 PRINT
+ 2080 PRINT "THIS SECTION TESTS THE RESULT OF DIVIDING ZERO BY ZERO."
+ 2100 PRINT
+ 2110 PRINT "TO PASS THIS TEST:"
+ 2120 PRINT
+ 2130 PRINT "    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE"
+ 2140 PRINT "       DISPLAYED, AND"
+ 2150 PRINT
+ 2160 PRINT "    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE"
+ 2170 PRINT "       OF THE EXPRESSION AND EXECUTION CONTINUES."
+ 2180 PRINT
+ 2190 PRINT "               BEGIN TEST."
+ 2200 PRINT
+ 2210 LET B=6
+ 2220 LET A=0/(B-B)
+ 2230 PRINT "VALUE SUPPLIED = ";A
+ 2240 PRINT
+ 2250 IF A > .99E38 THEN 2290
+ 2260 PRINT "*** TEST FAILED: VALUE SUPPLIED LESS THAN MINIMUM"
+ 2270 PRINT "    POSITIVE MACHINE INFINITY. ***"
+ 2280 GOTO 2320
+ 2290 PRINT "IF VALUE SUPPLIED = POSITIVE MACHINE INFINITY, AND"
+ 2300 PRINT "   EXCEPTION REPORTED, THEN"
+ 2310 PRINT "*** TEST PASSED ***"
+ 2320 PRINT
+ 2330 PRINT "                END TEST."
+ 2340 PRINT
+ 3000 PRINT "END PROGRAM 28"
+ 3010 END
- 220: warning: division by zero 
- 1220: warning: division by zero 
- 2220: warning: division by zero 
', tests/integration.rs:37:13

---- P021 stdout ----
thread 'P021' panicked at 'assertion failed: `(left == right)`
  left: `"250: error: non-existing line number \n GOTO 295\n      ^\n"`,
 right: `"250: error: non-existing line number \n IF A=5 THEN 295\n             ^\n"`: 
Diff:
+  GOTO 295
+       ^
-  IF A=5 THEN 295
-              ^
', tests/integration.rs:37:13

---- P031 stdout ----
thread 'P031' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 31: EXCEPTION - ZERO RAISED TO A NEGATIVE POWER.\n    ANSI STANDARD 7.5\n\nSECTION 31.1: EXCEPTION - ZERO RAISED TO A NEGATIVE POWER.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE EXPRESSION AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nVALUE SUPPLIED =  inf \n\nIF VALUE SUPPLIED = POSITIVE MACHINE INFINITY, AND\n   EXCEPTION REPORTED, THEN\n*** TEST PASSED ***\n\n                END TEST\n\nEND PROGRAM 31\n"`,
 right: `"PROGRAM FILE 31: EXCEPTION - ZERO RAISED TO A NEGATIVE POWER.\n    ANSI STANDARD 7.5\n\nSECTION 31.1: EXCEPTION - ZERO RAISED TO A NEGATIVE POWER.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE EXPRESSION AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nVALUE SUPPLIED =  INF \n\nIF VALUE SUPPLIED = POSITIVE MACHINE INFINITY, AND\n   EXCEPTION REPORTED, THEN\n*** TEST PASSED ***\n\n                END TEST\n\nEND PROGRAM 31\n"`: 
Diff:
+ VALUE SUPPLIED =  inf 
- VALUE SUPPLIED =  INF 
', tests/integration.rs:22:13

---- P032 stdout ----
thread 'P032' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 32: EXCEPTION - NEGATIVE QUANTITY RAISED TO A\n        NON-INTEGRAL POWER.\n    ANSI STANDARD 7.5\n\nSECTION 32.1: EXCEPTION - NEGATIVE QUANTITY RAISED TO A\n        NON-INTEGRAL POWER.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) EXECUTION MUST TERMINATE\n\n               BEGIN TEST\n\nABOUT TO ATTEMPT EVALUATION OF (-2) ^ 6.00001:\n\n\nVALUE SUPPLIED = -NaN \n\n*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\n\n                END TEST\n\nEND PROGRAM 32\n"`,
 right: `"PROGRAM FILE 32: EXCEPTION - NEGATIVE QUANTITY RAISED TO A\n        NON-INTEGRAL POWER.\n    ANSI STANDARD 7.5\n\nSECTION 32.1: EXCEPTION - NEGATIVE QUANTITY RAISED TO A\n        NON-INTEGRAL POWER.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) EXECUTION MUST TERMINATE\n\n               BEGIN TEST\n\nABOUT TO ATTEMPT EVALUATION OF (-2) ^ 6.00001:\n\n"`: 
Diff:
+ 
+ VALUE SUPPLIED = -NaN 
+ 
+ *** TEST FAILED: EXECUTION DID NOT TERMINATE. ***
+ 
+                 END TEST
+ 
+ END PROGRAM 32
', tests/integration.rs:22:13

---- P037 stdout ----
thread 'P037' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=5**2\n260 PRINT \"VALUE ASSIGNED FOR 5**2 = \";A\n270 PRINT\n280 PRINT \"                END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 37\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A=5**2\n         ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=5**2
+ 260 PRINT "VALUE ASSIGNED FOR 5**2 = ";A
+ 270 PRINT
+ 280 PRINT "                END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 37"
+ 310 END
- 250: error: syntax error 
-  LET A=5**2
-          ^
', tests/integration.rs:37:13

---- P036 stdout ----
thread 'P036' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A= 8+(7-(9-88)/3+(7-9)-3\n260 PRINT \"VALUE ASSIGNED FROM ILLEGAL EXPRESSION = \";A\n270 PRINT\n280 PRINT \"                END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 36\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A= 8+(7-(9-88)/3+(7-9)-3\n                             ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A= 8+(7-(9-88)/3+(7-9)-3
+ 260 PRINT "VALUE ASSIGNED FROM ILLEGAL EXPRESSION = ";A
+ 270 PRINT
+ 280 PRINT "                END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 36"
+ 310 END
- 250: error: syntax error 
-  LET A= 8+(7-(9-88)/3+(7-9)-3
-                              ^
', tests/integration.rs:37:13

---- P035 stdout ----
thread 'P035' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=-.01 * (10 ^ 99999)\n260 PRINT \"RESULT = \";A\n270 PRINT\n280 IF A <= .99E36 THEN 310\n290 PRINT \"*** TEST FAILED: RESULT > -1E36  ***\"\n300 GOTO 340\n310 PRINT \"IF RESULT = (-.01 * MACHINE INFINITY)\"\n320 PRINT \"   AND OVERFLOW EXCEPTION REPORTED, THEN\"\n330 PRINT \"*** TEST PASSES *** OTHERWISE *** TEST FAILS ***\"\n340 PRINT\n350 PRINT \"                END TEST\"\n360 PRINT\n370 PRINT \"SECTION 35.2: SUB-EXPRESSION UNDERFLOW\"\n380 PRINT\n390 PRINT \"THIS SECTION TESTS THE EFFECT OF AN EXPRESSION OF NUMERIC\"\n400 PRINT \"UNDERFLOW WITHIN ONE OF ITS OPERATIONS.\"\n410 PRINT\n420 PRINT \"TO PASS THIS TEST:\"\n430 PRINT\n440 PRINT \"    1) A MESSAGE IDENTIFYING THE EXCEPTION MAY BE\"\n450 PRINT \"       DISPLAYED (NOT MANDATORY), AND\"\n460 PRINT\n470 PRINT \"    2) ZERO MUST BE SUPPLIED AS THE VALUE\"\n480 PRINT \"       OF THE SUB-EXPRESSION.\"\n490 PRINT\n500 PRINT \"               BEGIN TEST\"\n510 PRINT\n520 PRINT \"ABOUT TO COMPUTE 3 + (10 ^ (-99999))\"\n530 LET A=3 + (10 ^ (-99999))\n540 PRINT \"RESULT = \";A\n550 PRINT\n560 IF A=3 THEN 590\n570 PRINT \"*** TEST FAILED: RESULT NOT = 3 ***\"\n580 GOTO 600\n590 PRINT \"*** TEST PASSED ***\"\n600 PRINT\n610 PRINT \"                END TEST\"\n620 PRINT\n630 PRINT \"END PROGRAM 35\"\n640 END\n"`,
 right: `"250: warning: operation overflow \n250: warning: operation overflow (*)\n530: warning: operation overflow \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=-.01 * (10 ^ 99999)
+ 260 PRINT "RESULT = ";A
+ 270 PRINT
+ 280 IF A <= .99E36 THEN 310
+ 290 PRINT "*** TEST FAILED: RESULT > -1E36  ***"
+ 300 GOTO 340
+ 310 PRINT "IF RESULT = (-.01 * MACHINE INFINITY)"
+ 320 PRINT "   AND OVERFLOW EXCEPTION REPORTED, THEN"
+ 330 PRINT "*** TEST PASSES *** OTHERWISE *** TEST FAILS ***"
+ 340 PRINT
+ 350 PRINT "                END TEST"
+ 360 PRINT
+ 370 PRINT "SECTION 35.2: SUB-EXPRESSION UNDERFLOW"
+ 380 PRINT
+ 390 PRINT "THIS SECTION TESTS THE EFFECT OF AN EXPRESSION OF NUMERIC"
+ 400 PRINT "UNDERFLOW WITHIN ONE OF ITS OPERATIONS."
+ 410 PRINT
+ 420 PRINT "TO PASS THIS TEST:"
+ 430 PRINT
+ 440 PRINT "    1) A MESSAGE IDENTIFYING THE EXCEPTION MAY BE"
+ 450 PRINT "       DISPLAYED (NOT MANDATORY), AND"
+ 460 PRINT
+ 470 PRINT "    2) ZERO MUST BE SUPPLIED AS THE VALUE"
+ 480 PRINT "       OF THE SUB-EXPRESSION."
+ 490 PRINT
+ 500 PRINT "               BEGIN TEST"
+ 510 PRINT
+ 520 PRINT "ABOUT TO COMPUTE 3 + (10 ^ (-99999))"
+ 530 LET A=3 + (10 ^ (-99999))
+ 540 PRINT "RESULT = ";A
+ 550 PRINT
+ 560 IF A=3 THEN 590
+ 570 PRINT "*** TEST FAILED: RESULT NOT = 3 ***"
+ 580 GOTO 600
+ 590 PRINT "*** TEST PASSED ***"
+ 600 PRINT
+ 610 PRINT "                END TEST"
+ 620 PRINT
+ 630 PRINT "END PROGRAM 35"
+ 640 END
- 250: warning: operation overflow 
- 250: warning: operation overflow (*)
- 530: warning: operation overflow 
', tests/integration.rs:37:13

---- P038 stdout ----
thread 'P038' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=4 ^ -2\n260 PRINT \"VALUE ASSIGNED FOR 4 ^ -2 = \";A\n270 PRINT\n280 PRINT \"                END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 38\"\n310 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=4 ^ -2
+ 260 PRINT "VALUE ASSIGNED FOR 4 ^ -2 = ";A
+ 270 PRINT
+ 280 PRINT "                END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 38"
+ 310 END
+ 
', tests/integration.rs:37:13

---- P040 stdout ----
thread 'P040' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 READ A1,A2,T,L,H\n330 IF A1=999 THEN 480\n335 LET M$=\"PASS\"\n340 LET C=A1-A2\n350 IF C<L THEN 380\n360 IF C>H THEN 380\n370 GOTO 400\n380 LET M$=\"FAIL\"\n390 LET F=F+1\n400 PRINT A1,A2,T,C,M$\n410 GOTO 320\n480 PRINT\n490 IF F=0 THEN 520\n500 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n510 GOTO 530\n520 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n530 PRINT\n540 PRINT \"               END TEST\"\n550 PRINT\n560 PRINT \"END PROGRAM 40\"\n570 DATA 0,0,0,0,0\n2000 DATA 0,-765.432,765.432,765.431,765.433\n3000 DATA  0.876543000E+03,-0.123453000E+03, 0.999996000E+03\n3010 DATA  0.999993499E+03, 0.999998500E+03\n3020 DATA  0.811111000E-01,-0.111111000E-01, 0.922222000E-01\n3030 DATA  0.922219499E-01, 0.922224500E-01\n3040 DATA -0.579999000E+02, 0.111111000E+00,-0.581110110E+02\n3050 DATA -0.581111621E+02,-0.581108600E+02\n3060 DATA  0.111111100E+07,-0.111111100E+07, 0.222222200E+07\n3070 DATA  0.222219700E+07, 0.222224700E+07\n3080 DATA  0.654321000E+01,-0.123456000E+01, 0.777777000E+01\n3090 DATA  0.777774499E+01, 0.777779500E+01\n3100 DATA  0.654321000E-09,-0.123456000E-09, 0.777777000E-09\n3110 DATA  0.777774499E-09, 0.777779500E-09\n3120 DATA -0.654321000E-19, 0.123456000E-19,-0.777777000E-19\n3130 DATA -0.777779500E-19,-0.777774499E-19\n3140 DATA  0.654321000E-29,-0.123456000E-29, 0.777777000E-29\n3150 DATA  0.777774500E-29, 0.777779500E-29\n3160 DATA  0.654321000E-37,-0.123456000E-37, 0.777777000E-37\n3170 DATA  0.777774500E-37, 0.777779500E-37\n3180 DATA  0.123456000E+11,-0.654321000E+11, 0.777777000E+11\n3190 DATA  0.777774500E+11, 0.777779500E+11\n3200 DATA -0.123456000E+21, 0.654321000E+21,-0.777777000E+21\n3210 DATA -0.777779500E+21,-0.777774500E+21\n3220 DATA  0.123456000E+31,-0.654321000E+31, 0.777777000E+31\n3230 DATA  0.777774499E+31, 0.777779500E+31\n3240 DATA  0.123456000E+38,-0.654321000E+38, 0.777777000E+38\n3250 DATA  0.777774499E+38, 0.777779500E+38\n3260 DATA  0.499997000E-01,-0.499996000E-01, 0.999993000E-01\n3270 DATA  0.999990499E-01, 0.999995500E-01\n3280 DATA  0.999993000E-01,-0.400000000E-06, 0.999997000E-01\n3290 DATA  0.999995499E-01, 0.999998501E-01\n3300 DATA  0.999993000E-01,-0.400000000E-07, 0.999993040E-01\n3310 DATA  0.999991899E-01, 0.999994901E-01\n3320 DATA  0.999993000E-01,-0.400000000E-08, 0.999993040E-01\n3330 DATA  0.999991539E-01, 0.999994541E-01\n3340 DATA  0.999993000E-01,-0.400000000E-09, 0.999993004E-01\n3350 DATA  0.999991503E-01, 0.999994505E-01\n3360 DATA  0.999993000E-01,-0.400000000E-10, 0.999993000E-01\n3370 DATA  0.999991500E-01, 0.999994501E-01\n3380 DATA -0.102030400E+07,-0.400000000E+01,-0.102030000E+07\n3390 DATA -0.102031501E+07,-0.102028499E+07\n3400 DATA  0.102030400E+07, 0.304000000E+03, 0.102000000E+07\n3410 DATA  0.101998499E+07, 0.102001501E+07\n3420 DATA -0.102030400E+07,-0.203040000E+05,-0.100000000E+07\n3430 DATA -0.100001510E+07,-0.999989400E+06\n3440 DATA -0.102030400E+07,-0.102030400E+07, 0.000000000E+00\n3450 DATA -0.200000500E+02, 0.200000500E+02\n3460 DATA -0.102030400E+00,-0.400000000E-06,-0.102030000E+00\n3470 DATA -0.102031501E+00,-0.102028499E+00\n3480 DATA  0.102030400E+00, 0.304000000E-04, 0.102000000E+00\n3490 DATA  0.101998499E+00, 0.102001501E+00\n3500 DATA -0.102030400E+00,-0.203040000E-02,-0.100000000E+00\n3510 DATA -0.100001501E+00,-0.999989400E-01\n3520 DATA -0.102030400E+00,-0.102030400E+00, 0.000000000E+00\n3530 DATA -0.200000500E-05, 0.200000500E-05\n3540 DATA -0.102030400E+00,-0.102030300E+00,-0.100000000E-06\n3550 DATA -0.210000501E-05, 0.190000500E-05\n3560 DATA -0.102030400E+00,-0.102030500E+00, 0.100000000E-06\n3570 DATA -0.190000500E-05, 0.210000501E-05\n5000 DATA 999,0,0,0,0\n5010 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 READ A1,A2,T,L,H
+ 330 IF A1=999 THEN 480
+ 335 LET M$="PASS"
+ 340 LET C=A1-A2
+ 350 IF C<L THEN 380
+ 360 IF C>H THEN 380
+ 370 GOTO 400
+ 380 LET M$="FAIL"
+ 390 LET F=F+1
+ 400 PRINT A1,A2,T,C,M$
+ 410 GOTO 320
+ 480 PRINT
+ 490 IF F=0 THEN 520
+ 500 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 510 GOTO 530
+ 520 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 530 PRINT
+ 540 PRINT "               END TEST"
+ 550 PRINT
+ 560 PRINT "END PROGRAM 40"
+ 570 DATA 0,0,0,0,0
+ 2000 DATA 0,-765.432,765.432,765.431,765.433
+ 3000 DATA  0.876543000E+03,-0.123453000E+03, 0.999996000E+03
+ 3010 DATA  0.999993499E+03, 0.999998500E+03
+ 3020 DATA  0.811111000E-01,-0.111111000E-01, 0.922222000E-01
+ 3030 DATA  0.922219499E-01, 0.922224500E-01
+ 3040 DATA -0.579999000E+02, 0.111111000E+00,-0.581110110E+02
+ 3050 DATA -0.581111621E+02,-0.581108600E+02
+ 3060 DATA  0.111111100E+07,-0.111111100E+07, 0.222222200E+07
+ 3070 DATA  0.222219700E+07, 0.222224700E+07
+ 3080 DATA  0.654321000E+01,-0.123456000E+01, 0.777777000E+01
+ 3090 DATA  0.777774499E+01, 0.777779500E+01
+ 3100 DATA  0.654321000E-09,-0.123456000E-09, 0.777777000E-09
+ 3110 DATA  0.777774499E-09, 0.777779500E-09
+ 3120 DATA -0.654321000E-19, 0.123456000E-19,-0.777777000E-19
+ 3130 DATA -0.777779500E-19,-0.777774499E-19
+ 3140 DATA  0.654321000E-29,-0.123456000E-29, 0.777777000E-29
+ 3150 DATA  0.777774500E-29, 0.777779500E-29
+ 3160 DATA  0.654321000E-37,-0.123456000E-37, 0.777777000E-37
+ 3170 DATA  0.777774500E-37, 0.777779500E-37
+ 3180 DATA  0.123456000E+11,-0.654321000E+11, 0.777777000E+11
+ 3190 DATA  0.777774500E+11, 0.777779500E+11
+ 3200 DATA -0.123456000E+21, 0.654321000E+21,-0.777777000E+21
+ 3210 DATA -0.777779500E+21,-0.777774500E+21
+ 3220 DATA  0.123456000E+31,-0.654321000E+31, 0.777777000E+31
+ 3230 DATA  0.777774499E+31, 0.777779500E+31
+ 3240 DATA  0.123456000E+38,-0.654321000E+38, 0.777777000E+38
+ 3250 DATA  0.777774499E+38, 0.777779500E+38
+ 3260 DATA  0.499997000E-01,-0.499996000E-01, 0.999993000E-01
+ 3270 DATA  0.999990499E-01, 0.999995500E-01
+ 3280 DATA  0.999993000E-01,-0.400000000E-06, 0.999997000E-01
+ 3290 DATA  0.999995499E-01, 0.999998501E-01
+ 3300 DATA  0.999993000E-01,-0.400000000E-07, 0.999993040E-01
+ 3310 DATA  0.999991899E-01, 0.999994901E-01
+ 3320 DATA  0.999993000E-01,-0.400000000E-08, 0.999993040E-01
+ 3330 DATA  0.999991539E-01, 0.999994541E-01
+ 3340 DATA  0.999993000E-01,-0.400000000E-09, 0.999993004E-01
+ 3350 DATA  0.999991503E-01, 0.999994505E-01
+ 3360 DATA  0.999993000E-01,-0.400000000E-10, 0.999993000E-01
+ 3370 DATA  0.999991500E-01, 0.999994501E-01
+ 3380 DATA -0.102030400E+07,-0.400000000E+01,-0.102030000E+07
+ 3390 DATA -0.102031501E+07,-0.102028499E+07
+ 3400 DATA  0.102030400E+07, 0.304000000E+03, 0.102000000E+07
+ 3410 DATA  0.101998499E+07, 0.102001501E+07
+ 3420 DATA -0.102030400E+07,-0.203040000E+05,-0.100000000E+07
+ 3430 DATA -0.100001510E+07,-0.999989400E+06
+ 3440 DATA -0.102030400E+07,-0.102030400E+07, 0.000000000E+00
+ 3450 DATA -0.200000500E+02, 0.200000500E+02
+ 3460 DATA -0.102030400E+00,-0.400000000E-06,-0.102030000E+00
+ 3470 DATA -0.102031501E+00,-0.102028499E+00
+ 3480 DATA  0.102030400E+00, 0.304000000E-04, 0.102000000E+00
+ 3490 DATA  0.101998499E+00, 0.102001501E+00
+ 3500 DATA -0.102030400E+00,-0.203040000E-02,-0.100000000E+00
+ 3510 DATA -0.100001501E+00,-0.999989400E-01
+ 3520 DATA -0.102030400E+00,-0.102030400E+00, 0.000000000E+00
+ 3530 DATA -0.200000500E-05, 0.200000500E-05
+ 3540 DATA -0.102030400E+00,-0.102030300E+00,-0.100000000E-06
+ 3550 DATA -0.210000501E-05, 0.190000500E-05
+ 3560 DATA -0.102030400E+00,-0.102030500E+00, 0.100000000E-06
+ 3570 DATA -0.190000500E-05, 0.210000501E-05
+ 5000 DATA 999,0,0,0,0
+ 5010 END
+ 
', tests/integration.rs:37:13

---- P042 stdout ----
thread 'P042' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 READ A1,A2,T,L,H\n330 IF A1=999 THEN 480\n335 LET M$=\"PASS\"\n340 LET C=A1/A2\n350 IF C<L THEN 380\n360 IF C>H THEN 380\n370 GOTO 400\n380 LET M$=\"FAIL\"\n390 LET F=F+1\n400 PRINT A1,A2,T,C,M$\n410 GOTO 320\n480 PRINT\n490 IF F=0 THEN 520\n500 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n510 GOTO 530\n520 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n530 PRINT\n540 PRINT \"               END TEST\"\n550 PRINT\n560 PRINT \"END PROGRAM 42\"\n2000 DATA 0,-74.7589,0,0,0\n3000 DATA  0.972125000E+13, 0.248864000E-02, 0.390625000E+16\n3010 DATA  0.390622528E+16, 0.390627472E+16\n3020 DATA -0.972125000E-04,-0.248864000E+14, 0.390625000E-17\n3030 DATA  0.390622528E-17, 0.390627472E-17\n3040 DATA  0.936467000E-01, 0.954647000E-01, 0.980956312E+00\n3050 DATA  0.980953736E+00, 0.980958887E+00\n3060 DATA  0.376465000E+38, 0.895857000E+38, 0.420228898E+00\n3070 DATA  0.420226812E+00, 0.420230984E+00\n3080 DATA  0.958764000E+18, 0.558589000E+16, 0.171640329E+03\n3090 DATA  0.171639343E+03, 0.171641316E+03\n3100 DATA -0.457858000E-16,-0.879796000E-13, 0.520413823E-03\n3110 DATA  0.520411595E-03, 0.520416052E-03\n3120 DATA  0.237847000E-37, 0.117265000E-37, 0.202828636E+01\n3130 DATA  0.202825553E+01, 0.202831619E+01\n3140 DATA  0.684776000E+38,-0.697536000E+00,-0.981707037E+38\n3150 DATA -0.981710379E+38,-0.981703696E+38\n3160 DATA -0.346756000E+21, 0.222736000E-16,-0.155680267E+38\n3170 DATA -0.155681916E+38,-0.155678619E+38\n3200 DATA  0.987645000E+00, 0.987897000E-37, 0.999744913E+37\n3210 DATA  0.999742388E+37, 0.999747437E+37\n3220 DATA -0.447563000E-36, 0.668575000E+01,-0.669428262E-37\n3230 DATA -0.669431259E-37,-0.669425264E-37\n3240 DATA  0.857653000E-19,-0.889763000E+18,-0.963911738E-37\n3250 DATA -0.963914446E-37,-0.963909031E-37\n3260 DATA -0.557645000E+01,-0.786453000E+38, 0.709063352E-37\n3270 DATA  0.709060678E-37, 0.709066025E-37\n5000 DATA 999,0,0,0,0\n5010 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 READ A1,A2,T,L,H
+ 330 IF A1=999 THEN 480
+ 335 LET M$="PASS"
+ 340 LET C=A1/A2
+ 350 IF C<L THEN 380
+ 360 IF C>H THEN 380
+ 370 GOTO 400
+ 380 LET M$="FAIL"
+ 390 LET F=F+1
+ 400 PRINT A1,A2,T,C,M$
+ 410 GOTO 320
+ 480 PRINT
+ 490 IF F=0 THEN 520
+ 500 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 510 GOTO 530
+ 520 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 530 PRINT
+ 540 PRINT "               END TEST"
+ 550 PRINT
+ 560 PRINT "END PROGRAM 42"
+ 2000 DATA 0,-74.7589,0,0,0
+ 3000 DATA  0.972125000E+13, 0.248864000E-02, 0.390625000E+16
+ 3010 DATA  0.390622528E+16, 0.390627472E+16
+ 3020 DATA -0.972125000E-04,-0.248864000E+14, 0.390625000E-17
+ 3030 DATA  0.390622528E-17, 0.390627472E-17
+ 3040 DATA  0.936467000E-01, 0.954647000E-01, 0.980956312E+00
+ 3050 DATA  0.980953736E+00, 0.980958887E+00
+ 3060 DATA  0.376465000E+38, 0.895857000E+38, 0.420228898E+00
+ 3070 DATA  0.420226812E+00, 0.420230984E+00
+ 3080 DATA  0.958764000E+18, 0.558589000E+16, 0.171640329E+03
+ 3090 DATA  0.171639343E+03, 0.171641316E+03
+ 3100 DATA -0.457858000E-16,-0.879796000E-13, 0.520413823E-03
+ 3110 DATA  0.520411595E-03, 0.520416052E-03
+ 3120 DATA  0.237847000E-37, 0.117265000E-37, 0.202828636E+01
+ 3130 DATA  0.202825553E+01, 0.202831619E+01
+ 3140 DATA  0.684776000E+38,-0.697536000E+00,-0.981707037E+38
+ 3150 DATA -0.981710379E+38,-0.981703696E+38
+ 3160 DATA -0.346756000E+21, 0.222736000E-16,-0.155680267E+38
+ 3170 DATA -0.155681916E+38,-0.155678619E+38
+ 3200 DATA  0.987645000E+00, 0.987897000E-37, 0.999744913E+37
+ 3210 DATA  0.999742388E+37, 0.999747437E+37
+ 3220 DATA -0.447563000E-36, 0.668575000E+01,-0.669428262E-37
+ 3230 DATA -0.669431259E-37,-0.669425264E-37
+ 3240 DATA  0.857653000E-19,-0.889763000E+18,-0.963911738E-37
+ 3250 DATA -0.963914446E-37,-0.963909031E-37
+ 3260 DATA -0.557645000E+01,-0.786453000E+38, 0.709063352E-37
+ 3270 DATA  0.709060678E-37, 0.709066025E-37
+ 5000 DATA 999,0,0,0,0
+ 5010 END
+ 
', tests/integration.rs:37:13

---- P043 stdout ----
thread 'P043' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 READ A1,A2,T,L,H\n330 IF A1=999 THEN 480\n335 LET M$=\"PASS\"\n340 LET C=A1^A2\n350 IF C<L THEN 380\n360 IF C>H THEN 380\n370 GOTO 400\n380 LET M$=\"FAIL\"\n390 LET F=F+1\n400 PRINT A1,A2,T,C,M$\n410 GOTO 320\n480 PRINT\n490 IF F=0 THEN 520\n500 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n510 GOTO 530\n520 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n530 PRINT\n540 PRINT \"               END TEST\"\n550 PRINT\n560 PRINT \"END PROGRAM 43\"\n1990 REM TEST X^0=1\n2000 DATA -3.46478E33,0,1,1,1\n2010 DATA -2.36339E-36,0,1,1,1\n2020 DATA 0,0,1,1,1\n2030 DATA 3.98475E-37,0,1,1,1\n2040 DATA 9.88373E37,0,1,1,1\n2045 REM TEST 0^X=0, FOR X>0\n2050 DATA 0,3.47474E-33,0,0,0\n2060 DATA 0,8.98675E33,0,0,0\n2990 REM TEST A^X, A<-1\n3000 DATA -0.376354000E+01,-0.440000000E+02, 0.471793993E-25\n3010 DATA  0.471738338E-25, 0.471849655E-25\n3020 DATA -0.687465000E+01,-0.110000000E+02,-0.616940788E-09\n3030 DATA -0.616951160E-09,-0.616930416E-09\n3040 DATA -0.736443000E+04,-0.100000000E+01,-0.135787834E-03\n3050 DATA -0.135788519E-03,-0.135787149E-03\n3060 DATA -0.333874000E+02, 0.100000000E+01,-0.333874000E+02\n3070 DATA -0.333875500E+02,-0.333872500E+02\n3080 DATA -0.984343000E+03, 0.700000000E+01,-0.895416722E+21\n3090 DATA -0.895423590E+21,-0.895409854E+21\n3100 DATA -0.336353000E+01, 0.120000000E+02, 0.209673559E+07\n3110 DATA  0.209665578E+07, 0.209681540E+07\n3115 REM TEST -1^X\n3120 DATA -0.100000000E+01,-0.330000000E+02,-0.100000000E+01\n3130 DATA -0.100033506E+01,-0.999669556E+00\n3140 DATA -0.100000000E+01,-0.600000000E+01, 0.100000000E+01\n3150 DATA  0.999939502E+00, 0.100006501E+01\n3160 DATA -0.100000000E+01,-0.100000000E+01,-0.100000000E+01\n3170 DATA -0.100001501E+01,-0.999989500E+00\n3180 DATA -0.100000000E+01, 0.100000000E+01,-0.100000000E+01\n3190 DATA -0.100001500E+01,-0.999989500E+00\n3200 DATA -0.100000000E+01, 0.800000000E+01, 0.100000000E+01\n3210 DATA  0.999919502E+00, 0.100008501E+01\n3220 DATA -0.100000000E+01, 0.900000000E+01,-0.10000000E+01\n3230 DATA -0.100009501E+01,-0.999909503E+00\n3235 REM TEST A^X, 01<A<0\n3240 DATA -0.474653000E+00,-0.220000000E+02, 0.131741601E+08\n3250 DATA  0.131734994E+08, 0.131748208E+08\n3260 DATA -0.225242000E-02, 0.300000000E+01,-0.114274183E-07\n3270 DATA -0.114276205E-07,-0.114272160E-07\n3280 DATA -0.534278000E-04, 0.600000000E+01, 0.232596807E-25\n3290 DATA  0.232593695E-25, 0.232599920E-25\n3300 DATA -0.272625000E+00, 0.900000000E+01,-0.831938279E-05\n3310 DATA -0.831966244E-05,-0.831910314E-05\n3315 REM TEST A^X,  0<A<1\n3320 DATA  0.363544000E+00,-0.363353000E+02, 0.927457281E+16\n3330 DATA  0.927270258E+16, 0.927644343E+16\n3340 DATA  0.463542000E-02,-0.100000000E+01, 0.215730182E+03\n3350 DATA  0.215717623E+03, 0.215742742E+03\n3380 DATA  0.298746000E-04,-0.263545000E-02, 0.102783787E+01\n3390 DATA  0.102783275E+01, 0.102784299E+01\n3400 DATA  0.226399000E+00, 0.847574000E+00, 0.283928118E+00\n3410 DATA  0.283926132E+00, 0.283930103E+00\n3420 DATA  0.998476000E-01, 0.100000000E+01, 0.998476000E-01\n3430 DATA  0.998451494E-01, 0.998500507E-01\n3440 DATA  0.974653000E-01, 0.143654000E+02, 0.298144041E-14\n3450 DATA  0.298069739E-14, 0.298218360E-14\n3455 REM TEST 1^X\n3460 DATA  0.100000000E+01,-0.222222000E+02, 0.100000000E+01\n3470 DATA  0.999777302E+00, 0.100022725E+01\n3480 DATA  0.100000000E+01,-0.464533000E-01, 0.100000000E+01\n3490 DATA  0.999999035E+00, 0.100000547E+01\n3500 DATA  0.100000000E+01, 0.993764000E-01, 0.100000000E+01\n3510 DATA  0.999998506E+00, 0.100000600E+01\n3520 DATA  0.100000000E+01, 0.187564000E+02, 0.100000000E+01\n3530 DATA  0.999811951E+00, 0.100019259E+01\n3535 REM TEST A^X, A>1\n3540 DATA  0.847447000E+03,-0.985743000E+01, 0.136878595E-28\n3550 DATA  0.136867274E-28, 0.136889917E-28\n3560 DATA  0.228398000E+01,-0.937362000E+00, 0.461079137E+00\n3570 DATA  0.461076363E+00, 0.461081910E+00\n3580 DATA  0.933847000E+02, 0.928273000E-01, 0.152368565E+01\n3590 DATA  0.152367980E+01, 0.152369149E+01\n3600 DATA  0.837363000E+09, 0.298383000E+01, 0.421170346E+27\n3610 DATA  0.421081821E+27, 0.421258889E+27\n3615 REM TEST A^X, WHERE ABS(A) IS CLOSE TO 1, X IS LARGE\n3620 DATA  0.999988000E+00, 0.958576000E+06, 0.100999405E-04\n3630 DATA  0.387260445E-05, 0.263410738E-04\n3640 DATA -0.999982000E+00, 0.947563000E+06,-0.391334786E-07\n3650 DATA -0.100943693E-06,-0.151711334E-07\n3660 DATA -0.999937000E+00, 0.976352000E+06, 0.193031627E-26\n3670 DATA  0.727071227E-27, 0.512483260E-26\n3680 DATA  0.100002000E+01, 0.209746500E+07, 0.165259840E+19\n3690 DATA  0.128553554E+10, 0.212444587E+28\n3700 DATA -0.100005000E+01, 0.353533000E+06,-0.474984719E+08\n3710 DATA -0.162918665E+10,-0.138475470E+07\n3720 DATA -0.100005000E+01, 0.958572000E+06, 0.652538506E+21\n3730 DATA  0.448505410E+17, 0.949298339E+25\n3735 REM TEST A^X, WHERE A^X CLOSE TO LIMITS OF 1E38, 1E-38\n3740 DATA  0.576352000E+00, 0.111000000E+03, 0.273115473E-26\n3750 DATA  0.272911951E-26, 0.273319144E-26\n3760 DATA  0.578746000E+00,-0.145432000E+03, 0.348212882E+35\n3770 DATA  0.347934556E+35, 0.348491430E+35\n3780 DATA  0.227364000E+01, 0.944756000E+02, 0.502917503E+34\n3790 DATA  0.502666781E+34, 0.503168349E+34\n3792 DATA  0.233333000E+01,-0.991234000E+02, 0.334927971E-36\n3795 DATA  0.334752354E-36, 0.335103676E-36\n3799 REM TEST A^X, WHERE A IS CLOSE TO LIMITS OF 1E38, 1E-38\n3800 DATA  0.558574000E+38, 0.976453000E-03, 0.108857473E+01\n3810 DATA  0.108856963E+01, 0.108857984E+01\n3820 DATA  0.576363000E-29, 0.172728000E-01, 0.312575800E+00\n3830 DATA  0.312573186E+00, 0.312578414E+00\n3840 DATA  0.333737000E+34,-0.953423000E-01, 0.636504568E-03\n3850 DATA  0.636498972E-03, 0.636510163E-03\n3860 DATA  0.623147000E-37,-0.936218000E-02, 0.223009693E+01\n3870 DATA  0.223004499E+01, 0.223014888E+01\n5000 DATA 999,0,0,0,0\n5010 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 READ A1,A2,T,L,H
+ 330 IF A1=999 THEN 480
+ 335 LET M$="PASS"
+ 340 LET C=A1^A2
+ 350 IF C<L THEN 380
+ 360 IF C>H THEN 380
+ 370 GOTO 400
+ 380 LET M$="FAIL"
+ 390 LET F=F+1
+ 400 PRINT A1,A2,T,C,M$
+ 410 GOTO 320
+ 480 PRINT
+ 490 IF F=0 THEN 520
+ 500 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 510 GOTO 530
+ 520 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 530 PRINT
+ 540 PRINT "               END TEST"
+ 550 PRINT
+ 560 PRINT "END PROGRAM 43"
+ 1990 REM TEST X^0=1
+ 2000 DATA -3.46478E33,0,1,1,1
+ 2010 DATA -2.36339E-36,0,1,1,1
+ 2020 DATA 0,0,1,1,1
+ 2030 DATA 3.98475E-37,0,1,1,1
+ 2040 DATA 9.88373E37,0,1,1,1
+ 2045 REM TEST 0^X=0, FOR X>0
+ 2050 DATA 0,3.47474E-33,0,0,0
+ 2060 DATA 0,8.98675E33,0,0,0
+ 2990 REM TEST A^X, A<-1
+ 3000 DATA -0.376354000E+01,-0.440000000E+02, 0.471793993E-25
+ 3010 DATA  0.471738338E-25, 0.471849655E-25
+ 3020 DATA -0.687465000E+01,-0.110000000E+02,-0.616940788E-09
+ 3030 DATA -0.616951160E-09,-0.616930416E-09
+ 3040 DATA -0.736443000E+04,-0.100000000E+01,-0.135787834E-03
+ 3050 DATA -0.135788519E-03,-0.135787149E-03
+ 3060 DATA -0.333874000E+02, 0.100000000E+01,-0.333874000E+02
+ 3070 DATA -0.333875500E+02,-0.333872500E+02
+ 3080 DATA -0.984343000E+03, 0.700000000E+01,-0.895416722E+21
+ 3090 DATA -0.895423590E+21,-0.895409854E+21
+ 3100 DATA -0.336353000E+01, 0.120000000E+02, 0.209673559E+07
+ 3110 DATA  0.209665578E+07, 0.209681540E+07
+ 3115 REM TEST -1^X
+ 3120 DATA -0.100000000E+01,-0.330000000E+02,-0.100000000E+01
+ 3130 DATA -0.100033506E+01,-0.999669556E+00
+ 3140 DATA -0.100000000E+01,-0.600000000E+01, 0.100000000E+01
+ 3150 DATA  0.999939502E+00, 0.100006501E+01
+ 3160 DATA -0.100000000E+01,-0.100000000E+01,-0.100000000E+01
+ 3170 DATA -0.100001501E+01,-0.999989500E+00
+ 3180 DATA -0.100000000E+01, 0.100000000E+01,-0.100000000E+01
+ 3190 DATA -0.100001500E+01,-0.999989500E+00
+ 3200 DATA -0.100000000E+01, 0.800000000E+01, 0.100000000E+01
+ 3210 DATA  0.999919502E+00, 0.100008501E+01
+ 3220 DATA -0.100000000E+01, 0.900000000E+01,-0.10000000E+01
+ 3230 DATA -0.100009501E+01,-0.999909503E+00
+ 3235 REM TEST A^X, 01<A<0
+ 3240 DATA -0.474653000E+00,-0.220000000E+02, 0.131741601E+08
+ 3250 DATA  0.131734994E+08, 0.131748208E+08
+ 3260 DATA -0.225242000E-02, 0.300000000E+01,-0.114274183E-07
+ 3270 DATA -0.114276205E-07,-0.114272160E-07
+ 3280 DATA -0.534278000E-04, 0.600000000E+01, 0.232596807E-25
+ 3290 DATA  0.232593695E-25, 0.232599920E-25
+ 3300 DATA -0.272625000E+00, 0.900000000E+01,-0.831938279E-05
+ 3310 DATA -0.831966244E-05,-0.831910314E-05
+ 3315 REM TEST A^X,  0<A<1
+ 3320 DATA  0.363544000E+00,-0.363353000E+02, 0.927457281E+16
+ 3330 DATA  0.927270258E+16, 0.927644343E+16
+ 3340 DATA  0.463542000E-02,-0.100000000E+01, 0.215730182E+03
+ 3350 DATA  0.215717623E+03, 0.215742742E+03
+ 3380 DATA  0.298746000E-04,-0.263545000E-02, 0.102783787E+01
+ 3390 DATA  0.102783275E+01, 0.102784299E+01
+ 3400 DATA  0.226399000E+00, 0.847574000E+00, 0.283928118E+00
+ 3410 DATA  0.283926132E+00, 0.283930103E+00
+ 3420 DATA  0.998476000E-01, 0.100000000E+01, 0.998476000E-01
+ 3430 DATA  0.998451494E-01, 0.998500507E-01
+ 3440 DATA  0.974653000E-01, 0.143654000E+02, 0.298144041E-14
+ 3450 DATA  0.298069739E-14, 0.298218360E-14
+ 3455 REM TEST 1^X
+ 3460 DATA  0.100000000E+01,-0.222222000E+02, 0.100000000E+01
+ 3470 DATA  0.999777302E+00, 0.100022725E+01
+ 3480 DATA  0.100000000E+01,-0.464533000E-01, 0.100000000E+01
+ 3490 DATA  0.999999035E+00, 0.100000547E+01
+ 3500 DATA  0.100000000E+01, 0.993764000E-01, 0.100000000E+01
+ 3510 DATA  0.999998506E+00, 0.100000600E+01
+ 3520 DATA  0.100000000E+01, 0.187564000E+02, 0.100000000E+01
+ 3530 DATA  0.999811951E+00, 0.100019259E+01
+ 3535 REM TEST A^X, A>1
+ 3540 DATA  0.847447000E+03,-0.985743000E+01, 0.136878595E-28
+ 3550 DATA  0.136867274E-28, 0.136889917E-28
+ 3560 DATA  0.228398000E+01,-0.937362000E+00, 0.461079137E+00
+ 3570 DATA  0.461076363E+00, 0.461081910E+00
+ 3580 DATA  0.933847000E+02, 0.928273000E-01, 0.152368565E+01
+ 3590 DATA  0.152367980E+01, 0.152369149E+01
+ 3600 DATA  0.837363000E+09, 0.298383000E+01, 0.421170346E+27
+ 3610 DATA  0.421081821E+27, 0.421258889E+27
+ 3615 REM TEST A^X, WHERE ABS(A) IS CLOSE TO 1, X IS LARGE
+ 3620 DATA  0.999988000E+00, 0.958576000E+06, 0.100999405E-04
+ 3630 DATA  0.387260445E-05, 0.263410738E-04
+ 3640 DATA -0.999982000E+00, 0.947563000E+06,-0.391334786E-07
+ 3650 DATA -0.100943693E-06,-0.151711334E-07
+ 3660 DATA -0.999937000E+00, 0.976352000E+06, 0.193031627E-26
+ 3670 DATA  0.727071227E-27, 0.512483260E-26
+ 3680 DATA  0.100002000E+01, 0.209746500E+07, 0.165259840E+19
+ 3690 DATA  0.128553554E+10, 0.212444587E+28
+ 3700 DATA -0.100005000E+01, 0.353533000E+06,-0.474984719E+08
+ 3710 DATA -0.162918665E+10,-0.138475470E+07
+ 3720 DATA -0.100005000E+01, 0.958572000E+06, 0.652538506E+21
+ 3730 DATA  0.448505410E+17, 0.949298339E+25
+ 3735 REM TEST A^X, WHERE A^X CLOSE TO LIMITS OF 1E38, 1E-38
+ 3740 DATA  0.576352000E+00, 0.111000000E+03, 0.273115473E-26
+ 3750 DATA  0.272911951E-26, 0.273319144E-26
+ 3760 DATA  0.578746000E+00,-0.145432000E+03, 0.348212882E+35
+ 3770 DATA  0.347934556E+35, 0.348491430E+35
+ 3780 DATA  0.227364000E+01, 0.944756000E+02, 0.502917503E+34
+ 3790 DATA  0.502666781E+34, 0.503168349E+34
+ 3792 DATA  0.233333000E+01,-0.991234000E+02, 0.334927971E-36
+ 3795 DATA  0.334752354E-36, 0.335103676E-36
+ 3799 REM TEST A^X, WHERE A IS CLOSE TO LIMITS OF 1E38, 1E-38
+ 3800 DATA  0.558574000E+38, 0.976453000E-03, 0.108857473E+01
+ 3810 DATA  0.108856963E+01, 0.108857984E+01
+ 3820 DATA  0.576363000E-29, 0.172728000E-01, 0.312575800E+00
+ 3830 DATA  0.312573186E+00, 0.312578414E+00
+ 3840 DATA  0.333737000E+34,-0.953423000E-01, 0.636504568E-03
+ 3850 DATA  0.636498972E-03, 0.636510163E-03
+ 3860 DATA  0.623147000E-37,-0.936218000E-02, 0.223009693E+01
+ 3870 DATA  0.223004499E+01, 0.223014888E+01
+ 5000 DATA 999,0,0,0,0
+ 5010 END
+ 
', tests/integration.rs:37:13

---- P030 stdout ----
thread 'P030' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 30: EXCEPTION - OVERFLOW OF NUMERIC CONSTANTS.\n    ANSI STANDARD 5.4, 5.5\n\nTHIS PROGRAM TESTS VARIOUS CASES OF CONSTANT OVERFLOW.\n\nSECTION 30.1: POSITIVE CONSTANT OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF CONSTANT EVALUATION\nEXCEEDING POSITIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE CONSTANT AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nRESULT OF ASSIGNING 3E99999 =  inf \nIF (RESULT = 3E99999) OR \n   (RESULT = POSITIVE INFINITY AND EXCEPTION REPORTED)\n*** TEST PASSED *** OTHERWISE *** TEST FAILED ***\n\n                END TEST\n\nSECTION 30.2: NEGATIVE CONSTANT OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF CONSTANT EVALUATION\nEXCEEDING NEGATIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) NEGATIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE CONSTANT AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nRESULT OF ASSIGNING -3E99999 = -inf \nIF (RESULT = -3E99999) OR \n   (RESULT = NEGATIVE INFINITY AND EXCEPTION REPORTED)\n*** TEST PASSES *** OTHERWISE *** TEST FAILS *** \n\n                END TEST\n\nEND PROGRAM 30\n"`,
 right: `"PROGRAM FILE 30: EXCEPTION - OVERFLOW OF NUMERIC CONSTANTS.\n    ANSI STANDARD 5.4, 5.5\n\nTHIS PROGRAM TESTS VARIOUS CASES OF CONSTANT OVERFLOW.\n\nSECTION 30.1: POSITIVE CONSTANT OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF CONSTANT EVALUATION\nEXCEEDING POSITIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE CONSTANT AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nRESULT OF ASSIGNING 3E99999 =  INF \nIF (RESULT = 3E99999) OR \n   (RESULT = POSITIVE INFINITY AND EXCEPTION REPORTED)\n*** TEST PASSED *** OTHERWISE *** TEST FAILED ***\n\n                END TEST\n\nSECTION 30.2: NEGATIVE CONSTANT OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF CONSTANT EVALUATION\nEXCEEDING NEGATIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) NEGATIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE CONSTANT AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nRESULT OF ASSIGNING -3E99999 = -INF \nIF (RESULT = -3E99999) OR \n   (RESULT = NEGATIVE INFINITY AND EXCEPTION REPORTED)\n*** TEST PASSES *** OTHERWISE *** TEST FAILS *** \n\n                END TEST\n\nEND PROGRAM 30\n"`: 
Diff:
+ RESULT OF ASSIGNING 3E99999 =  inf 
- RESULT OF ASSIGNING 3E99999 =  INF 
+ RESULT OF ASSIGNING -3E99999 = -inf 
- RESULT OF ASSIGNING -3E99999 = -INF 
', tests/integration.rs:22:13

---- P039 stdout ----
thread 'P039' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 READ A1,A2,T,L,H\n330 IF A1=999 THEN 480\n335 LET M$=\"PASS\"\n340 LET C=A1+A2\n350 IF C<L THEN 380\n360 IF C>H THEN 380\n370 GOTO 400\n380 LET M$=\"FAIL\"\n390 LET F=F+1\n400 PRINT A1,A2,T,C,M$\n410 GOTO 320\n480 PRINT\n490 IF F=0 THEN 520\n500 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n510 GOTO 530\n520 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n530 PRINT\n540 PRINT \"               END TEST\"\n550 PRINT\n560 PRINT \"END PROGRAM 39\"\n570 DATA 0,0,0,0,0\n2000 DATA 0,765.432,765.432,765.431,765.433\n3000 DATA  0.876543000E+03, 0.123453000E+03, 0.999996000E+03\n3010 DATA  0.999993499E+03, 0.999998500E+03\n3020 DATA  0.811111000E-01, 0.111111000E-01, 0.922222000E-01\n3030 DATA  0.922219499E-01, 0.922224500E-01\n3040 DATA -0.579999000E+02,-0.111111000E+00,-0.581110110E+02\n3050 DATA -0.581111621E+02,-0.581108600E+02\n3060 DATA  0.111111100E+07, 0.111111100E+07, 0.222222200E+07\n3070 DATA  0.222219700E+07, 0.222224700E+07\n3080 DATA  0.654321000E+01, 0.123456000E+01, 0.777777000E+07\n3090 DATA  0.777774499E+01, 0.777779500E+01\n3100 DATA  0.654321000E-09, 0.123456000E-09, 0.777777000E-09\n3110 DATA  0.777774499E-09, 0.777779500E-09\n3120 DATA -0.654321000E-19,-0.123456000E-19,-0.777777000E-19\n3130 DATA -0.777779500E-19,-0.777774499E-19\n3140 DATA  0.654321000E-29, 0.123456000E-29, 0.777777000E-29\n3150 DATA  0.777774500E-29, 0.777779500E-29\n3160 DATA  0.654321000E-37, 0.123456000E-37, 0.777777000E-37\n3170 DATA  0.777774500E-37, 0.777779500E-37\n3180 DATA  0.123456000E+11, 0.654321000E+11, 0.777777000E+11\n3190 DATA  0.777774500E+11, 0.777779500E+11\n3200 DATA -0.123456000E+21,-0.654321000E+21,-0.777777000E+21\n3210 DATA -0.777779500E+21,-0.777774500E+21\n3220 DATA  0.123456000E+31, 0.654321000E+31, 0.777777000E+31\n3230 DATA  0.777774499E+31, 0.777779500E+31\n3240 DATA  0.123456000E+38, 0.654321000E+38, 0.777777000E+38\n3250 DATA  0.777774499E+38, 0.777779500E+38\n3260 DATA  0.499997000E-01, 0.499996000E-01, 0.999993000E-01\n3270 DATA  0.999990499E-01, 0.999995500E-01\n3280 DATA  0.999993000E-01, 0.400000000E-06, 0.999997000E-01\n3290 DATA  0.999995499E-01, 0.999998501E-01\n3300 DATA  0.999993000E-01, 0.400000000E-07, 0.999993400E-01\n3310 DATA  0.999991899E-01, 0.999994901E-01\n3320 DATA  0.999993000E-01, 0.400000000E-08, 0.999993040E-01\n3330 DATA  0.999991539E-01, 0.999994541E-01\n3340 DATA  0.999993000E-01, 0.400000000E-09, 0.999993004E-01\n3350 DATA  0.999991503E-01, 0.999994505E-01\n3360 DATA  0.999993000E-01, 0.400000000E-10, 0.999993000E-01\n3370 DATA  0.999991500E-01, 0.999994501E-01\n3380 DATA -0.102030400E+07, 0.400000000E+01,-0.102030000E+07\n3390 DATA -0.102031501E+07,-0.102028499E+07\n3400 DATA  0.102030400E+07,-0.304000000E+03, 0.102000000E+07\n3410 DATA  0.101998499E+07, 0.102001501E+07\n3420 DATA -0.102030400E+07, 0.203040000E+05,-0.100000000E+07\n3430 DATA -0.100001501E+07,-0.999989400E+06\n3440 DATA -0.102030400E+07, 0.102030400E+07, 0.000000000E+00\n3450 DATA -0.200000500E+02, 0.200000500E+02\n3460 DATA -0.102030400E+00, 0.400000000E-06,-0.102030000E+00\n3470 DATA -0.102031501E+00,-0.102028499E+00\n3480 DATA  0.102030400E+00,-0.304000000E-04, 0.102000000E+00\n3490 DATA  0.101998499E+00, 0.102001501E+00\n3500 DATA -0.102030400E+00, 0.203040000E-02,-0.100000000E+00\n3510 DATA -0.100001501E+00,-0.999989400E-01\n3520 DATA -0.102030400E+00, 0.102030400E+00, 0.000000000E+00\n3530 DATA -0.200000500E-05, 0.200000500E-05\n3540 DATA -0.102030400E+00, 0.102030300E+00,-0.100000000E-06\n3550 DATA -0.210000501E-05, 0.190000500E+00\n3560 DATA -0.102030400E+00, 0.102030500E+00, 0.100000000E-06\n3570 DATA -0.190000500E-05, 0.210000501E-05\n5000 DATA 999,0,0,0,0\n5010 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 READ A1,A2,T,L,H
+ 330 IF A1=999 THEN 480
+ 335 LET M$="PASS"
+ 340 LET C=A1+A2
+ 350 IF C<L THEN 380
+ 360 IF C>H THEN 380
+ 370 GOTO 400
+ 380 LET M$="FAIL"
+ 390 LET F=F+1
+ 400 PRINT A1,A2,T,C,M$
+ 410 GOTO 320
+ 480 PRINT
+ 490 IF F=0 THEN 520
+ 500 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 510 GOTO 530
+ 520 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 530 PRINT
+ 540 PRINT "               END TEST"
+ 550 PRINT
+ 560 PRINT "END PROGRAM 39"
+ 570 DATA 0,0,0,0,0
+ 2000 DATA 0,765.432,765.432,765.431,765.433
+ 3000 DATA  0.876543000E+03, 0.123453000E+03, 0.999996000E+03
+ 3010 DATA  0.999993499E+03, 0.999998500E+03
+ 3020 DATA  0.811111000E-01, 0.111111000E-01, 0.922222000E-01
+ 3030 DATA  0.922219499E-01, 0.922224500E-01
+ 3040 DATA -0.579999000E+02,-0.111111000E+00,-0.581110110E+02
+ 3050 DATA -0.581111621E+02,-0.581108600E+02
+ 3060 DATA  0.111111100E+07, 0.111111100E+07, 0.222222200E+07
+ 3070 DATA  0.222219700E+07, 0.222224700E+07
+ 3080 DATA  0.654321000E+01, 0.123456000E+01, 0.777777000E+07
+ 3090 DATA  0.777774499E+01, 0.777779500E+01
+ 3100 DATA  0.654321000E-09, 0.123456000E-09, 0.777777000E-09
+ 3110 DATA  0.777774499E-09, 0.777779500E-09
+ 3120 DATA -0.654321000E-19,-0.123456000E-19,-0.777777000E-19
+ 3130 DATA -0.777779500E-19,-0.777774499E-19
+ 3140 DATA  0.654321000E-29, 0.123456000E-29, 0.777777000E-29
+ 3150 DATA  0.777774500E-29, 0.777779500E-29
+ 3160 DATA  0.654321000E-37, 0.123456000E-37, 0.777777000E-37
+ 3170 DATA  0.777774500E-37, 0.777779500E-37
+ 3180 DATA  0.123456000E+11, 0.654321000E+11, 0.777777000E+11
+ 3190 DATA  0.777774500E+11, 0.777779500E+11
+ 3200 DATA -0.123456000E+21,-0.654321000E+21,-0.777777000E+21
+ 3210 DATA -0.777779500E+21,-0.777774500E+21
+ 3220 DATA  0.123456000E+31, 0.654321000E+31, 0.777777000E+31
+ 3230 DATA  0.777774499E+31, 0.777779500E+31
+ 3240 DATA  0.123456000E+38, 0.654321000E+38, 0.777777000E+38
+ 3250 DATA  0.777774499E+38, 0.777779500E+38
+ 3260 DATA  0.499997000E-01, 0.499996000E-01, 0.999993000E-01
+ 3270 DATA  0.999990499E-01, 0.999995500E-01
+ 3280 DATA  0.999993000E-01, 0.400000000E-06, 0.999997000E-01
+ 3290 DATA  0.999995499E-01, 0.999998501E-01
+ 3300 DATA  0.999993000E-01, 0.400000000E-07, 0.999993400E-01
+ 3310 DATA  0.999991899E-01, 0.999994901E-01
+ 3320 DATA  0.999993000E-01, 0.400000000E-08, 0.999993040E-01
+ 3330 DATA  0.999991539E-01, 0.999994541E-01
+ 3340 DATA  0.999993000E-01, 0.400000000E-09, 0.999993004E-01
+ 3350 DATA  0.999991503E-01, 0.999994505E-01
+ 3360 DATA  0.999993000E-01, 0.400000000E-10, 0.999993000E-01
+ 3370 DATA  0.999991500E-01, 0.999994501E-01
+ 3380 DATA -0.102030400E+07, 0.400000000E+01,-0.102030000E+07
+ 3390 DATA -0.102031501E+07,-0.102028499E+07
+ 3400 DATA  0.102030400E+07,-0.304000000E+03, 0.102000000E+07
+ 3410 DATA  0.101998499E+07, 0.102001501E+07
+ 3420 DATA -0.102030400E+07, 0.203040000E+05,-0.100000000E+07
+ 3430 DATA -0.100001501E+07,-0.999989400E+06
+ 3440 DATA -0.102030400E+07, 0.102030400E+07, 0.000000000E+00
+ 3450 DATA -0.200000500E+02, 0.200000500E+02
+ 3460 DATA -0.102030400E+00, 0.400000000E-06,-0.102030000E+00
+ 3470 DATA -0.102031501E+00,-0.102028499E+00
+ 3480 DATA  0.102030400E+00,-0.304000000E-04, 0.102000000E+00
+ 3490 DATA  0.101998499E+00, 0.102001501E+00
+ 3500 DATA -0.102030400E+00, 0.203040000E-02,-0.100000000E+00
+ 3510 DATA -0.100001501E+00,-0.999989400E-01
+ 3520 DATA -0.102030400E+00, 0.102030400E+00, 0.000000000E+00
+ 3530 DATA -0.200000500E-05, 0.200000500E-05
+ 3540 DATA -0.102030400E+00, 0.102030300E+00,-0.100000000E-06
+ 3550 DATA -0.210000501E-05, 0.190000500E+00
+ 3560 DATA -0.102030400E+00, 0.102030500E+00, 0.100000000E-06
+ 3570 DATA -0.190000500E-05, 0.210000501E-05
+ 5000 DATA 999,0,0,0,0
+ 5010 END
+ 
', tests/integration.rs:37:13

---- P045 stdout ----
thread 'P045' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 FOR I1=A1 TO B1 STEP C1\n260    LET T1=T1+1\n270    LET M$=\"  OK  \"\n280    IF I1=I2 THEN 310\n290    LET M$=\"FAILED\"\n300    LET S1=1\n310    PRINT I2,I1,M$\n320    IF I2 <> 9 THEN 360\n330    LET I1=17\n340    LET I2=17\n350    PRINT \"CONTROL VARIABLE ALTERED.\"\n360    REM RE-JOIN PATHS\n370    LET I2=I2+C1\n380 NEXT I1\n390 PRINT \"LOOP EXITED\"\n400 LET M$=\"  OK  \"\n410 IF I1=I2 THEN 440\n420 LET M$=\"FAILED\"\n430 LET S1=1\n440 PRINT I2,I1,M$\n450 LET M$=\"  OK  \"\n460 IF T1=T2 THEN 490\n470 LET M$=\"FAILED\"\n480 LET S1=1\n490 PRINT\n500 PRINT \"NO. TIMES THROUGH LOOP:\"\n510 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"   RESULT: \";M$\n520 PRINT\n530 IF S1=0 THEN 560\n540 PRINT \"*** TEST FAILED ***\"\n550 GOTO 570\n560 PRINT \"*** TEST PASSED ***\"\n570 PRINT\n580 PRINT \"               END TEST.\"\n590 PRINT\n600 PRINT \"END PROGRAM 45\"\n610 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 FOR I1=A1 TO B1 STEP C1
+ 260    LET T1=T1+1
+ 270    LET M$="  OK  "
+ 280    IF I1=I2 THEN 310
+ 290    LET M$="FAILED"
+ 300    LET S1=1
+ 310    PRINT I2,I1,M$
+ 320    IF I2 <> 9 THEN 360
+ 330    LET I1=17
+ 340    LET I2=17
+ 350    PRINT "CONTROL VARIABLE ALTERED."
+ 360    REM RE-JOIN PATHS
+ 370    LET I2=I2+C1
+ 380 NEXT I1
+ 390 PRINT "LOOP EXITED"
+ 400 LET M$="  OK  "
+ 410 IF I1=I2 THEN 440
+ 420 LET M$="FAILED"
+ 430 LET S1=1
+ 440 PRINT I2,I1,M$
+ 450 LET M$="  OK  "
+ 460 IF T1=T2 THEN 490
+ 470 LET M$="FAILED"
+ 480 LET S1=1
+ 490 PRINT
+ 500 PRINT "NO. TIMES THROUGH LOOP:"
+ 510 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"   RESULT: ";M$
+ 520 PRINT
+ 530 IF S1=0 THEN 560
+ 540 PRINT "*** TEST FAILED ***"
+ 550 GOTO 570
+ 560 PRINT "*** TEST PASSED ***"
+ 570 PRINT
+ 580 PRINT "               END TEST."
+ 590 PRINT
+ 600 PRINT "END PROGRAM 45"
+ 610 END
+ 
', tests/integration.rs:37:13

---- P047 stdout ----
thread 'P047' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n3110 FOR I1=A1 TO B1\n3120    LET T1=T1+1\n3130    GOSUB 6000\n3140    LET I2=I2+1\n3150 NEXT I1\n3160 PRINT \"LOOP EXITED\"\n3170 GOSUB 6000\n3180 LET M$=\"  OK  \"\n3190 IF T1=T2 THEN 3220\n3200 LET M$=\"FAILED\"\n3210 LET S1=1\n3220 PRINT\n3230 PRINT \"NO. TIMES THROUGH LOOP:\"\n3240 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"   RESULT: \";M$\n3250 PRINT\n3260 PRINT \"----------------------------\"\n3270 PRINT\n3280 RETURN\n6000 REM SUBROUTINE TO CHECK THAT I1=I2\n6010 LET M$=\"  OK  \"\n6020 IF I1=I2 THEN 6050\n6030 LET M$=\"FAILED\"\n6040 LET S1=1\n6050 PRINT I2,I1,M$\n6060 RETURN\n6070 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 3110 FOR I1=A1 TO B1
+ 3120    LET T1=T1+1
+ 3130    GOSUB 6000
+ 3140    LET I2=I2+1
+ 3150 NEXT I1
+ 3160 PRINT "LOOP EXITED"
+ 3170 GOSUB 6000
+ 3180 LET M$="  OK  "
+ 3190 IF T1=T2 THEN 3220
+ 3200 LET M$="FAILED"
+ 3210 LET S1=1
+ 3220 PRINT
+ 3230 PRINT "NO. TIMES THROUGH LOOP:"
+ 3240 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"   RESULT: ";M$
+ 3250 PRINT
+ 3260 PRINT "----------------------------"
+ 3270 PRINT
+ 3280 RETURN
+ 6000 REM SUBROUTINE TO CHECK THAT I1=I2
+ 6010 LET M$="  OK  "
+ 6020 IF I1=I2 THEN 6050
+ 6030 LET M$="FAILED"
+ 6040 LET S1=1
+ 6050 PRINT I2,I1,M$
+ 6060 RETURN
+ 6070 END
+ 
', tests/integration.rs:37:13

---- P046 stdout ----
thread 'P046' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 FOR I1=A1 TO B1 STEP C1\n280    LET T1=T1+1\n290    LET M$=\"  OK  \"\n300    IF I1=I2 THEN 330\n310    LET M$=\"FAILED\"\n320    LET S1=1\n330    PRINT I2,I1,M$\n340    LET T9=99\n350    GOSUB 650\n360    IF T9=9 THEN 390\n370    PRINT \"GOSUB FAILED TO TAKE EFFECT\"\n380    LET S1=1\n390    REM END GOSUB TEST\n400    LET I2=I2-1\n410    LET I2=I2+C2\n420 NEXT I1\n430 PRINT \"LOOP EXITED\"\n450 GOSUB 6000\n490 LET M$=\"  OK  \"\n500 IF T1=T2 THEN 530\n510 LET M$=\"FAILED\"\n520 LET S1=1\n530 PRINT\n540 PRINT \"NO. TIMES THROUGH LOOP:\"\n550 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"    RESULT: \";M$\n560 PRINT\n570 IF S1=0 THEN 600\n580 PRINT \"*** TEST FAILED ***\"\n590 GOTO 610\n600 PRINT \"*** TEST PASSED ***\"\n610 PRINT\n620 PRINT \"               END TEST.\"\n630 PRINT\n640 GOTO 690\n650 REM SUBROUTINE FROM FIRST SECTION\n660 LET T9=9\n670 LET I1=I1-1\n680 RETURN\n690 REM END OF CALLED-FROM-FOR-BLOCK SUBROUTINE\n700 PRINT \"SECTION 46.2: FOR-LOOPS WITH SAME CONTROL-VARIABLE\"\n710 PRINT \"        NESTED DYNAMICALLY WITH GOSUB.\"\n720 PRINT\n730 PRINT \"THIS SECTION TESTS THAT A GOSUB ROUTINE CAN BE EXECUTED\"\n740 PRINT \"FROM WITHIN A FOR-BLOCK AND THAT THE SUBROUTINE MAY ITSELF\"\n750 PRINT \"CONTAIN A FOR-BLOCK. IF THE TWO FOR-BLOCKS USE THE SAME\"\n760 PRINT \"CONTROL-VARIABLE, THE ORIGINAL VALUE IS LOST.\"\n770 PRINT\n780 PRINT \"               BEGIN TEST.\"\n790 LET A1=8\n800 LET B1=-5\n810 LET C1=-3\n820 LET T2=1\n830 LET T4=2\n840 PRINT\n850 PRINT \"CONTROL VARIABLE:\"\n860 PRINT \"SHOULD BE\",\"ACTUAL\",\"RESULT\"\n870 LET A2=A1\n880 LET B2=B1\n890 LET C2=C1\n900 LET I2=A2\n910 REM S1 IS ERROR SWITCH\n920 LET S1=0\n930 REM T1 IS LOOP COUNT\n940 LET T1=0\n950 PRINT \"ENTERING OUTER LOOP\"\n960 FOR I1=A1 TO B1 STEP C1\n970    LET T1=T1+1\n990    GOSUB 6000\n1030    GOSUB 1360\n1040    LET I2=I2+C2\n1050 NEXT I1\n1060 PRINT \"OUTER LOOP EXITED\"\n1080 GOSUB 6000\n1120 LET M$=\"  OK  \"\n1130 IF T3=T4 THEN 1160\n1140 LET M$=\"FAILED\"\n1150 LET S1=1\n1160 PRINT\n1170 PRINT \"NO. TIMES THROUGH INNER LOOP:\"\n1180 PRINT \"SHOULD BE: \";T4;\"     ACTUAL: \";T3;\"   RESULT: \";M$\n1190 PRINT\n1200 LET M$=\"  OK  \"\n1210 IF T1=T2 THEN 1240\n1220 LET M$=\"FAILED\"\n1230 LET S1=1\n1240 PRINT\n1250 PRINT \"NO. TIMES THROUGH OUTER LOOP:\"\n1260 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"   RESULT: \";M$\n1270 PRINT\n1280 IF S1=0 THEN 1310\n1290 PRINT \"*** TEST FAILED ***\"\n1300 GOTO 1320\n1310 PRINT \"*** TEST PASSED ***\"\n1320 PRINT\n1330 PRINT \"               END TEST.\"\n1340 PRINT\n1350 GOTO 1570\n1360 REM SUBROUTINE FROM SECOND SECTION\n1370 LET I2=-10\n1380 REM T3 IS LOOP COUNT\n1390 LET T3=0\n1400 PRINT \"ENTERING INNER LOOP\"\n1410 FOR I1=-10 TO -7 STEP 2\n1420    LET T3=T3+1\n1440    GOSUB 6000\n1480    LET I2=I2+2\n1490 NEXT I1\n1500 PRINT \"INNER LOOP EXITED\"\n1520 GOSUB 6000\n1560 RETURN\n1570 REM END OF CALLED-FROM-FOR-BLOCK SUBROUTINE\n1580 PRINT\n1590 PRINT \"SECTION 46.3 CONTROL-STATEMENT JUMPS OUT OF FOR-BLOCK.\"\n1600 PRINT\n1610 PRINT \"THIS SECTION TESTS THAT YOU CAN JUMP OUT OF A FOR-BLOCK\"\n1620 PRINT \"AND THAT THE CONTROL-VARIABLE RETAINS ITS VALUE WHEN\"\n1625 PRINT \"THIS HAPPENS.\"\n1630 PRINT\n1640 PRINT \"             BEGIN TEST.\"\n1650 PRINT\n1655 LET S1=0\n1660 LET A1=33\n1670 LET B1=66\n1680 LET C1=4\n1690 LET I2=A1\n1700 LET T2=8\n1703 PRINT \"LOOP IS: FOR I1=\";A1;\" TO \";B1;\" STEP \";C1\n1707 PRINT\n1710 PRINT \"CONTROL VARIABLE:\"\n1720 PRINT \"SHOULD BE\",\"ACTUAL\",\"RESULT\"\n1740 LET T1=0\n1750 FOR I1=A1 TO B1 STEP C1\n1760   LET T1=T1+1\n1770   GOSUB 6000\n1780   IF I2 < 60 THEN 1790\n1785   GO TO 1850\n1790   LET I2=I2+C1\n1800 NEXT I1\n1810 PRINT \"NORMAL EXIT FROM FOR-BLOCK: INCORRECT.\"\n1820 LET S1=1\n1830 GOTO 1855\n1850 PRINT \"JUMPED OUT OF LOOP\"\n1855 GOSUB 6000\n1860 LET M$=\"  OK  \"\n1870 IF T1=T2 THEN 1900\n1880 LET M$=\"FAILED\"\n1890 LET S1=1\n1900 PRINT\n1910 PRINT \"NO. TIMES THROUGH LOOP:\"\n1920 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"     RESULT: \";M$\n1930 PRINT\n1940 PRINT \"--------------------------------------\"\n1950 PRINT\n2000 LET A1=7\n2010 LET B1=7\n2020 LET C1=0\n2030 LET I2=A1\n2040 LET T2=5\n2050 PRINT \"LOOP IS: FOR I1=\";A1;\" TO \";B1;\" STEP \";C1\n2060 PRINT\n2070 PRINT \"CONTROL VARIABLE:\"\n2080 PRINT \"SHOULD BE\",\"ACTUAL\",\"RESULT\"\n2090 LET T1=0\n2100 FOR I1=A1 TO B1 STEP C1\n2110   LET T1=T1+1\n2120   GOSUB 6000\n2130   IF T1 > 4.5 THEN 2190\n2140   LET I2=I2+C1\n2150 NEXT I1\n2160 PRINT \"NORMAL EXIT FROM FOR-BLOCK: INCORRECT.\"\n2170 LET S1=1\n2180 GOTO 2200\n2190 PRINT \"JUMPED OUT OF LOOP\"\n2200 GOSUB 6000\n2210 LET M$=\"  OK  \"\n2220 IF T1=T2 THEN 2250\n2230 LET M$=\"FAILED\"\n2240 LET S1=1\n2250 PRINT\n2260 PRINT \"NO. TIMES THROUGH LOOP:\"\n2270 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"    RESULT: \";M$\n2280 PRINT\n3000 IF S1=0 THEN 3030\n3010 PRINT \"***  TEST FAILED  ***\"\n3020 GOTO 3040\n3030 PRINT \"***  TEST PASSED  ***\"\n3040 PRINT\n3050 PRINT \"               END TEST.\"\n3060 PRINT\n3070 PRINT \"END PROGRAM 46\"\n3080 STOP\n6000 REM SUBROUTINE TO CHECK THAT I1=I2\n6010 LET M$=\"  OK  \"\n6020 IF I1=I2 THEN 6050\n6030 LET M$=\"FAILED\"\n6040 LET S1=1\n6050 PRINT I2,I1,M$\n6060 RETURN\n6070 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 FOR I1=A1 TO B1 STEP C1
+ 280    LET T1=T1+1
+ 290    LET M$="  OK  "
+ 300    IF I1=I2 THEN 330
+ 310    LET M$="FAILED"
+ 320    LET S1=1
+ 330    PRINT I2,I1,M$
+ 340    LET T9=99
+ 350    GOSUB 650
+ 360    IF T9=9 THEN 390
+ 370    PRINT "GOSUB FAILED TO TAKE EFFECT"
+ 380    LET S1=1
+ 390    REM END GOSUB TEST
+ 400    LET I2=I2-1
+ 410    LET I2=I2+C2
+ 420 NEXT I1
+ 430 PRINT "LOOP EXITED"
+ 450 GOSUB 6000
+ 490 LET M$="  OK  "
+ 500 IF T1=T2 THEN 530
+ 510 LET M$="FAILED"
+ 520 LET S1=1
+ 530 PRINT
+ 540 PRINT "NO. TIMES THROUGH LOOP:"
+ 550 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"    RESULT: ";M$
+ 560 PRINT
+ 570 IF S1=0 THEN 600
+ 580 PRINT "*** TEST FAILED ***"
+ 590 GOTO 610
+ 600 PRINT "*** TEST PASSED ***"
+ 610 PRINT
+ 620 PRINT "               END TEST."
+ 630 PRINT
+ 640 GOTO 690
+ 650 REM SUBROUTINE FROM FIRST SECTION
+ 660 LET T9=9
+ 670 LET I1=I1-1
+ 680 RETURN
+ 690 REM END OF CALLED-FROM-FOR-BLOCK SUBROUTINE
+ 700 PRINT "SECTION 46.2: FOR-LOOPS WITH SAME CONTROL-VARIABLE"
+ 710 PRINT "        NESTED DYNAMICALLY WITH GOSUB."
+ 720 PRINT
+ 730 PRINT "THIS SECTION TESTS THAT A GOSUB ROUTINE CAN BE EXECUTED"
+ 740 PRINT "FROM WITHIN A FOR-BLOCK AND THAT THE SUBROUTINE MAY ITSELF"
+ 750 PRINT "CONTAIN A FOR-BLOCK. IF THE TWO FOR-BLOCKS USE THE SAME"
+ 760 PRINT "CONTROL-VARIABLE, THE ORIGINAL VALUE IS LOST."
+ 770 PRINT
+ 780 PRINT "               BEGIN TEST."
+ 790 LET A1=8
+ 800 LET B1=-5
+ 810 LET C1=-3
+ 820 LET T2=1
+ 830 LET T4=2
+ 840 PRINT
+ 850 PRINT "CONTROL VARIABLE:"
+ 860 PRINT "SHOULD BE","ACTUAL","RESULT"
+ 870 LET A2=A1
+ 880 LET B2=B1
+ 890 LET C2=C1
+ 900 LET I2=A2
+ 910 REM S1 IS ERROR SWITCH
+ 920 LET S1=0
+ 930 REM T1 IS LOOP COUNT
+ 940 LET T1=0
+ 950 PRINT "ENTERING OUTER LOOP"
+ 960 FOR I1=A1 TO B1 STEP C1
+ 970    LET T1=T1+1
+ 990    GOSUB 6000
+ 1030    GOSUB 1360
+ 1040    LET I2=I2+C2
+ 1050 NEXT I1
+ 1060 PRINT "OUTER LOOP EXITED"
+ 1080 GOSUB 6000
+ 1120 LET M$="  OK  "
+ 1130 IF T3=T4 THEN 1160
+ 1140 LET M$="FAILED"
+ 1150 LET S1=1
+ 1160 PRINT
+ 1170 PRINT "NO. TIMES THROUGH INNER LOOP:"
+ 1180 PRINT "SHOULD BE: ";T4;"     ACTUAL: ";T3;"   RESULT: ";M$
+ 1190 PRINT
+ 1200 LET M$="  OK  "
+ 1210 IF T1=T2 THEN 1240
+ 1220 LET M$="FAILED"
+ 1230 LET S1=1
+ 1240 PRINT
+ 1250 PRINT "NO. TIMES THROUGH OUTER LOOP:"
+ 1260 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"   RESULT: ";M$
+ 1270 PRINT
+ 1280 IF S1=0 THEN 1310
+ 1290 PRINT "*** TEST FAILED ***"
+ 1300 GOTO 1320
+ 1310 PRINT "*** TEST PASSED ***"
+ 1320 PRINT
+ 1330 PRINT "               END TEST."
+ 1340 PRINT
+ 1350 GOTO 1570
+ 1360 REM SUBROUTINE FROM SECOND SECTION
+ 1370 LET I2=-10
+ 1380 REM T3 IS LOOP COUNT
+ 1390 LET T3=0
+ 1400 PRINT "ENTERING INNER LOOP"
+ 1410 FOR I1=-10 TO -7 STEP 2
+ 1420    LET T3=T3+1
+ 1440    GOSUB 6000
+ 1480    LET I2=I2+2
+ 1490 NEXT I1
+ 1500 PRINT "INNER LOOP EXITED"
+ 1520 GOSUB 6000
+ 1560 RETURN
+ 1570 REM END OF CALLED-FROM-FOR-BLOCK SUBROUTINE
+ 1580 PRINT
+ 1590 PRINT "SECTION 46.3 CONTROL-STATEMENT JUMPS OUT OF FOR-BLOCK."
+ 1600 PRINT
+ 1610 PRINT "THIS SECTION TESTS THAT YOU CAN JUMP OUT OF A FOR-BLOCK"
+ 1620 PRINT "AND THAT THE CONTROL-VARIABLE RETAINS ITS VALUE WHEN"
+ 1625 PRINT "THIS HAPPENS."
+ 1630 PRINT
+ 1640 PRINT "             BEGIN TEST."
+ 1650 PRINT
+ 1655 LET S1=0
+ 1660 LET A1=33
+ 1670 LET B1=66
+ 1680 LET C1=4
+ 1690 LET I2=A1
+ 1700 LET T2=8
+ 1703 PRINT "LOOP IS: FOR I1=";A1;" TO ";B1;" STEP ";C1
+ 1707 PRINT
+ 1710 PRINT "CONTROL VARIABLE:"
+ 1720 PRINT "SHOULD BE","ACTUAL","RESULT"
+ 1740 LET T1=0
+ 1750 FOR I1=A1 TO B1 STEP C1
+ 1760   LET T1=T1+1
+ 1770   GOSUB 6000
+ 1780   IF I2 < 60 THEN 1790
+ 1785   GO TO 1850
+ 1790   LET I2=I2+C1
+ 1800 NEXT I1
+ 1810 PRINT "NORMAL EXIT FROM FOR-BLOCK: INCORRECT."
+ 1820 LET S1=1
+ 1830 GOTO 1855
+ 1850 PRINT "JUMPED OUT OF LOOP"
+ 1855 GOSUB 6000
+ 1860 LET M$="  OK  "
+ 1870 IF T1=T2 THEN 1900
+ 1880 LET M$="FAILED"
+ 1890 LET S1=1
+ 1900 PRINT
+ 1910 PRINT "NO. TIMES THROUGH LOOP:"
+ 1920 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"     RESULT: ";M$
+ 1930 PRINT
+ 1940 PRINT "--------------------------------------"
+ 1950 PRINT
+ 2000 LET A1=7
+ 2010 LET B1=7
+ 2020 LET C1=0
+ 2030 LET I2=A1
+ 2040 LET T2=5
+ 2050 PRINT "LOOP IS: FOR I1=";A1;" TO ";B1;" STEP ";C1
+ 2060 PRINT
+ 2070 PRINT "CONTROL VARIABLE:"
+ 2080 PRINT "SHOULD BE","ACTUAL","RESULT"
+ 2090 LET T1=0
+ 2100 FOR I1=A1 TO B1 STEP C1
+ 2110   LET T1=T1+1
+ 2120   GOSUB 6000
+ 2130   IF T1 > 4.5 THEN 2190
+ 2140   LET I2=I2+C1
+ 2150 NEXT I1
+ 2160 PRINT "NORMAL EXIT FROM FOR-BLOCK: INCORRECT."
+ 2170 LET S1=1
+ 2180 GOTO 2200
+ 2190 PRINT "JUMPED OUT OF LOOP"
+ 2200 GOSUB 6000
+ 2210 LET M$="  OK  "
+ 2220 IF T1=T2 THEN 2250
+ 2230 LET M$="FAILED"
+ 2240 LET S1=1
+ 2250 PRINT
+ 2260 PRINT "NO. TIMES THROUGH LOOP:"
+ 2270 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"    RESULT: ";M$
+ 2280 PRINT
+ 3000 IF S1=0 THEN 3030
+ 3010 PRINT "***  TEST FAILED  ***"
+ 3020 GOTO 3040
+ 3030 PRINT "***  TEST PASSED  ***"
+ 3040 PRINT
+ 3050 PRINT "               END TEST."
+ 3060 PRINT
+ 3070 PRINT "END PROGRAM 46"
+ 3080 STOP
+ 6000 REM SUBROUTINE TO CHECK THAT I1=I2
+ 6010 LET M$="  OK  "
+ 6020 IF I1=I2 THEN 6050
+ 6030 LET M$="FAILED"
+ 6040 LET S1=1
+ 6050 PRINT I2,I1,M$
+ 6060 RETURN
+ 6070 END
+ 
', tests/integration.rs:37:13

---- P041 stdout ----
thread 'P041' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 READ A1,A2,T,L,H\n330 IF A1=999 THEN 480\n335 LET M$=\"PASS\"\n340 LET C=A1*A2\n350 IF C<L THEN 380\n360 IF C>H THEN 380\n370 GOTO 400\n380 LET M$=\"FAIL\"\n390 LET F=F+1\n400 PRINT A1,A2,T,C,M$\n410 GOTO 320\n480 PRINT\n490 IF F=0 THEN 520\n500 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n510 GOTO 530\n520 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n530 PRINT\n540 PRINT \"               END TEST\"\n550 PRINT\n560 PRINT \"END PROGRAM 41\"\n2000 DATA 0,0,0,0,0\n2010 DATA -3.12345,0,0,0,0\n2020 DATA -0,6.68589E37,0,0,0\n3000 DATA  0.390625000E+01, 0.524288000E+01, 0.204800000E+02\n3010 DATA  0.204798585E+02, 0.204801415E+02\n3020 DATA  0.646469000E-10, 0.336466000E+11, 0.217514839E+01\n3030 DATA  0.217513355E+01, 0.217516322E+01\n3040 DATA  0.646469000E-37, 0.336466000E+38, 0.217514839E+01\n3050 DATA  0.217513355E+01, 0.217516322E+01\n3060 DATA  0.465728000E+00, 0.447578000E+38, 0.208449607E+38\n3070 DATA  0.208448193E+38, 0.208451021E+38\n3080 DATA  0.348799000E+01, 0.658589000E+37, 0.229715185E+38\n3090 DATA  0.229713677E+38, 0.229716692E+38\n3100 DATA  0.448588000E+11, 0.888898000E+27, 0.398748976E+38\n3110 DATA  0.398747138E+38, 0.398750814E+38\n3120 DATA  0.995855000E+19, 0.944647000E+19, 0.940731438E+38\n3130 DATA  0.940728997E+38, 0.940733879E+38\n3140 DATA  0.995855000E-19, 0.944647000E-18, 0.940731438E-37\n3150 DATA  0.940728997E-37, 0.940733879E-37\n3160 DATA  0.995855000E-29, 0.944647000E-08, 0.940731438E-37\n3170 DATA  0.940728997E-37, 0.940733879E-37\n3180 DATA  0.995855000E-37, 0.944647000E-00, 0.940731438E-37\n3190 DATA  0.940728997E-37, 0.940733879E-37\n3200 DATA  0.999000000E+00, 0.999000000E+00, 0.998001000E+00\n3210 DATA  0.997998502E+00, 0.998003499E+00\n3220 DATA  0.774758000E+06, 0.758675000E+06, 0.587789526E+12\n3230 DATA  0.587787492E+12, 0.587791560E+12\n3240 DATA  0.365341000E+05,-0.338383000E-02,-0.123625184E+03\n3250 DATA -0.123626388E+03,-0.123623979E+03\n3260 DATA -0.989878000E-01, 0.985342000E-01,-0.975368368E-02\n3270 DATA -0.975370844E-02,-0.975365893E-02\n3280 DATA -0.228373000E+00,-0.955664000E+03, 0.218247855E+03\n3290 DATA  0.218246170E+03, 0.218249539E+03\n3300 DATA  0.390625000E+00,-0.248864000E+00,-0.972125000E-01\n3310 DATA -0.972131895E-01,-0.972118105E-01\n3320 DATA -0.390625000E-29, 0.248864000E+33,-0.972125000E+03\n3330 DATA -0.972131895E+03,-0.972118105E+03\n5000 DATA 999,0,0,0,0\n5010 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 READ A1,A2,T,L,H
+ 330 IF A1=999 THEN 480
+ 335 LET M$="PASS"
+ 340 LET C=A1*A2
+ 350 IF C<L THEN 380
+ 360 IF C>H THEN 380
+ 370 GOTO 400
+ 380 LET M$="FAIL"
+ 390 LET F=F+1
+ 400 PRINT A1,A2,T,C,M$
+ 410 GOTO 320
+ 480 PRINT
+ 490 IF F=0 THEN 520
+ 500 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 510 GOTO 530
+ 520 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 530 PRINT
+ 540 PRINT "               END TEST"
+ 550 PRINT
+ 560 PRINT "END PROGRAM 41"
+ 2000 DATA 0,0,0,0,0
+ 2010 DATA -3.12345,0,0,0,0
+ 2020 DATA -0,6.68589E37,0,0,0
+ 3000 DATA  0.390625000E+01, 0.524288000E+01, 0.204800000E+02
+ 3010 DATA  0.204798585E+02, 0.204801415E+02
+ 3020 DATA  0.646469000E-10, 0.336466000E+11, 0.217514839E+01
+ 3030 DATA  0.217513355E+01, 0.217516322E+01
+ 3040 DATA  0.646469000E-37, 0.336466000E+38, 0.217514839E+01
+ 3050 DATA  0.217513355E+01, 0.217516322E+01
+ 3060 DATA  0.465728000E+00, 0.447578000E+38, 0.208449607E+38
+ 3070 DATA  0.208448193E+38, 0.208451021E+38
+ 3080 DATA  0.348799000E+01, 0.658589000E+37, 0.229715185E+38
+ 3090 DATA  0.229713677E+38, 0.229716692E+38
+ 3100 DATA  0.448588000E+11, 0.888898000E+27, 0.398748976E+38
+ 3110 DATA  0.398747138E+38, 0.398750814E+38
+ 3120 DATA  0.995855000E+19, 0.944647000E+19, 0.940731438E+38
+ 3130 DATA  0.940728997E+38, 0.940733879E+38
+ 3140 DATA  0.995855000E-19, 0.944647000E-18, 0.940731438E-37
+ 3150 DATA  0.940728997E-37, 0.940733879E-37
+ 3160 DATA  0.995855000E-29, 0.944647000E-08, 0.940731438E-37
+ 3170 DATA  0.940728997E-37, 0.940733879E-37
+ 3180 DATA  0.995855000E-37, 0.944647000E-00, 0.940731438E-37
+ 3190 DATA  0.940728997E-37, 0.940733879E-37
+ 3200 DATA  0.999000000E+00, 0.999000000E+00, 0.998001000E+00
+ 3210 DATA  0.997998502E+00, 0.998003499E+00
+ 3220 DATA  0.774758000E+06, 0.758675000E+06, 0.587789526E+12
+ 3230 DATA  0.587787492E+12, 0.587791560E+12
+ 3240 DATA  0.365341000E+05,-0.338383000E-02,-0.123625184E+03
+ 3250 DATA -0.123626388E+03,-0.123623979E+03
+ 3260 DATA -0.989878000E-01, 0.985342000E-01,-0.975368368E-02
+ 3270 DATA -0.975370844E-02,-0.975365893E-02
+ 3280 DATA -0.228373000E+00,-0.955664000E+03, 0.218247855E+03
+ 3290 DATA  0.218246170E+03, 0.218249539E+03
+ 3300 DATA  0.390625000E+00,-0.248864000E+00,-0.972125000E-01
+ 3310 DATA -0.972131895E-01,-0.972118105E-01
+ 3320 DATA -0.390625000E-29, 0.248864000E+33,-0.972125000E+03
+ 3330 DATA -0.972131895E+03,-0.972118105E+03
+ 5000 DATA 999,0,0,0,0
+ 5010 END
+ 
', tests/integration.rs:37:13

---- P044 stdout ----
thread 'P044' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n3140 FOR I1=A1 TO B1 STEP C1\n3150 LET T1=T1+1\n3160 LET M$=\"  OK  \"\n3170 IF I1=0 THEN 3220\n3180 LET R=(I2-I1)/I1\n3190 IF R<-1E-6 THEN 3230\n3200 IF R>1E-6 THEN 3230\n3210 GOTO 3250\n3220 IF I2=0 THEN 3250\n3230 LET M$=\"FAILED\"\n3240 LET S1=1\n3250 PRINT I2,I1,M$\n3260 LET I2=I2+C2\n3270 NEXT I1\n3280 PRINT \"LOOP EXITED\"\n3290 LET M$=\"  OK  \"\n3300 IF I1=0 THEN 3350\n3310 LET R=(I2-I1)/I1\n3320 IF R<-1E-6 THEN 3360\n3330 IF R>1E-6 THEN 3360\n3340 GOTO 3380\n3350 IF I2=0 THEN 3380\n3360 LET M$=\"FAILED\"\n3370 LET S1=1\n3380 PRINT I2,I1,M$\n3390 LET M$=\"  OK  \"\n3400 IF T1=T2 THEN 3425\n3410 LET M$=\"FAILED\"\n3420 LET S1=1\n3425 PRINT\n3430 PRINT \"NO. TIMES THROUGH LOOP:\"\n3440 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"   RESULT: \";M$\n3450 PRINT\n3455 PRINT \"-----------------------------------------------\"\n3460 LET F=F+S1\n3470 RETURN\n3480 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 3140 FOR I1=A1 TO B1 STEP C1
+ 3150 LET T1=T1+1
+ 3160 LET M$="  OK  "
+ 3170 IF I1=0 THEN 3220
+ 3180 LET R=(I2-I1)/I1
+ 3190 IF R<-1E-6 THEN 3230
+ 3200 IF R>1E-6 THEN 3230
+ 3210 GOTO 3250
+ 3220 IF I2=0 THEN 3250
+ 3230 LET M$="FAILED"
+ 3240 LET S1=1
+ 3250 PRINT I2,I1,M$
+ 3260 LET I2=I2+C2
+ 3270 NEXT I1
+ 3280 PRINT "LOOP EXITED"
+ 3290 LET M$="  OK  "
+ 3300 IF I1=0 THEN 3350
+ 3310 LET R=(I2-I1)/I1
+ 3320 IF R<-1E-6 THEN 3360
+ 3330 IF R>1E-6 THEN 3360
+ 3340 GOTO 3380
+ 3350 IF I2=0 THEN 3380
+ 3360 LET M$="FAILED"
+ 3370 LET S1=1
+ 3380 PRINT I2,I1,M$
+ 3390 LET M$="  OK  "
+ 3400 IF T1=T2 THEN 3425
+ 3410 LET M$="FAILED"
+ 3420 LET S1=1
+ 3425 PRINT
+ 3430 PRINT "NO. TIMES THROUGH LOOP:"
+ 3440 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"   RESULT: ";M$
+ 3450 PRINT
+ 3455 PRINT "-----------------------------------------------"
+ 3460 LET F=F+S1
+ 3470 RETURN
+ 3480 END
+ 
', tests/integration.rs:37:13

---- P052 stdout ----
thread 'P052' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 FOR I=1 TO 5\n230 PRINT \"I = \";I;\"       J = \";J\n240 NEXT J\n270 PRINT\n280 PRINT \"                                END TEST.\"\n290 PRINT\n300 PRINT \"END PROGRAM 52\"\n310 END\n"`,
 right: `"240: error: NEXT without FOR \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 FOR I=1 TO 5
+ 230 PRINT "I = ";I;"       J = ";J
+ 240 NEXT J
+ 270 PRINT
+ 280 PRINT "                                END TEST."
+ 290 PRINT
+ 300 PRINT "END PROGRAM 52"
+ 310 END
- 240: error: NEXT without FOR 
', tests/integration.rs:37:13

---- P049 stdout ----
thread 'P049' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270    FOR I1=12 TO 0 STEP -1\n280    LET T1=T1+1\n290    LET J2=-1\n300       PRINT E$;\" 2\"\n310       FOR J1=-1 TO 0\n320       LET T1=T1+1\n330       GOSUB 1070\n340       LET J2=J2+1\n350       NEXT J1\n360       PRINT F$;\" 2\"\n370    GOSUB 1070\n380    LET K2=1\n390       PRINT E$;\" 3\"\n400       FOR K1=1 TO 3\n410       LET T1=T1+1\n420       LET J2=I2\n430          PRINT E$;\" 4\"\n440          FOR J1=I1 TO 1 STEP -2\n450          LET T1=T1+1\n460          GOSUB 1070\n470          LET J2=J2-2\n480          NEXT J1\n490          PRINT F$;\" 4\"\n500       GOSUB 1070\n510       GOSUB 1140\n520       LET K2=K2+1\n530       NEXT K1\n540       PRINT F$;\" 3\"\n550    GOSUB 1140\n560    GOSUB 1000\n570    LET I2=I2-1\n580    NEXT I1\n590    PRINT F$;\" 1\"\n600 GOSUB 1000\n610 LET M$=\"  OK  \"\n620 IF T1=T2 THEN 650\n630 LET M$=\"FAILED\"\n640 LET S1=1\n650 PRINT\n660 PRINT \"NO. TIMES THROUGH LOOPS:\"\n670 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"   RESULT: \";M$\n680 PRINT\n690 IF S1=0 THEN 720\n700 PRINT \"*** TEST FAILED ***\"\n710 GOTO 730\n720 PRINT \"*** TEST PASSED ***\"\n730 PRINT\n740 PRINT \"               END TEST.\"\n750 PRINT\n760 PRINT \"END PROGRAM 49\"\n770 STOP\n1000 REM SUBROUTINE TO CHECK THAT I1=I2\n1010 LET M$=\"  OK  \"\n1020 IF I1=I2 THEN 1050\n1030 LET M$=\"FAILED\"\n1040 LET S1=1\n1050 PRINT 1;TAB(10);I2;TAB(20);I1;TAB(30);M$\n1060 RETURN\n1070 REM SUBROUTINE TO CHECK THAT J1=J2\n1080 LET M$=\"  OK  \"\n1090 IF J1=J2 THEN 1120\n1100 LET M$=\"FAILED\"\n1110 LET S1=1\n1120 PRINT TAB(2);2;TAB(12);J2;TAB(22);J1;TAB(32);M$\n1130 RETURN\n1140 REM SUBROUTINE TO CHECK THAT K1=K2\n1150 LET M$=\"  OK  \"\n1160 IF K1=K2 THEN 1190\n1170 LET M$=\"FAILED\"\n1180 LET S1=1\n1190 PRINT TAB(4);3;TAB(14);K2;TAB(24);K1;TAB(34);M$\n1200 RETURN\n1210 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270    FOR I1=12 TO 0 STEP -1
+ 280    LET T1=T1+1
+ 290    LET J2=-1
+ 300       PRINT E$;" 2"
+ 310       FOR J1=-1 TO 0
+ 320       LET T1=T1+1
+ 330       GOSUB 1070
+ 340       LET J2=J2+1
+ 350       NEXT J1
+ 360       PRINT F$;" 2"
+ 370    GOSUB 1070
+ 380    LET K2=1
+ 390       PRINT E$;" 3"
+ 400       FOR K1=1 TO 3
+ 410       LET T1=T1+1
+ 420       LET J2=I2
+ 430          PRINT E$;" 4"
+ 440          FOR J1=I1 TO 1 STEP -2
+ 450          LET T1=T1+1
+ 460          GOSUB 1070
+ 470          LET J2=J2-2
+ 480          NEXT J1
+ 490          PRINT F$;" 4"
+ 500       GOSUB 1070
+ 510       GOSUB 1140
+ 520       LET K2=K2+1
+ 530       NEXT K1
+ 540       PRINT F$;" 3"
+ 550    GOSUB 1140
+ 560    GOSUB 1000
+ 570    LET I2=I2-1
+ 580    NEXT I1
+ 590    PRINT F$;" 1"
+ 600 GOSUB 1000
+ 610 LET M$="  OK  "
+ 620 IF T1=T2 THEN 650
+ 630 LET M$="FAILED"
+ 640 LET S1=1
+ 650 PRINT
+ 660 PRINT "NO. TIMES THROUGH LOOPS:"
+ 670 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"   RESULT: ";M$
+ 680 PRINT
+ 690 IF S1=0 THEN 720
+ 700 PRINT "*** TEST FAILED ***"
+ 710 GOTO 730
+ 720 PRINT "*** TEST PASSED ***"
+ 730 PRINT
+ 740 PRINT "               END TEST."
+ 750 PRINT
+ 760 PRINT "END PROGRAM 49"
+ 770 STOP
+ 1000 REM SUBROUTINE TO CHECK THAT I1=I2
+ 1010 LET M$="  OK  "
+ 1020 IF I1=I2 THEN 1050
+ 1030 LET M$="FAILED"
+ 1040 LET S1=1
+ 1050 PRINT 1;TAB(10);I2;TAB(20);I1;TAB(30);M$
+ 1060 RETURN
+ 1070 REM SUBROUTINE TO CHECK THAT J1=J2
+ 1080 LET M$="  OK  "
+ 1090 IF J1=J2 THEN 1120
+ 1100 LET M$="FAILED"
+ 1110 LET S1=1
+ 1120 PRINT TAB(2);2;TAB(12);J2;TAB(22);J1;TAB(32);M$
+ 1130 RETURN
+ 1140 REM SUBROUTINE TO CHECK THAT K1=K2
+ 1150 LET M$="  OK  "
+ 1160 IF K1=K2 THEN 1190
+ 1170 LET M$="FAILED"
+ 1180 LET S1=1
+ 1190 PRINT TAB(4);3;TAB(14);K2;TAB(24);K1;TAB(34);M$
+ 1200 RETURN
+ 1210 END
+ 
', tests/integration.rs:37:13

---- P051 stdout ----
thread 'P051' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 FOR I=1 TO 5\n230 PRINT \"CONTROL-VARIABLE = \";I\n240 NEXT I\n270 PRINT\n280 PRINT \"                                END TEST.\"\n290 PRINT\n300 PRINT \"END PROGRAM 51\"\n303 STOP\n306 NEXT I\n310 END\n"`,
 right: `"306: error: NEXT without FOR \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 FOR I=1 TO 5
+ 230 PRINT "CONTROL-VARIABLE = ";I
+ 240 NEXT I
+ 270 PRINT
+ 280 PRINT "                                END TEST."
+ 290 PRINT
+ 300 PRINT "END PROGRAM 51"
+ 303 STOP
+ 306 NEXT I
+ 310 END
- 306: error: NEXT without FOR 
', tests/integration.rs:37:13

---- P048 stdout ----
thread 'P048' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 FOR I1=I1 TO I1 STEP -3\n220 LET T1=T1+1\n230 GOSUB 3120\n240 IF T1>20 THEN 290\n250 LET I2=I2-3\n260 NEXT I1\n270 PRINT \"LOOP EXITED\"\n280 GOTO 310\n290 PRINT \"JUMPED OUT OF LOOP: INCORRECT\"\n300 LET S1=1\n310 GOSUB 3120\n320 GOSUB 3000\n400 LET I1=-3\n410 LET I2=-3\n420 LET T2=6\n430 PRINT\n440 PRINT \"I1 SET TO -3\"\n450 PRINT \"LOOP IS: FOR I1=I1 TO -20 STEP I1\"\n460 PRINT\n470 PRINT \"CONTROL VARIABLE:\"\n480 PRINT \"SHOULD BE\",\"ACTUAL\",\"RESULT\"\n490 LET T1=0\n500 FOR I1=I1 TO -20 STEP I1\n510 LET T1=T1+1\n520 GOSUB 3120\n530 IF T1>20 THEN 580\n540 LET I2=I2-3\n550 NEXT I1\n560 PRINT \"LOOP EXITED\"\n570 GOTO 600\n580 PRINT \"JUMPED OUT OF LOOP: INCORRECT\"\n590 LET S1=1\n600 GOSUB 3120\n610 GOSUB 3000\n700 LET I1=-2\n710 LET I2=9\n720 LET T2=6\n730 PRINT\n740 PRINT \"I1 SET TO -2\"\n750 PRINT \"LOOP IS: FOR I1=9 TO I1 STEP I1\"\n760 PRINT\n770 PRINT \"CONTROL VARIABLE:\"\n780 PRINT \"SHOULD BE\",\"ACTUAL\",\"RESULT\"\n790 LET T1=0\n800 FOR I1=9 TO I1 STEP I1\n810 LET T1=T1+1\n820 GOSUB 3120\n830 IF T1>20 THEN 880\n840 LET I2=I2-2\n850 NEXT I1\n860 PRINT \"LOOP EXITED\"\n870 GOTO 900\n880 PRINT \"JUMPED OUT OF LOOP: INCORRECT\"\n890 LET S1=1\n900 GOSUB 3120\n910 GOSUB 3000\n2000 IF S1=0 THEN 2030\n2010 PRINT \"*** TEST FAILED  ***\"\n2020 GOTO 2040\n2030 PRINT \"*** TEST PASSED ***\"\n2040 PRINT\n2050 PRINT \"               END TEST.\"\n2060 PRINT\n2070 PRINT \"END PROGRAM 48\"\n2080 STOP\n3000 REM SUBROUTINE TO CHECK NUMBER OF TIMES THROUGH LOOP\n3010 LET M$=\"  OK  \"\n3020 IF T1=T2 THEN 3050\n3030 LET M$=\"FAILED\"\n3040 LET S1=1\n3050 PRINT\n3060 PRINT \"NO. TIMES THROUGH LOOP:\"\n3070 PRINT \"SHOULD BE: \";T2;\"     ACTUAL: \";T1;\"   RESULT: \";M$\n3080 PRINT\n3090 PRINT \"----------------------------\"\n3100 PRINT\n3110 RETURN\n3120 REM SUBROUTINE TO CHECK THAT I1=I2\n3130 LET M$=\"  OK  \"\n3140 IF I1=I2 THEN 3170\n3150 LET M$=\"FAILED\"\n3160 LET S1=1\n3170 PRINT I2,I1,M$\n3180 RETURN\n3190 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 FOR I1=I1 TO I1 STEP -3
+ 220 LET T1=T1+1
+ 230 GOSUB 3120
+ 240 IF T1>20 THEN 290
+ 250 LET I2=I2-3
+ 260 NEXT I1
+ 270 PRINT "LOOP EXITED"
+ 280 GOTO 310
+ 290 PRINT "JUMPED OUT OF LOOP: INCORRECT"
+ 300 LET S1=1
+ 310 GOSUB 3120
+ 320 GOSUB 3000
+ 400 LET I1=-3
+ 410 LET I2=-3
+ 420 LET T2=6
+ 430 PRINT
+ 440 PRINT "I1 SET TO -3"
+ 450 PRINT "LOOP IS: FOR I1=I1 TO -20 STEP I1"
+ 460 PRINT
+ 470 PRINT "CONTROL VARIABLE:"
+ 480 PRINT "SHOULD BE","ACTUAL","RESULT"
+ 490 LET T1=0
+ 500 FOR I1=I1 TO -20 STEP I1
+ 510 LET T1=T1+1
+ 520 GOSUB 3120
+ 530 IF T1>20 THEN 580
+ 540 LET I2=I2-3
+ 550 NEXT I1
+ 560 PRINT "LOOP EXITED"
+ 570 GOTO 600
+ 580 PRINT "JUMPED OUT OF LOOP: INCORRECT"
+ 590 LET S1=1
+ 600 GOSUB 3120
+ 610 GOSUB 3000
+ 700 LET I1=-2
+ 710 LET I2=9
+ 720 LET T2=6
+ 730 PRINT
+ 740 PRINT "I1 SET TO -2"
+ 750 PRINT "LOOP IS: FOR I1=9 TO I1 STEP I1"
+ 760 PRINT
+ 770 PRINT "CONTROL VARIABLE:"
+ 780 PRINT "SHOULD BE","ACTUAL","RESULT"
+ 790 LET T1=0
+ 800 FOR I1=9 TO I1 STEP I1
+ 810 LET T1=T1+1
+ 820 GOSUB 3120
+ 830 IF T1>20 THEN 880
+ 840 LET I2=I2-2
+ 850 NEXT I1
+ 860 PRINT "LOOP EXITED"
+ 870 GOTO 900
+ 880 PRINT "JUMPED OUT OF LOOP: INCORRECT"
+ 890 LET S1=1
+ 900 GOSUB 3120
+ 910 GOSUB 3000
+ 2000 IF S1=0 THEN 2030
+ 2010 PRINT "*** TEST FAILED  ***"
+ 2020 GOTO 2040
+ 2030 PRINT "*** TEST PASSED ***"
+ 2040 PRINT
+ 2050 PRINT "               END TEST."
+ 2060 PRINT
+ 2070 PRINT "END PROGRAM 48"
+ 2080 STOP
+ 3000 REM SUBROUTINE TO CHECK NUMBER OF TIMES THROUGH LOOP
+ 3010 LET M$="  OK  "
+ 3020 IF T1=T2 THEN 3050
+ 3030 LET M$="FAILED"
+ 3040 LET S1=1
+ 3050 PRINT
+ 3060 PRINT "NO. TIMES THROUGH LOOP:"
+ 3070 PRINT "SHOULD BE: ";T2;"     ACTUAL: ";T1;"   RESULT: ";M$
+ 3080 PRINT
+ 3090 PRINT "----------------------------"
+ 3100 PRINT
+ 3110 RETURN
+ 3120 REM SUBROUTINE TO CHECK THAT I1=I2
+ 3130 LET M$="  OK  "
+ 3140 IF I1=I2 THEN 3170
+ 3150 LET M$="FAILED"
+ 3160 LET S1=1
+ 3170 PRINT I2,I1,M$
+ 3180 RETURN
+ 3190 END
+ 
', tests/integration.rs:37:13

---- P056 stdout ----
thread 'P056' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n130 FOR I=0 TO 10\n140 LET A(I)=I\n150 NEXT I\n160 LET A1=0\n170 LET C=0\n180 FOR I=10 TO 0 STEP -1\n190 LET Y=A(I)\n200 LET A1=A1+Y\n210 IF Y<>I THEN 230\n220 LET C=C+1\n230 NEXT I\n240 IF C<>11 THEN 260\n250 IF A1=55 THEN 280\n260 PRINT \"*** TEST FAILED ***\"\n270 GOTO 290\n280 PRINT \"*** TEST PASSED ***\"\n290 PRINT\n300 PRINT \"                                END TEST.\"\n310 PRINT\n320 PRINT \"SECTION 56.2: TWO-DIMENSIONAL ARRAYS WITHOUT THE\"\n325 PRINT \"        DIM-STATEMENT.\"\n330 PRINT\n340 PRINT \"                               BEGIN TEST.\"\n350 PRINT\n360 FOR I=0 TO 10\n370 FOR J=0 TO 10\n380 LET Z=I+J\n390 LET B(I,J)=Z\n400 NEXT J\n410 NEXT I\n420 LET B1=0\n430 LET C=0\n440 FOR I=10 TO 0 STEP -1\n450 FOR J=10 TO 0 STEP -1\n460 LET W=B(I,J)\n470 LET B1=B1+W\n480 LET Z=I+J\n490 IF W<>Z THEN 510\n500 LET C=C+1\n510 NEXT J\n520 NEXT I\n530 IF C<>121 THEN 550\n540 IF B1=1210 THEN 570\n550 PRINT \"***  TEST FAILED  ***\"\n560 GOTO 580\n570 PRINT \"***  TEST PASSED  ***\"\n580 PRINT\n590 PRINT \"                               END TEST.\"\n600 PRINT\n640 PRINT \"SECTION 56.3: ONE-DIMENSIONAL ARRAYS WITH THE\"\n645 PRINT \"        DIM-STATEMENT.\"\n650 PRINT\n660 PRINT \"                              BEGIN TEST.\"\n670 PRINT\n680 DIM D(20)\n690 FOR I=0 TO 20\n700 LET H=I+1\n710 LET D(I)=H\n720 NEXT I\n730 LET D1=0\n740 LET C=0\n750 FOR I=0 TO 20\n760 LET M=D(I)\n770 LET D1=D1+M\n780 LET H=I+1\n790 IF M<>H THEN 810\n800 LET C=C+1\n810 NEXT I\n820 IF C<>21 THEN 840\n830 IF D1=231 THEN 860\n840 PRINT \"*** TEST FAILED  ***\"\n850 GOTO 870\n860 PRINT \"*** TEST PASSED  ***\"\n870 PRINT\n880 PRINT \"                                END TEST.\"\n890 PRINT\n900 PRINT\n910 PRINT \"SECTION 56.4: TWO-DIMENSIONAL ARRAYS WITH THE\"\n915 PRINT \"        DIM-STATEMENT.\"\n920 PRINT\n930 PRINT \"                               BEGIN TEST.\"\n940 PRINT\n950 DIM N(20,2),P(2,20),R(20,20)\n960 FOR I=0 TO 20\n970 LET I1=I+1\n980 LET N(I,1)=I1\n990 LET N(I,2)=-I\n1000 LET N(I,0)=1\n1010 FOR J=2 TO 0 STEP -1\n1020 LET J1=I*J\n1030 LET P(J,I)=J1\n1040 NEXT J\n1050 NEXT I\n1060 FOR K=0 TO 20\n1070 FOR L=0 TO 20\n1080 LET K1=K+L\n1090 LET R(K,L)=K1\n1100 NEXT L\n1110 NEXT K\n1120 LET N1=0\n1130 LET P1=0\n1140 LET R1=0\n1150 LET C=0\n1160 LET T=0\n1170 FOR I=0 TO 20\n1180 LET I1=I+1\n1190 LET T7=N(I,1)\n1200 LET T8=N(I,2)\n1210 LET T9=N(I,0)\n1220 IF T7 <> I1 THEN 1490\n1230 IF T8 <> -I THEN 1490\n1240 IF T9 <> 1 THEN 1490\n1250 FOR J=0 TO 2\n1260 LET F1=N(I,J)\n1270 LET N1=N1+F1\n1280 LET G1=P(J,I)\n1290 LET P1=P1+G1\n1300 LET J1=I*J\n1310 IF G1 <> J1 THEN 1330\n1320 LET C=C+1\n1330 NEXT J\n1340 NEXT I\n1350 IF C<>63 THEN 1490\n1360 IF N1<>42 THEN 1490\n1370 IF P1<>630 THEN 1490\n1380 FOR K=20 TO 0 STEP -1\n1390 FOR L=0 TO 20\n1400 LET Q1=R(K,L)\n1410 LET R1=R1+Q1\n1420 LET K1=K+L\n1430 IF Q1 <> K1 THEN 1450\n1440 LET T=T+1\n1450 NEXT L\n1460 NEXT K\n1470 IF T<>441 THEN 1490\n1480 IF R1=8820 THEN 1510\n1490 PRINT \"***  TEST FAILED  ***\"\n1500 GOTO 1520\n1510 PRINT \"***  TEST PASSED  ***\"\n1520 PRINT\n1530 PRINT \"                                END TEST.\"\n1540 PRINT\n1550 PRINT\n1560 PRINT \"END PROGRAM 56\"\n1570 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 130 FOR I=0 TO 10
+ 140 LET A(I)=I
+ 150 NEXT I
+ 160 LET A1=0
+ 170 LET C=0
+ 180 FOR I=10 TO 0 STEP -1
+ 190 LET Y=A(I)
+ 200 LET A1=A1+Y
+ 210 IF Y<>I THEN 230
+ 220 LET C=C+1
+ 230 NEXT I
+ 240 IF C<>11 THEN 260
+ 250 IF A1=55 THEN 280
+ 260 PRINT "*** TEST FAILED ***"
+ 270 GOTO 290
+ 280 PRINT "*** TEST PASSED ***"
+ 290 PRINT
+ 300 PRINT "                                END TEST."
+ 310 PRINT
+ 320 PRINT "SECTION 56.2: TWO-DIMENSIONAL ARRAYS WITHOUT THE"
+ 325 PRINT "        DIM-STATEMENT."
+ 330 PRINT
+ 340 PRINT "                               BEGIN TEST."
+ 350 PRINT
+ 360 FOR I=0 TO 10
+ 370 FOR J=0 TO 10
+ 380 LET Z=I+J
+ 390 LET B(I,J)=Z
+ 400 NEXT J
+ 410 NEXT I
+ 420 LET B1=0
+ 430 LET C=0
+ 440 FOR I=10 TO 0 STEP -1
+ 450 FOR J=10 TO 0 STEP -1
+ 460 LET W=B(I,J)
+ 470 LET B1=B1+W
+ 480 LET Z=I+J
+ 490 IF W<>Z THEN 510
+ 500 LET C=C+1
+ 510 NEXT J
+ 520 NEXT I
+ 530 IF C<>121 THEN 550
+ 540 IF B1=1210 THEN 570
+ 550 PRINT "***  TEST FAILED  ***"
+ 560 GOTO 580
+ 570 PRINT "***  TEST PASSED  ***"
+ 580 PRINT
+ 590 PRINT "                               END TEST."
+ 600 PRINT
+ 640 PRINT "SECTION 56.3: ONE-DIMENSIONAL ARRAYS WITH THE"
+ 645 PRINT "        DIM-STATEMENT."
+ 650 PRINT
+ 660 PRINT "                              BEGIN TEST."
+ 670 PRINT
+ 680 DIM D(20)
+ 690 FOR I=0 TO 20
+ 700 LET H=I+1
+ 710 LET D(I)=H
+ 720 NEXT I
+ 730 LET D1=0
+ 740 LET C=0
+ 750 FOR I=0 TO 20
+ 760 LET M=D(I)
+ 770 LET D1=D1+M
+ 780 LET H=I+1
+ 790 IF M<>H THEN 810
+ 800 LET C=C+1
+ 810 NEXT I
+ 820 IF C<>21 THEN 840
+ 830 IF D1=231 THEN 860
+ 840 PRINT "*** TEST FAILED  ***"
+ 850 GOTO 870
+ 860 PRINT "*** TEST PASSED  ***"
+ 870 PRINT
+ 880 PRINT "                                END TEST."
+ 890 PRINT
+ 900 PRINT
+ 910 PRINT "SECTION 56.4: TWO-DIMENSIONAL ARRAYS WITH THE"
+ 915 PRINT "        DIM-STATEMENT."
+ 920 PRINT
+ 930 PRINT "                               BEGIN TEST."
+ 940 PRINT
+ 950 DIM N(20,2),P(2,20),R(20,20)
+ 960 FOR I=0 TO 20
+ 970 LET I1=I+1
+ 980 LET N(I,1)=I1
+ 990 LET N(I,2)=-I
+ 1000 LET N(I,0)=1
+ 1010 FOR J=2 TO 0 STEP -1
+ 1020 LET J1=I*J
+ 1030 LET P(J,I)=J1
+ 1040 NEXT J
+ 1050 NEXT I
+ 1060 FOR K=0 TO 20
+ 1070 FOR L=0 TO 20
+ 1080 LET K1=K+L
+ 1090 LET R(K,L)=K1
+ 1100 NEXT L
+ 1110 NEXT K
+ 1120 LET N1=0
+ 1130 LET P1=0
+ 1140 LET R1=0
+ 1150 LET C=0
+ 1160 LET T=0
+ 1170 FOR I=0 TO 20
+ 1180 LET I1=I+1
+ 1190 LET T7=N(I,1)
+ 1200 LET T8=N(I,2)
+ 1210 LET T9=N(I,0)
+ 1220 IF T7 <> I1 THEN 1490
+ 1230 IF T8 <> -I THEN 1490
+ 1240 IF T9 <> 1 THEN 1490
+ 1250 FOR J=0 TO 2
+ 1260 LET F1=N(I,J)
+ 1270 LET N1=N1+F1
+ 1280 LET G1=P(J,I)
+ 1290 LET P1=P1+G1
+ 1300 LET J1=I*J
+ 1310 IF G1 <> J1 THEN 1330
+ 1320 LET C=C+1
+ 1330 NEXT J
+ 1340 NEXT I
+ 1350 IF C<>63 THEN 1490
+ 1360 IF N1<>42 THEN 1490
+ 1370 IF P1<>630 THEN 1490
+ 1380 FOR K=20 TO 0 STEP -1
+ 1390 FOR L=0 TO 20
+ 1400 LET Q1=R(K,L)
+ 1410 LET R1=R1+Q1
+ 1420 LET K1=K+L
+ 1430 IF Q1 <> K1 THEN 1450
+ 1440 LET T=T+1
+ 1450 NEXT L
+ 1460 NEXT K
+ 1470 IF T<>441 THEN 1490
+ 1480 IF R1=8820 THEN 1510
+ 1490 PRINT "***  TEST FAILED  ***"
+ 1500 GOTO 1520
+ 1510 PRINT "***  TEST PASSED  ***"
+ 1520 PRINT
+ 1530 PRINT "                                END TEST."
+ 1540 PRINT
+ 1550 PRINT
+ 1560 PRINT "END PROGRAM 56"
+ 1570 END
+ 
', tests/integration.rs:37:13

---- P055 stdout ----
thread 'P055' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 FOR I=1 TO 9\n270 PRINT \"I = \";I\n310 NEXT I\n350 PRINT\n360 PRINT \"                                END TEST.\"\n370 PRINT\n380 PRINT \"END PROGRAM 55\"\n390 END\n"`,
 right: `"250: error: jump into FOR block \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 FOR I=1 TO 9
+ 270 PRINT "I = ";I
+ 310 NEXT I
+ 350 PRINT
+ 360 PRINT "                                END TEST."
+ 370 PRINT
+ 380 PRINT "END PROGRAM 55"
+ 390 END
- 250: error: jump into FOR block 
', tests/integration.rs:37:13

---- P054 stdout ----
thread 'P054' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 FOR I=1 TO 3\n270 FOR J=2 TO 4\n280 FOR I=3 TO 5\n290 PRINT \"I = \";I;\"      J = \";J\n300 NEXT I\n305 NEXT J\n310 NEXT I\n350 PRINT\n360 PRINT \"                                END TEST.\"\n380 PRINT \"END PROGRAM 54\"\n390 END\n"`,
 right: `"280: error: FOR uses the same variable as outer FOR at line 260\n FOR I=3 TO 5\n     ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 FOR I=1 TO 3
+ 270 FOR J=2 TO 4
+ 280 FOR I=3 TO 5
+ 290 PRINT "I = ";I;"      J = ";J
+ 300 NEXT I
+ 305 NEXT J
+ 310 NEXT I
+ 350 PRINT
+ 360 PRINT "                                END TEST."
+ 380 PRINT "END PROGRAM 54"
+ 390 END
- 280: error: FOR uses the same variable as outer FOR at line 260
-  FOR I=3 TO 5
-      ^
', tests/integration.rs:37:13

---- P059 stdout ----
thread 'P059' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n80 FOR J=0 TO 10\n90 LET A(J)=11-J\n100 NEXT J\n110 LET E9=0\n120 LET A$=\"OK\"\n130 FOR I=10 TO 0 STEP -1\n140   IF A(I)=11-I THEN 170\n150   LET E9=1\n160   PRINT \"LOST CORRECT VALUE IN ARRAY ELEMENT #\";I\n170 NEXT I\n180 IF A$=\"OK\" THEN 210\n190 PRINT \"LOST CORRECT VALUE IN A$\"\n200 LET E9=1\n210 PRINT\n220 IF E9<>0 THEN 250\n230 PRINT \"***  TEST PASSED  ***\"\n240 GOTO 260\n250 PRINT \"***  TEST FAILED  ***\"\n260 PRINT\n270 PRINT \"                    END TEST\"\n280 PRINT\n290 PRINT \"END PROGRAM 59\"\n340 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 80 FOR J=0 TO 10
+ 90 LET A(J)=11-J
+ 100 NEXT J
+ 110 LET E9=0
+ 120 LET A$="OK"
+ 130 FOR I=10 TO 0 STEP -1
+ 140   IF A(I)=11-I THEN 170
+ 150   LET E9=1
+ 160   PRINT "LOST CORRECT VALUE IN ARRAY ELEMENT #";I
+ 170 NEXT I
+ 180 IF A$="OK" THEN 210
+ 190 PRINT "LOST CORRECT VALUE IN A$"
+ 200 LET E9=1
+ 210 PRINT
+ 220 IF E9<>0 THEN 250
+ 230 PRINT "***  TEST PASSED  ***"
+ 240 GOTO 260
+ 250 PRINT "***  TEST FAILED  ***"
+ 260 PRINT
+ 270 PRINT "                    END TEST"
+ 280 PRINT
+ 290 PRINT "END PROGRAM 59"
+ 340 END
+ 
', tests/integration.rs:37:13

---- P060 stdout ----
thread 'P060' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n100 FOR I=0 TO 10\n110 LET A(I)=11-I\n120 NEXT I\n130 LET Y$=\"3\"\n140 LET X$=\"3\"\n150 IF A(3)<>8 THEN 280\n160 LET X$=\"2.50001\"\n170 IF A(2.50001)<>8 THEN 280\n180 LET X$=\"3.49999\"\n190 IF A(3.49999)<>8 THEN 280\n200 LET Y$=\"0\"\n210 LET X$=\"-.49\"\n220 IF A(-.49) <> 11 THEN 280\n230 LET Y$=\"10\"\n240 LET X$=\"10.49\"\n250 IF A(10.49)<>1 THEN 280\n260 PRINT \" ***  TEST PASSED  *** \"\n270 GOTO 300\n280 PRINT \"SUBSCRIPT OF \";X$;\" DID NOT EVALUATE TO \";Y$\n290 PRINT \"***  TEST FAILED  ***\"\n300 PRINT\n310 PRINT \"                  END TEST\"\n320 PRINT\n330 PRINT \"END PROGRAM 60\"\n340 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 100 FOR I=0 TO 10
+ 110 LET A(I)=11-I
+ 120 NEXT I
+ 130 LET Y$="3"
+ 140 LET X$="3"
+ 150 IF A(3)<>8 THEN 280
+ 160 LET X$="2.50001"
+ 170 IF A(2.50001)<>8 THEN 280
+ 180 LET X$="3.49999"
+ 190 IF A(3.49999)<>8 THEN 280
+ 200 LET Y$="0"
+ 210 LET X$="-.49"
+ 220 IF A(-.49) <> 11 THEN 280
+ 230 LET Y$="10"
+ 240 LET X$="10.49"
+ 250 IF A(10.49)<>1 THEN 280
+ 260 PRINT " ***  TEST PASSED  *** "
+ 270 GOTO 300
+ 280 PRINT "SUBSCRIPT OF ";X$;" DID NOT EVALUATE TO ";Y$
+ 290 PRINT "***  TEST FAILED  ***"
+ 300 PRINT
+ 310 PRINT "                  END TEST"
+ 320 PRINT
+ 330 PRINT "END PROGRAM 60"
+ 340 END
+ 
', tests/integration.rs:37:13

---- P058 stdout ----
thread 'P058' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n50 OPTION BASE 1\n60 PRINT\n100 PRINT \"SECTION 58.1: ONE-DIMENSIONAL ARRAYS WITHOUT THE\"\n105 PRINT \"        DIM-STATEMENT.\"\n110 PRINT\n120 PRINT \"                               BEGIN TEST.\"\n130 PRINT\n140 FOR I=1 TO 10\n150 LET A(I)=I\n160 NEXT I\n170 LET A1=0\n180 LET C=0\n190 FOR I=10 TO 1 STEP -1\n200 LET Y=A(I)\n210 LET A1=A1+Y\n220 IF Y<>I THEN 240\n230 LET C=C+1\n240 NEXT I\n250 IF C<>10 THEN 270\n260 IF A1=55 THEN 290\n270 PRINT \"***  TEST FAILED  ***\"\n280 GOTO 300\n290 PRINT \"***  TEST PASSED  ***\"\n300 PRINT\n310 PRINT \"                                END TEST.\"\n320 PRINT\n330 PRINT \"SECTION 58.2: TWO-DIMENSIONAL ARRAYS WITHOUT THE \"\n335 PRINT \"        DIM-STATEMENT.\"\n340 PRINT\n350 PRINT \"                               BEGIN TEST.\"\n360 PRINT\n370 FOR I=1 TO 10\n380 FOR J=1 TO 10\n390 LET Z=I+J\n400 LET B(I,J)=Z\n410 NEXT J\n420 NEXT I\n430 LET B1=0\n440 LET C=0\n450 FOR I=10 TO 1 STEP -1\n460 FOR J=10 TO 1 STEP -1\n470 LET W=B(I,J)\n480 LET B1=B1+W\n490 LET Z=I+J\n500 IF W<>Z THEN 520\n510 LET C=C+1\n520 NEXT J\n530 NEXT I\n540 IF C<>100 THEN 560\n550 IF B1=1100 THEN 580\n560 PRINT \"***  TEST FAILED  ***\"\n570 GOTO 590\n580 PRINT \"***  TEST PASSED  ***\"\n590 PRINT\n600 PRINT \"                                END TEST.\"\n610 PRINT\n650 PRINT \"SECTION 58.3: ONE-DIMENSIONAL ARRAYS WITH THE\"\n655 PRINT \"        DIM-STATEMENT.\"\n660 PRINT\n670 PRINT \"                               BEGIN TEST.\"\n680 PRINT\n690 DIM E(1)\n700 LET E(1)=6\n710 LET T9=E(1)\n720 IF 6<>T9 THEN 890\n730 DIM D(20)\n740 FOR I=1 TO 20\n750 LET H=I+1\n760 LET D(I)=H\n770 NEXT I\n780 LET D1=0\n790 LET C=0\n800 FOR I=1 TO 20\n810 LET M=D(I)\n820 LET D1=D1+M\n830 LET H=I+1\n840 IF M<>H THEN 860\n850 LET C=C+1\n860 NEXT I\n870 IF C<>20 THEN 890\n880 IF D1=230 THEN 910\n890 PRINT \"***  TEST FAILED  ***\"\n900 GOTO 920\n910 PRINT \"***  TEST PASSED  ***\"\n920 PRINT\n930 PRINT \"                                END TEST.\"\n940 PRINT\n950 PRINT\n960 PRINT \"SECTION 58.4: TWO-DIMENSIONAL ARRAYS WITH THE\"\n965 PRINT \"        DIM-STATEMENT.\"\n970 PRINT\n980 PRINT \"                               BEGIN TEST.\"\n990 PRINT\n1000 DIM N(20,2),P(2,20),R(20,20)\n1010 FOR I=1 TO 20\n1020 LET I1=I+1\n1030 LET N(I,1)=I1\n1040 LET N(I,2)=-I\n1050 FOR J=2 TO 1 STEP -1\n1060 LET J1=I*J\n1070 LET P(J,I)=J1\n1080 NEXT J\n1090 NEXT I\n1100 FOR K=1 TO 20\n1110 FOR L=1 TO 20\n1120 LET K1=K+L\n1130 LET R(K,L)=K1\n1140 NEXT L\n1150 NEXT K\n1160 LET N1=0\n1170 LET P1=0\n1180 LET R1=0\n1190 LET C=0\n1200 LET T=0\n1210 FOR I=1 TO 20\n1220 LET I1=I+1\n1230 LET T8=N(I,1)\n1240 LET T9=N(I,2)\n1250 IF T8 <> I1 THEN 1510\n1260 IF T9 <> -I THEN 1510\n1270 FOR J=1 TO 2\n1280 LET F1=N(I,J)\n1290 LET N1=N1+F1\n1300 LET G1=P(J,I)\n1310 LET P1=P1+G1\n1320 LET J1=I*J\n1330 IF G1 <> J1 THEN 1350\n1340 LET C=C+1\n1350 NEXT J\n1360 NEXT I\n1370 IF C<>40 THEN 1510\n1380 IF N1<>20 THEN 1510\n1390 IF P1<>630 THEN 1510\n1400 FOR K=20 TO 1 STEP -1\n1410 FOR L=1 TO 20\n1420 LET Q1=R(K,L)\n1430 LET R1=R1+Q1\n1440 LET K1=K+L\n1450 IF Q1 <> K1 THEN 1470\n1460 LET T=T+1\n1470 NEXT L\n1480 NEXT K\n1490 IF T<>400 THEN 1510\n1500 IF R1=8400 THEN 1530\n1510 PRINT \"***  TEST FAILED  ***\"\n1520 GOTO 1540\n1530 PRINT \"***  TEST PASSED  ***\"\n1540 PRINT\n1550 PRINT \"                               BEGIN TEST.\"\n1560 PRINT\n1570 PRINT\n1580 PRINT \"END PROGRAM 58\"\n1590 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 50 OPTION BASE 1
+ 60 PRINT
+ 100 PRINT "SECTION 58.1: ONE-DIMENSIONAL ARRAYS WITHOUT THE"
+ 105 PRINT "        DIM-STATEMENT."
+ 110 PRINT
+ 120 PRINT "                               BEGIN TEST."
+ 130 PRINT
+ 140 FOR I=1 TO 10
+ 150 LET A(I)=I
+ 160 NEXT I
+ 170 LET A1=0
+ 180 LET C=0
+ 190 FOR I=10 TO 1 STEP -1
+ 200 LET Y=A(I)
+ 210 LET A1=A1+Y
+ 220 IF Y<>I THEN 240
+ 230 LET C=C+1
+ 240 NEXT I
+ 250 IF C<>10 THEN 270
+ 260 IF A1=55 THEN 290
+ 270 PRINT "***  TEST FAILED  ***"
+ 280 GOTO 300
+ 290 PRINT "***  TEST PASSED  ***"
+ 300 PRINT
+ 310 PRINT "                                END TEST."
+ 320 PRINT
+ 330 PRINT "SECTION 58.2: TWO-DIMENSIONAL ARRAYS WITHOUT THE "
+ 335 PRINT "        DIM-STATEMENT."
+ 340 PRINT
+ 350 PRINT "                               BEGIN TEST."
+ 360 PRINT
+ 370 FOR I=1 TO 10
+ 380 FOR J=1 TO 10
+ 390 LET Z=I+J
+ 400 LET B(I,J)=Z
+ 410 NEXT J
+ 420 NEXT I
+ 430 LET B1=0
+ 440 LET C=0
+ 450 FOR I=10 TO 1 STEP -1
+ 460 FOR J=10 TO 1 STEP -1
+ 470 LET W=B(I,J)
+ 480 LET B1=B1+W
+ 490 LET Z=I+J
+ 500 IF W<>Z THEN 520
+ 510 LET C=C+1
+ 520 NEXT J
+ 530 NEXT I
+ 540 IF C<>100 THEN 560
+ 550 IF B1=1100 THEN 580
+ 560 PRINT "***  TEST FAILED  ***"
+ 570 GOTO 590
+ 580 PRINT "***  TEST PASSED  ***"
+ 590 PRINT
+ 600 PRINT "                                END TEST."
+ 610 PRINT
+ 650 PRINT "SECTION 58.3: ONE-DIMENSIONAL ARRAYS WITH THE"
+ 655 PRINT "        DIM-STATEMENT."
+ 660 PRINT
+ 670 PRINT "                               BEGIN TEST."
+ 680 PRINT
+ 690 DIM E(1)
+ 700 LET E(1)=6
+ 710 LET T9=E(1)
+ 720 IF 6<>T9 THEN 890
+ 730 DIM D(20)
+ 740 FOR I=1 TO 20
+ 750 LET H=I+1
+ 760 LET D(I)=H
+ 770 NEXT I
+ 780 LET D1=0
+ 790 LET C=0
+ 800 FOR I=1 TO 20
+ 810 LET M=D(I)
+ 820 LET D1=D1+M
+ 830 LET H=I+1
+ 840 IF M<>H THEN 860
+ 850 LET C=C+1
+ 860 NEXT I
+ 870 IF C<>20 THEN 890
+ 880 IF D1=230 THEN 910
+ 890 PRINT "***  TEST FAILED  ***"
+ 900 GOTO 920
+ 910 PRINT "***  TEST PASSED  ***"
+ 920 PRINT
+ 930 PRINT "                                END TEST."
+ 940 PRINT
+ 950 PRINT
+ 960 PRINT "SECTION 58.4: TWO-DIMENSIONAL ARRAYS WITH THE"
+ 965 PRINT "        DIM-STATEMENT."
+ 970 PRINT
+ 980 PRINT "                               BEGIN TEST."
+ 990 PRINT
+ 1000 DIM N(20,2),P(2,20),R(20,20)
+ 1010 FOR I=1 TO 20
+ 1020 LET I1=I+1
+ 1030 LET N(I,1)=I1
+ 1040 LET N(I,2)=-I
+ 1050 FOR J=2 TO 1 STEP -1
+ 1060 LET J1=I*J
+ 1070 LET P(J,I)=J1
+ 1080 NEXT J
+ 1090 NEXT I
+ 1100 FOR K=1 TO 20
+ 1110 FOR L=1 TO 20
+ 1120 LET K1=K+L
+ 1130 LET R(K,L)=K1
+ 1140 NEXT L
+ 1150 NEXT K
+ 1160 LET N1=0
+ 1170 LET P1=0
+ 1180 LET R1=0
+ 1190 LET C=0
+ 1200 LET T=0
+ 1210 FOR I=1 TO 20
+ 1220 LET I1=I+1
+ 1230 LET T8=N(I,1)
+ 1240 LET T9=N(I,2)
+ 1250 IF T8 <> I1 THEN 1510
+ 1260 IF T9 <> -I THEN 1510
+ 1270 FOR J=1 TO 2
+ 1280 LET F1=N(I,J)
+ 1290 LET N1=N1+F1
+ 1300 LET G1=P(J,I)
+ 1310 LET P1=P1+G1
+ 1320 LET J1=I*J
+ 1330 IF G1 <> J1 THEN 1350
+ 1340 LET C=C+1
+ 1350 NEXT J
+ 1360 NEXT I
+ 1370 IF C<>40 THEN 1510
+ 1380 IF N1<>20 THEN 1510
+ 1390 IF P1<>630 THEN 1510
+ 1400 FOR K=20 TO 1 STEP -1
+ 1410 FOR L=1 TO 20
+ 1420 LET Q1=R(K,L)
+ 1430 LET R1=R1+Q1
+ 1440 LET K1=K+L
+ 1450 IF Q1 <> K1 THEN 1470
+ 1460 LET T=T+1
+ 1470 NEXT L
+ 1480 NEXT K
+ 1490 IF T<>400 THEN 1510
+ 1500 IF R1=8400 THEN 1530
+ 1510 PRINT "***  TEST FAILED  ***"
+ 1520 GOTO 1540
+ 1530 PRINT "***  TEST PASSED  ***"
+ 1540 PRINT
+ 1550 PRINT "                               BEGIN TEST."
+ 1560 PRINT
+ 1570 PRINT
+ 1580 PRINT "END PROGRAM 58"
+ 1590 END
+ 
', tests/integration.rs:37:13

---- P061 stdout ----
thread 'P061' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n200 LET B(1)=+001.00\n210 LET B(2)=1\n220 FOR I=3 TO 10\n230 LET J=I-1\n240 LET K=I-2\n250 LET B(I)=B(J)+B(K)\n260 NEXT I\n270 LET A=B(5)+B(8)\n280 LET Y=26\n290 GOSUB 9000\n300 LET C(7)=47.23/B(7)+23.E-1\n310 LET H9=7.0\n320 LET A=C(H9)+H9*B(H9)\n330 LET Y=96.933076923\n340 GOSUB 9000\n350 LET H9=6\n360 LET H9=B(H9)\n370 LET H9=B(H9)\n380 LET Z(0)=(H9/7)^B(4)*20/(B(7)-B(4))-B(10)-.02E+02\n390 LET Z(1)=Z(0)+Z(0)\n400 LET Z(2)=-Z(0)-Z(0)\n410 LET Z(3)=Z(0)*Z(0)\n420 LET Z(4)=Z(0)/Z(0)\n430 LET Z(5)=Z(0)^Z(0)\n440 LET A=Z(0)+Z(1)\n450 LET Y=-9\n460 GOSUB 9000\n470 LET A=Z(2)+Z(3)+Z(4)+Z(5)\n480 LET Y=15.96296293\n490 GOSUB 9000\n500 LET A=-2000.00E-03-B(10)-(B(4)-B(7))/2E+1*B(4)^(H9/7)\n510 LET Y=-43.5\n520 GOSUB 9000\n530 FOR I=1 TO 7\n540 FOR J=1 TO 7\n550 LET Q(I,J)=I/J\n560 NEXT J\n570 NEXT I\n580 LET A=Q(6,3)+Q(6,7)*Q(5,4)*(-Q(2,3))*Q(7,2)/Q(5,6)/Q(3,4)\n590 LET Y=-2\n600 GOSUB 9000\n2000 PRINT\n2010 IF F=0 THEN 2040\n2020 PRINT \"*** TEST FAILED IN \";F;\" CASE(S). ***\"\n2030 GOTO 2050\n2040 PRINT \"*** TEST PASSED ***\"\n2050 PRINT\n2060 PRINT \"                  END TEST\"\n2070 PRINT\n2080 PRINT \"END PROGRAM 61\"\n2090 STOP\n9000 REM HANDLE REPORT\n9002 REM THIS SUBROUTINE ADOPTS A VERY LOOSE CRITERION OF CORRECTNESS\n9004 REM (RELATIVE ERROR < .01). ITS PURPOSE IS NOT TO MEASURE ACCURACY\n9006 REM BUT ONLY TO ASSURE THAT THE SEMANTICS OF THE EXPRESSION\n9008 REM HAVE BEEN CORRECTLY IMPLEMENTED.\n9010 LET C1=C1+1\n9020 PRINT C1,Y,A,\n9030 LET P$=\"FAILS\"\n9040 LET M=0.01\n9050 LET T=(A-Y)/Y\n9060 IF T>M THEN 9110\n9070 LET T=-T\n9080 IF T>M THEN 9110\n9090 LET P$=\"PASSES\"\n9100 GOTO 9120\n9110 LET F=F+1\n9120 PRINT \"TEST \";P$\n9130 RETURN\n9140 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 200 LET B(1)=+001.00
+ 210 LET B(2)=1
+ 220 FOR I=3 TO 10
+ 230 LET J=I-1
+ 240 LET K=I-2
+ 250 LET B(I)=B(J)+B(K)
+ 260 NEXT I
+ 270 LET A=B(5)+B(8)
+ 280 LET Y=26
+ 290 GOSUB 9000
+ 300 LET C(7)=47.23/B(7)+23.E-1
+ 310 LET H9=7.0
+ 320 LET A=C(H9)+H9*B(H9)
+ 330 LET Y=96.933076923
+ 340 GOSUB 9000
+ 350 LET H9=6
+ 360 LET H9=B(H9)
+ 370 LET H9=B(H9)
+ 380 LET Z(0)=(H9/7)^B(4)*20/(B(7)-B(4))-B(10)-.02E+02
+ 390 LET Z(1)=Z(0)+Z(0)
+ 400 LET Z(2)=-Z(0)-Z(0)
+ 410 LET Z(3)=Z(0)*Z(0)
+ 420 LET Z(4)=Z(0)/Z(0)
+ 430 LET Z(5)=Z(0)^Z(0)
+ 440 LET A=Z(0)+Z(1)
+ 450 LET Y=-9
+ 460 GOSUB 9000
+ 470 LET A=Z(2)+Z(3)+Z(4)+Z(5)
+ 480 LET Y=15.96296293
+ 490 GOSUB 9000
+ 500 LET A=-2000.00E-03-B(10)-(B(4)-B(7))/2E+1*B(4)^(H9/7)
+ 510 LET Y=-43.5
+ 520 GOSUB 9000
+ 530 FOR I=1 TO 7
+ 540 FOR J=1 TO 7
+ 550 LET Q(I,J)=I/J
+ 560 NEXT J
+ 570 NEXT I
+ 580 LET A=Q(6,3)+Q(6,7)*Q(5,4)*(-Q(2,3))*Q(7,2)/Q(5,6)/Q(3,4)
+ 590 LET Y=-2
+ 600 GOSUB 9000
+ 2000 PRINT
+ 2010 IF F=0 THEN 2040
+ 2020 PRINT "*** TEST FAILED IN ";F;" CASE(S). ***"
+ 2030 GOTO 2050
+ 2040 PRINT "*** TEST PASSED ***"
+ 2050 PRINT
+ 2060 PRINT "                  END TEST"
+ 2070 PRINT
+ 2080 PRINT "END PROGRAM 61"
+ 2090 STOP
+ 9000 REM HANDLE REPORT
+ 9002 REM THIS SUBROUTINE ADOPTS A VERY LOOSE CRITERION OF CORRECTNESS
+ 9004 REM (RELATIVE ERROR < .01). ITS PURPOSE IS NOT TO MEASURE ACCURACY
+ 9006 REM BUT ONLY TO ASSURE THAT THE SEMANTICS OF THE EXPRESSION
+ 9008 REM HAVE BEEN CORRECTLY IMPLEMENTED.
+ 9010 LET C1=C1+1
+ 9020 PRINT C1,Y,A,
+ 9030 LET P$="FAILS"
+ 9040 LET M=0.01
+ 9050 LET T=(A-Y)/Y
+ 9060 IF T>M THEN 9110
+ 9070 LET T=-T
+ 9080 IF T>M THEN 9110
+ 9090 LET P$="PASSES"
+ 9100 GOTO 9120
+ 9110 LET F=F+1
+ 9120 PRINT "TEST ";P$
+ 9130 RETURN
+ 9140 END
+ 
', tests/integration.rs:37:13

---- P062 stdout ----
thread 'P062' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 OPTION BASE 1\n190 REM CAN FALL THROUGH OR JUMP TO OPTION WITH NO EFFECT\n200 IF T<>1 THEN 230\n210 LET T=2\n220 GOTO 180\n230 LET A(1)=1\n240 REM CAN REFERENCE ARRAY BEFORE ANY DIM-STATEMENT\n250 FOR I=2 TO 10\n260 LET J=I-1\n270 LET A(I)=A(J)+A(J)\n280 NEXT I\n290 IF A(10)=512 THEN 320\n300 LET M$=\"IMPLICIT ARRAY\"\n310 GOSUB 1000\n320 LET T=1\n330 DIM D(3),C(2,4),B(12)\n340 REM CAN DIMENSION SEVERAL ARRAYS IN NON-ALPHA ORDER AND\n350 REM OF DIFFERENT DIMENSIONALITY\n360 REM CAN FALL THROUGH OR JUMP TO DIM\n370 IF T<>1 THEN 400\n380 LET T=2\n390 GOTO 330\n400 LET B(12)=A(10)\n410 FOR I=11 TO 1 STEP -1\n420 LET J=I+1\n430 LET B(I)=B(J)\n440 NEXT I\n450 IF B(1)=512 THEN 480\n460 LET M$=\"EXPLICIT ARRAY\"\n470 GOSUB 1000\n480 GOTO 510\n490 DIM E(14)\n500 REM DIM SETS ARRAY SIZE EVEN IF JUMPED OVER\n510 LET A(10)=666\n520 LET B(12)=A(10)\n530 LET C(2,4)=B(12)\n540 LET D(3)=C(2,4)\n550 LET E(14)=D(3)\n560 IF E(14)=666 THEN 590\n570 LET M$=\"SKIPPED-OVER DIM\"\n580 GOSUB 1000\n590 PRINT\n600 IF F=0 THEN 630\n610 PRINT \" ***  TEST FAILED IN \";F;\" CASE(S)  *** \"\n620 GOTO 640\n630 PRINT \" ***  TEST PASSED  *** \"\n640 PRINT\n650 PRINT \"                  END TEST\"\n660 PRINT\n670 PRINT \"END PROGRAM 62\"\n680 STOP\n1000 PRINT \"FAILURE BECAUSE OF: \";M$\n1010 LET F=F+1\n1020 RETURN\n1030 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 OPTION BASE 1
+ 190 REM CAN FALL THROUGH OR JUMP TO OPTION WITH NO EFFECT
+ 200 IF T<>1 THEN 230
+ 210 LET T=2
+ 220 GOTO 180
+ 230 LET A(1)=1
+ 240 REM CAN REFERENCE ARRAY BEFORE ANY DIM-STATEMENT
+ 250 FOR I=2 TO 10
+ 260 LET J=I-1
+ 270 LET A(I)=A(J)+A(J)
+ 280 NEXT I
+ 290 IF A(10)=512 THEN 320
+ 300 LET M$="IMPLICIT ARRAY"
+ 310 GOSUB 1000
+ 320 LET T=1
+ 330 DIM D(3),C(2,4),B(12)
+ 340 REM CAN DIMENSION SEVERAL ARRAYS IN NON-ALPHA ORDER AND
+ 350 REM OF DIFFERENT DIMENSIONALITY
+ 360 REM CAN FALL THROUGH OR JUMP TO DIM
+ 370 IF T<>1 THEN 400
+ 380 LET T=2
+ 390 GOTO 330
+ 400 LET B(12)=A(10)
+ 410 FOR I=11 TO 1 STEP -1
+ 420 LET J=I+1
+ 430 LET B(I)=B(J)
+ 440 NEXT I
+ 450 IF B(1)=512 THEN 480
+ 460 LET M$="EXPLICIT ARRAY"
+ 470 GOSUB 1000
+ 480 GOTO 510
+ 490 DIM E(14)
+ 500 REM DIM SETS ARRAY SIZE EVEN IF JUMPED OVER
+ 510 LET A(10)=666
+ 520 LET B(12)=A(10)
+ 530 LET C(2,4)=B(12)
+ 540 LET D(3)=C(2,4)
+ 550 LET E(14)=D(3)
+ 560 IF E(14)=666 THEN 590
+ 570 LET M$="SKIPPED-OVER DIM"
+ 580 GOSUB 1000
+ 590 PRINT
+ 600 IF F=0 THEN 630
+ 610 PRINT " ***  TEST FAILED IN ";F;" CASE(S)  *** "
+ 620 GOTO 640
+ 630 PRINT " ***  TEST PASSED  *** "
+ 640 PRINT
+ 650 PRINT "                  END TEST"
+ 660 PRINT
+ 670 PRINT "END PROGRAM 62"
+ 680 STOP
+ 1000 PRINT "FAILURE BECAUSE OF: ";M$
+ 1010 LET F=F+1
+ 1020 RETURN
+ 1030 END
+ 
', tests/integration.rs:37:13

---- P063 stdout ----
thread 'P063' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 FOR I=7 TO 12\n220   PRINT \"ABOUT TO ASSIGN TO A(\";I;\"). \";\n230   IF I<11 THEN 260\n240   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n250   GOTO 270\n260   PRINT \"ASSIGNMENT SHOULD BE OK.\"\n270   LET A(I) = 20 - I\n280   PRINT \"HAVE ASSIGNED \";20-I;\" TO A(\";I;\").\"\n290   IF I<11 THEN 310\n300   PRINT \"ASSIGNMENT TO SUBSCRIPT > 10 - *** TEST FAILS ***\"\n310   PRINT\n320 NEXT I\n330 PRINT\n340 PRINT \"                               END TEST.\"\n350 PRINT\n360 PRINT \"END PROGRAM 63\"\n370 END\n"`,
 right: `"270: error: index out of range A(11)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 FOR I=7 TO 12
+ 220   PRINT "ABOUT TO ASSIGN TO A(";I;"). ";
+ 230   IF I<11 THEN 260
+ 240   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 250   GOTO 270
+ 260   PRINT "ASSIGNMENT SHOULD BE OK."
+ 270   LET A(I) = 20 - I
+ 280   PRINT "HAVE ASSIGNED ";20-I;" TO A(";I;")."
+ 290   IF I<11 THEN 310
+ 300   PRINT "ASSIGNMENT TO SUBSCRIPT > 10 - *** TEST FAILS ***"
+ 310   PRINT
+ 320 NEXT I
+ 330 PRINT
+ 340 PRINT "                               END TEST."
+ 350 PRINT
+ 360 PRINT "END PROGRAM 63"
+ 370 END
- 270: error: index out of range A(11)
', tests/integration.rs:37:13

---- P053 stdout ----
thread 'P053' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 FOR I=1 TO 3\n220 FOR J=1 TO 5\n230 PRINT \"I = \";I;\"       J = \";J\n270 NEXT I\n280 NEXT J\n310 PRINT\n320 PRINT \"                                END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 53\"\n350 END\n"`,
 right: `"270: error: NEXT without FOR \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 FOR I=1 TO 3
+ 220 FOR J=1 TO 5
+ 230 PRINT "I = ";I;"       J = ";J
+ 270 NEXT I
+ 280 NEXT J
+ 310 PRINT
+ 320 PRINT "                                END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 53"
+ 350 END
- 270: error: NEXT without FOR 
', tests/integration.rs:37:13

---- P066 stdout ----
thread 'P066' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 DIM B(3,12)\n220 FOR I=9 TO 14\n230   PRINT \"ABOUT TO ASSIGN TO B(0,\";I;\").\";\n240   IF I<13 THEN 270\n250   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n260   GOTO 280\n270   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n280   LET B(0,I) = 20 - I\n290   PRINT \"HAVE ASSIGNED \";20-I;\" TO B(0,\";I;\").\"\n300   IF I<13 THEN 320\n310   PRINT \"ASSIGNMENT TO SUBSCRIPT > 12 - *** TEST FAILS ***\"\n320   PRINT\n330 NEXT I\n340 PRINT\n350 PRINT \"                                END TEST.\"\n360 PRINT\n370 PRINT \"END PROGRAM 66\"\n380 END\n"`,
 right: `"280: error: index out of range B(...,13)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 DIM B(3,12)
+ 220 FOR I=9 TO 14
+ 230   PRINT "ABOUT TO ASSIGN TO B(0,";I;").";
+ 240   IF I<13 THEN 270
+ 250   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 260   GOTO 280
+ 270   PRINT " ASSIGNMENT SHOULD BE OK."
+ 280   LET B(0,I) = 20 - I
+ 290   PRINT "HAVE ASSIGNED ";20-I;" TO B(0,";I;")."
+ 300   IF I<13 THEN 320
+ 310   PRINT "ASSIGNMENT TO SUBSCRIPT > 12 - *** TEST FAILS ***"
+ 320   PRINT
+ 330 NEXT I
+ 340 PRINT
+ 350 PRINT "                                END TEST."
+ 360 PRINT
+ 370 PRINT "END PROGRAM 66"
+ 380 END
- 280: error: index out of range B(...,13)
', tests/integration.rs:37:13

---- P065 stdout ----
thread 'P065' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 DIM A(8)\n220 FOR I=3 TO -2 STEP -1\n230   PRINT \"ABOUT TO ASSIGN TO A(\";I;\").\";\n240   IF I>-1 THEN 270\n250   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n260   GOTO 280\n270   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n280   LET A(I) = 20 - I\n290   PRINT \"HAVE ASSIGNED \";20-I;\" TO A(\";I;\").\"\n300   IF I>-1 THEN 320\n310   PRINT \"ASSIGNMENT TO SUBSCRIPT < 1 - ***  TEST FAILS  ***\"\n320   PRINT\n330 NEXT I\n340 PRINT\n350 PRINT \"                               END TEST.\"\n360 PRINT\n370 PRINT \"END PROGRAM 65\"\n380 END\n"`,
 right: `"280: error: index out of range A(-1)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 DIM A(8)
+ 220 FOR I=3 TO -2 STEP -1
+ 230   PRINT "ABOUT TO ASSIGN TO A(";I;").";
+ 240   IF I>-1 THEN 270
+ 250   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 260   GOTO 280
+ 270   PRINT " ASSIGNMENT SHOULD BE OK."
+ 280   LET A(I) = 20 - I
+ 290   PRINT "HAVE ASSIGNED ";20-I;" TO A(";I;")."
+ 300   IF I>-1 THEN 320
+ 310   PRINT "ASSIGNMENT TO SUBSCRIPT < 1 - ***  TEST FAILS  ***"
+ 320   PRINT
+ 330 NEXT I
+ 340 PRINT
+ 350 PRINT "                               END TEST."
+ 360 PRINT
+ 370 PRINT "END PROGRAM 65"
+ 380 END
- 280: error: index out of range A(-1)
', tests/integration.rs:37:13

---- P064 stdout ----
thread 'P064' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 FOR I=3 TO -2 STEP -1\n220   PRINT \"ABOUT TO ASSIGN TO B(7,\";I;\").\";\n230   IF I>-1 THEN 260\n240   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n250   GOTO 270\n260   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n270   LET B(7,I) = 20 - I\n280   PRINT \"HAVE ASSIGNED \";20-I;\" TO B(7,\";I;\").\"\n290   IF I>-1 THEN 310\n300   PRINT \"ASSIGNMENT TO SUBSCRIPT < 0 - *** TEST FAILS ***\"\n310   PRINT\n320 NEXT I\n330 PRINT\n340 PRINT \"                                END TEST.\"\n350 PRINT\n360 PRINT \"END PROGRAM 64\"\n370 END\n"`,
 right: `"270: error: index out of range B(...,-1)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 FOR I=3 TO -2 STEP -1
+ 220   PRINT "ABOUT TO ASSIGN TO B(7,";I;").";
+ 230   IF I>-1 THEN 260
+ 240   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 250   GOTO 270
+ 260   PRINT " ASSIGNMENT SHOULD BE OK."
+ 270   LET B(7,I) = 20 - I
+ 280   PRINT "HAVE ASSIGNED ";20-I;" TO B(7,";I;")."
+ 290   IF I>-1 THEN 310
+ 300   PRINT "ASSIGNMENT TO SUBSCRIPT < 0 - *** TEST FAILS ***"
+ 310   PRINT
+ 320 NEXT I
+ 330 PRINT
+ 340 PRINT "                                END TEST."
+ 350 PRINT
+ 360 PRINT "END PROGRAM 64"
+ 370 END
- 270: error: index out of range B(...,-1)
', tests/integration.rs:37:13

---- P069 stdout ----
thread 'P069' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 OPTION BASE 0\n230 DIM B(3,12)\n240 FOR I=9 TO 14\n250   PRINT \"ABOUT TO ASSIGN TO B(0,\";I;\").\";\n260   IF I<13 THEN 290\n270   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n280   GOTO 300\n290   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n300   LET B(0,I) = 20 - I\n310   PRINT \"HAVE ASSIGNED \";20-I;\" TO B(0,\";I;\").\"\n320   IF I<13 THEN 340\n330   PRINT \"ASSIGNMENT TO SUBSCRIPT > 12 - *** TEST FAILS ***\"\n340   PRINT\n350 NEXT I\n360 PRINT\n370 PRINT \"                                END TEST.\"\n380 PRINT\n390 PRINT \"END PROGRAM 69\"\n400 END\n"`,
 right: `"300: error: index out of range B(...,13)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 OPTION BASE 0
+ 230 DIM B(3,12)
+ 240 FOR I=9 TO 14
+ 250   PRINT "ABOUT TO ASSIGN TO B(0,";I;").";
+ 260   IF I<13 THEN 290
+ 270   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 280   GOTO 300
+ 290   PRINT " ASSIGNMENT SHOULD BE OK."
+ 300   LET B(0,I) = 20 - I
+ 310   PRINT "HAVE ASSIGNED ";20-I;" TO B(0,";I;")."
+ 320   IF I<13 THEN 340
+ 330   PRINT "ASSIGNMENT TO SUBSCRIPT > 12 - *** TEST FAILS ***"
+ 340   PRINT
+ 350 NEXT I
+ 360 PRINT
+ 370 PRINT "                                END TEST."
+ 380 PRINT
+ 390 PRINT "END PROGRAM 69"
+ 400 END
- 300: error: index out of range B(...,13)
', tests/integration.rs:37:13

---- P067 stdout ----
thread 'P067' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 OPTION BASE 1\n220 FOR I=3 TO -2 STEP -1\n230   PRINT \"ABOUT TO ASSIGN TO A(\";I;\").\";\n240   IF I>0 THEN 270\n250   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n260   GOTO 280\n270   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n280   LET A(I) = 20 - I\n290   PRINT \"HAVE ASSIGNED \";20-I;\" TO A(\";I;\").\"\n300   IF I>0 THEN 320\n310   PRINT \"ASSIGNMENT TO SUBSCRIPT < 1 - *** TEST FAILS ***\"\n320   PRINT\n330 NEXT I\n340 PRINT\n350 PRINT \"                                END TEST.\"\n360 PRINT\n370 PRINT \"END PROGRAM 67\"\n380 END\n"`,
 right: `"280: error: index out of range A(0)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 OPTION BASE 1
+ 220 FOR I=3 TO -2 STEP -1
+ 230   PRINT "ABOUT TO ASSIGN TO A(";I;").";
+ 240   IF I>0 THEN 270
+ 250   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 260   GOTO 280
+ 270   PRINT " ASSIGNMENT SHOULD BE OK."
+ 280   LET A(I) = 20 - I
+ 290   PRINT "HAVE ASSIGNED ";20-I;" TO A(";I;")."
+ 300   IF I>0 THEN 320
+ 310   PRINT "ASSIGNMENT TO SUBSCRIPT < 1 - *** TEST FAILS ***"
+ 320   PRINT
+ 330 NEXT I
+ 340 PRINT
+ 350 PRINT "                                END TEST."
+ 360 PRINT
+ 370 PRINT "END PROGRAM 67"
+ 380 END
- 280: error: index out of range A(0)
', tests/integration.rs:37:13

---- P071 stdout ----
thread 'P071' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 OPTION BASE 0\n220 DIM B(11,3)\n230 PRINT\n240 FOR I=3 TO -2 STEP -1\n250   PRINT \"ABOUT TO ASSIGN TO B(\";I;\",3).\";\n260   IF I>-1 THEN 290\n270   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n280   GOTO 300\n290   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n300   LET B(I,3) = 20 - I\n310   PRINT \"HAVE ASSIGNED \";20-I;\" TO B(\";I;\",3).\"\n320   IF I>-1 THEN 340\n330   PRINT \"ASSIGNMENT TO SUBSCRIPT < 0 - *** TEST FAILS ***\"\n340   PRINT\n350 NEXT I\n360 PRINT\n370 PRINT \"                                END TEST.\"\n380 PRINT\n390 PRINT \"END PROGRAM 71\"\n400 END\n"`,
 right: `"300: error: index out of range B(-1,...)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 OPTION BASE 0
+ 220 DIM B(11,3)
+ 230 PRINT
+ 240 FOR I=3 TO -2 STEP -1
+ 250   PRINT "ABOUT TO ASSIGN TO B(";I;",3).";
+ 260   IF I>-1 THEN 290
+ 270   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 280   GOTO 300
+ 290   PRINT " ASSIGNMENT SHOULD BE OK."
+ 300   LET B(I,3) = 20 - I
+ 310   PRINT "HAVE ASSIGNED ";20-I;" TO B(";I;",3)."
+ 320   IF I>-1 THEN 340
+ 330   PRINT "ASSIGNMENT TO SUBSCRIPT < 0 - *** TEST FAILS ***"
+ 340   PRINT
+ 350 NEXT I
+ 360 PRINT
+ 370 PRINT "                                END TEST."
+ 380 PRINT
+ 390 PRINT "END PROGRAM 71"
+ 400 END
- 300: error: index out of range B(-1,...)
', tests/integration.rs:37:13

---- P068 stdout ----
thread 'P068' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 OPTION BASE 1\n220 DIM A(7)\n230 PRINT\n240 FOR I=5 TO 9\n250   PRINT \"ABOUT TO ASSIGN TO A(\";I;\"). \";\n260   IF I<8 THEN 290\n270   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n280   GOTO 300\n290   PRINT \"ASSIGNMENT SHOULD BE OK.\"\n300   LET A(I) = 20 - I\n310   PRINT \"HAVE ASSIGNED \";20-I;\" TO A(\";I;\").\"\n320   IF I<8 THEN 340\n330   PRINT \"ASSIGNMENT TO SUBSCRIPT > 7 - *** TEST FAILS ***\"\n340   PRINT\n350 NEXT I\n360 PRINT\n370 PRINT \"                                END TEST.\"\n380 PRINT\n390 PRINT \"END PROGRAM 68\"\n400 END\n"`,
 right: `"300: error: index out of range A(8)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 OPTION BASE 1
+ 220 DIM A(7)
+ 230 PRINT
+ 240 FOR I=5 TO 9
+ 250   PRINT "ABOUT TO ASSIGN TO A(";I;"). ";
+ 260   IF I<8 THEN 290
+ 270   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 280   GOTO 300
+ 290   PRINT "ASSIGNMENT SHOULD BE OK."
+ 300   LET A(I) = 20 - I
+ 310   PRINT "HAVE ASSIGNED ";20-I;" TO A(";I;")."
+ 320   IF I<8 THEN 340
+ 330   PRINT "ASSIGNMENT TO SUBSCRIPT > 7 - *** TEST FAILS ***"
+ 340   PRINT
+ 350 NEXT I
+ 360 PRINT
+ 370 PRINT "                                END TEST."
+ 380 PRINT
+ 390 PRINT "END PROGRAM 68"
+ 400 END
- 300: error: index out of range A(8)
', tests/integration.rs:37:13

---- P072 stdout ----
thread 'P072' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 OPTION BASE 1\n240 DIM B(12,4)\n250 FOR I=4 TO -2 STEP -1\n260   PRINT \"ABOUT TO ASSIGN TO B(12,\";I;\").\";\n270   IF I>0 THEN 300\n280   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n290   GOTO 310\n300   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n310   LET B(12,I)=10-I\n320   PRINT \"HAVE ASSIGNED \";10-I;\" TO B(12,\";I;\").\"\n330   IF I>0 THEN 350\n340   PRINT \"ASSIGNMENT TO SUBSCRIPT < 1 - *** TEST FAILS ***\"\n350   PRINT\n360 NEXT I\n370 PRINT\n380 PRINT \"                                END TEST.\"\n390 PRINT\n400 PRINT \"END PROGRAM 72\"\n410 END\n"`,
 right: `"310: error: index out of range B(...,0)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 OPTION BASE 1
+ 240 DIM B(12,4)
+ 250 FOR I=4 TO -2 STEP -1
+ 260   PRINT "ABOUT TO ASSIGN TO B(12,";I;").";
+ 270   IF I>0 THEN 300
+ 280   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 290   GOTO 310
+ 300   PRINT " ASSIGNMENT SHOULD BE OK."
+ 310   LET B(12,I)=10-I
+ 320   PRINT "HAVE ASSIGNED ";10-I;" TO B(12,";I;")."
+ 330   IF I>0 THEN 350
+ 340   PRINT "ASSIGNMENT TO SUBSCRIPT < 1 - *** TEST FAILS ***"
+ 350   PRINT
+ 360 NEXT I
+ 370 PRINT
+ 380 PRINT "                                END TEST."
+ 390 PRINT
+ 400 PRINT "END PROGRAM 72"
+ 410 END
- 310: error: index out of range B(...,0)
', tests/integration.rs:37:13

---- P070 stdout ----
thread 'P070' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 OPTION BASE 0\n220 FOR I=3 TO -2 STEP -1\n230   PRINT \"ABOUT TO ASSIGN TO A(\";I;\").\";\n240   IF I>-1 THEN 270\n250   PRINT \"*** EXCEPTION SHOULD OCCUR NOW ***\"\n260   GOTO 280\n270   PRINT \" ASSIGNMENT SHOULD BE OK.\"\n280   LET A(I) = 20 - I\n290   PRINT \"HAVE ASSIGNED \";20-I;\" TO A(\";I;\").\"\n300   IF I>-1 THEN 320\n310   PRINT \"ASSIGNMENT TO SUBSCRIPT < 0 - *** TEST FAILS ***\"\n320   PRINT\n330 NEXT I\n340 PRINT\n350 PRINT \"                                END TEST.\"\n360 PRINT\n370 PRINT \"END PROGRAM 70\"\n380 END\n"`,
 right: `"280: error: index out of range A(-1)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 OPTION BASE 0
+ 220 FOR I=3 TO -2 STEP -1
+ 230   PRINT "ABOUT TO ASSIGN TO A(";I;").";
+ 240   IF I>-1 THEN 270
+ 250   PRINT "*** EXCEPTION SHOULD OCCUR NOW ***"
+ 260   GOTO 280
+ 270   PRINT " ASSIGNMENT SHOULD BE OK."
+ 280   LET A(I) = 20 - I
+ 290   PRINT "HAVE ASSIGNED ";20-I;" TO A(";I;")."
+ 300   IF I>-1 THEN 320
+ 310   PRINT "ASSIGNMENT TO SUBSCRIPT < 0 - *** TEST FAILS ***"
+ 320   PRINT
+ 330 NEXT I
+ 340 PRINT
+ 350 PRINT "                                END TEST."
+ 360 PRINT
+ 370 PRINT "END PROGRAM 70"
+ 380 END
- 280: error: index out of range A(-1)
', tests/integration.rs:37:13

---- P050 stdout ----
thread 'P050' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 FOR I=1 TO 5\n240 PRINT \"CONTROL-VARIABLE = \";I\n310 PRINT\n320 PRINT \"                                END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 50\"\n350 END\n"`,
 right: `"230: error: FOR without NEXT \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 FOR I=1 TO 5
+ 240 PRINT "CONTROL-VARIABLE = ";I
+ 310 PRINT
+ 320 PRINT "                                END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 50"
+ 350 END
- 230: error: FOR without NEXT 
', tests/integration.rs:37:13

---- P073 stdout ----
thread 'P073' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 OPTION BASE 1\n280 DIM A(0)\n300 PRINT \"TO HELP IN CHECKING INTERPRETATION, YOU MAY ENTER\"\n310 PRINT \"VALUES TO BE USED AS SUBSCRIPTS ON THE ARRAY. THE PROGRAM\"\n320 PRINT \"WILL ASSIGN THE VALUE 777 TO THE INDICATED ELEMENT AND\"\n330 PRINT \"THEN ECHO THE RESULT. IN THIS WAY YOU CAN CHECK WHICH\"\n340 PRINT \"SUBSCRIPTS (0 OR 1) ARE WITHIN THE ARRAY AND WHICH CAUSE\"\n350 PRINT \"EXCEPTIONS. ENTER 100 WHEN YOU WISH TO STOP.\"\n360 PRINT\n370 PRINT \"ENTER VALUE TO BE USED AS SUBSCRIPT\"\n380 INPUT I\n390 IF I=100 THEN 440\n400 LET A(I)=777\n410 PRINT \"A(\";I;\") = \";A(I)\n420 PRINT\n430 GOTO 370\n440 PRINT\n450 PRINT \"               END TEST\"\n460 PRINT\n470 PRINT \"END PROGRAM 73\"\n480 END\n"`,
 right: `"280: error: invalid DIM subscript \n DIM A(0)\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 OPTION BASE 1
+ 280 DIM A(0)
+ 300 PRINT "TO HELP IN CHECKING INTERPRETATION, YOU MAY ENTER"
+ 310 PRINT "VALUES TO BE USED AS SUBSCRIPTS ON THE ARRAY. THE PROGRAM"
+ 320 PRINT "WILL ASSIGN THE VALUE 777 TO THE INDICATED ELEMENT AND"
+ 330 PRINT "THEN ECHO THE RESULT. IN THIS WAY YOU CAN CHECK WHICH"
+ 340 PRINT "SUBSCRIPTS (0 OR 1) ARE WITHIN THE ARRAY AND WHICH CAUSE"
+ 350 PRINT "EXCEPTIONS. ENTER 100 WHEN YOU WISH TO STOP."
+ 360 PRINT
+ 370 PRINT "ENTER VALUE TO BE USED AS SUBSCRIPT"
+ 380 INPUT I
+ 390 IF I=100 THEN 440
+ 400 LET A(I)=777
+ 410 PRINT "A(";I;") = ";A(I)
+ 420 PRINT
+ 430 GOTO 370
+ 440 PRINT
+ 450 PRINT "               END TEST"
+ 460 PRINT
+ 470 PRINT "END PROGRAM 73"
+ 480 END
- 280: error: invalid DIM subscript 
-  DIM A(0)
-        ^
', tests/integration.rs:37:13

---- P074 stdout ----
thread 'P074' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 DIM A(150)\n240 FOR I=0 TO 10\n250 FOR J=0 TO 10\n260 LET A(I,J)=10000+(100*I)+J\n270 NEXT J\n280 NEXT I\n300 PRINT \"VARIABLE A(I,J) WAS ASSIGNED 10000+(100*I)+J.\"\n310 PRINT \"RESULTS BELOW:\"\n320 PRINT\n330 PRINT \"ARRAY VALUES FOR A(I,J):\"\n340 PRINT \"EACH LINE HAS ALL THE ELEMENTS FOR A GIVEN VALUE OF I,\"\n350 PRINT \"WITH J GOING FROM 0 TO 10.\"\n360 PRINT\n370 FOR I = 0 TO 10\n380 PRINT \"I=\";I;\":\";\n390 FOR J=0 TO 10\n400 PRINT A(I,J);\n410 NEXT J\n420 PRINT\n430 NEXT I\n440 PRINT\n450 PRINT \"               END TEST\"\n460 PRINT\n470 PRINT \"END PROGRAM 74\"\n480 END\n"`,
 right: `"260: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n LET A(I,J)=10000+(100*I)+J\n     ^\n400: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n PRINT A(I,J);\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 DIM A(150)
+ 240 FOR I=0 TO 10
+ 250 FOR J=0 TO 10
+ 260 LET A(I,J)=10000+(100*I)+J
+ 270 NEXT J
+ 280 NEXT I
+ 300 PRINT "VARIABLE A(I,J) WAS ASSIGNED 10000+(100*I)+J."
+ 310 PRINT "RESULTS BELOW:"
+ 320 PRINT
+ 330 PRINT "ARRAY VALUES FOR A(I,J):"
+ 340 PRINT "EACH LINE HAS ALL THE ELEMENTS FOR A GIVEN VALUE OF I,"
+ 350 PRINT "WITH J GOING FROM 0 TO 10."
+ 360 PRINT
+ 370 FOR I = 0 TO 10
+ 380 PRINT "I=";I;":";
+ 390 FOR J=0 TO 10
+ 400 PRINT A(I,J);
+ 410 NEXT J
+ 420 PRINT
+ 430 NEXT I
+ 440 PRINT
+ 450 PRINT "               END TEST"
+ 460 PRINT
+ 470 PRINT "END PROGRAM 74"
+ 480 END
- 260: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  LET A(I,J)=10000+(100*I)+J
-      ^
- 400: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  PRINT A(I,J);
-        ^
', tests/integration.rs:37:13

---- P075 stdout ----
thread 'P075' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 DIM A(47)\n240 LET A=777\n300 PRINT \"VARIABLE A WAS ASSIGNED 777. RESULTS BELOW:\"\n320 PRINT\n400 PRINT \"VARIABLE A = \";A\n440 PRINT\n450 PRINT \"               END TEST\"\n460 PRINT\n470 PRINT \"END PROGRAM 75\"\n480 END\n"`,
 right: `"240: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n LET A=777\n     ^\n400: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n PRINT \"VARIABLE A = \";A\n                       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 DIM A(47)
+ 240 LET A=777
+ 300 PRINT "VARIABLE A WAS ASSIGNED 777. RESULTS BELOW:"
+ 320 PRINT
+ 400 PRINT "VARIABLE A = ";A
+ 440 PRINT
+ 450 PRINT "               END TEST"
+ 460 PRINT
+ 470 PRINT "END PROGRAM 75"
+ 480 END
- 240: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  LET A=777
-      ^
- 400: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  PRINT "VARIABLE A = ";A
-                        ^
', tests/integration.rs:37:13

---- P076 stdout ----
thread 'P076' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 DIM A(3,5)\n240 FOR I=0 TO 10\n250 LET A(I)=111*I+5000\n260 NEXT I\n280 PRINT \"VARIABLE A(I) WAS ASSIGNED 111*I + 5000.\"\n290 PRINT \"RESULTS BELOW:\"\n300 PRINT\n310 FOR I=0 TO 10\n320 PRINT \"A(\";I;\") = \";A(I)\n330 NEXT I\n340 PRINT\n350 PRINT \"               END TEST\"\n360 PRINT\n370 PRINT \"END PROGRAM 76\"\n380 END\n"`,
 right: `"250: error: type mismatch for variable A\n info: it was previously used or DIM as a two-dimension array\n LET A(I)=111*I+5000\n     ^\n320: error: type mismatch for variable A\n info: it was previously used or DIM as a two-dimension array\n PRINT \"A(\";I;\") = \";A(I)\n                     ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 DIM A(3,5)
+ 240 FOR I=0 TO 10
+ 250 LET A(I)=111*I+5000
+ 260 NEXT I
+ 280 PRINT "VARIABLE A(I) WAS ASSIGNED 111*I + 5000."
+ 290 PRINT "RESULTS BELOW:"
+ 300 PRINT
+ 310 FOR I=0 TO 10
+ 320 PRINT "A(";I;") = ";A(I)
+ 330 NEXT I
+ 340 PRINT
+ 350 PRINT "               END TEST"
+ 360 PRINT
+ 370 PRINT "END PROGRAM 76"
+ 380 END
- 250: error: type mismatch for variable A
-  info: it was previously used or DIM as a two-dimension array
-  LET A(I)=111*I+5000
-      ^
- 320: error: type mismatch for variable A
-  info: it was previously used or DIM as a two-dimension array
-  PRINT "A(";I;") = ";A(I)
-                      ^
', tests/integration.rs:37:13

---- P077 stdout ----
thread 'P077' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 FOR I=0 TO 10\n240 LET A(I)=111*I+5000\n250 NEXT I\n270 PRINT \"VARIABLE A(I) WAS ASSIGNED 111*I + 5000,\"\n280 PRINT \"AND SIMPLE VARIABLE A WAS ASSIGNED 777.\"\n290 PRINT \"RESULTS BELOW:\"\n300 PRINT\n310 PRINT \"A = \";A\n320 IF A=777 THEN 350\n330 PRINT\n340 PRINT \"***** ORIGINAL VALUE OF A WAS LOST *****\"\n350 PRINT\n360 LET C=0\n370 FOR I = 0 TO 10\n380 PRINT \"A(\";I;\") = \";A(I)\n390 IF A(I)=111*I+5000 THEN 410\n400 LET C=9\n410 NEXT I\n420 IF C=0 THEN 450\n430 PRINT\n440 PRINT \"***** SOME VALUES IN ARRAY WERE LOST *****\"\n450 PRINT\n460 PRINT \"               END TEST\"\n470 PRINT\n480 PRINT \"END PROGRAM 77\"\n490 END\n"`,
 right: `"240: error: type mismatch for variable A\n info: it was previously used as a numeric variable\n LET A(I)=111*I+5000\n     ^\n380: error: type mismatch for variable A\n info: it was previously used as a numeric variable\n PRINT \"A(\";I;\") = \";A(I)\n                     ^\n390: error: type mismatch for variable A\n info: it was previously used as a numeric variable\n IF A(I)=111*I+5000 THEN 410\n    ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 FOR I=0 TO 10
+ 240 LET A(I)=111*I+5000
+ 250 NEXT I
+ 270 PRINT "VARIABLE A(I) WAS ASSIGNED 111*I + 5000,"
+ 280 PRINT "AND SIMPLE VARIABLE A WAS ASSIGNED 777."
+ 290 PRINT "RESULTS BELOW:"
+ 300 PRINT
+ 310 PRINT "A = ";A
+ 320 IF A=777 THEN 350
+ 330 PRINT
+ 340 PRINT "***** ORIGINAL VALUE OF A WAS LOST *****"
+ 350 PRINT
+ 360 LET C=0
+ 370 FOR I = 0 TO 10
+ 380 PRINT "A(";I;") = ";A(I)
+ 390 IF A(I)=111*I+5000 THEN 410
+ 400 LET C=9
+ 410 NEXT I
+ 420 IF C=0 THEN 450
+ 430 PRINT
+ 440 PRINT "***** SOME VALUES IN ARRAY WERE LOST *****"
+ 450 PRINT
+ 460 PRINT "               END TEST"
+ 470 PRINT
+ 480 PRINT "END PROGRAM 77"
+ 490 END
- 240: error: type mismatch for variable A
-  info: it was previously used as a numeric variable
-  LET A(I)=111*I+5000
-      ^
- 380: error: type mismatch for variable A
-  info: it was previously used as a numeric variable
-  PRINT "A(";I;") = ";A(I)
-                      ^
- 390: error: type mismatch for variable A
-  info: it was previously used as a numeric variable
-  IF A(I)=111*I+5000 THEN 410
-     ^
', tests/integration.rs:37:13

---- P080 stdout ----
thread 'P080' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 OPTION BASE 1\n260 OPTION BASE 0\n340 PRINT \"YOU MAY WISH TO REVERSE THE ORDER OF THE OPTION\"\n350 PRINT \"STATEMENTS IN THE SOURCE CODE TO TEST PROCESSOR\"\n360 PRINT \"INTERPRETATION.\"\n370 PRINT\n380 PRINT \"ABOUT TO EXECUTE \'LET A(0) = 777\'\"\n410 LET A(0)=777\n420 PRINT \"A(\";I;\") = \";A(I)\n430 PRINT\n460 PRINT \"              END TEST\"\n470 PRINT\n480 PRINT \"END PROGRAM 80\"\n490 END\n"`,
 right: `"260: error: OPTION redeclared \n OPTION BASE 0\n ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 OPTION BASE 1
+ 260 OPTION BASE 0
+ 340 PRINT "YOU MAY WISH TO REVERSE THE ORDER OF THE OPTION"
+ 350 PRINT "STATEMENTS IN THE SOURCE CODE TO TEST PROCESSOR"
+ 360 PRINT "INTERPRETATION."
+ 370 PRINT
+ 380 PRINT "ABOUT TO EXECUTE 'LET A(0) = 777'"
+ 410 LET A(0)=777
+ 420 PRINT "A(";I;") = ";A(I)
+ 430 PRINT
+ 460 PRINT "              END TEST"
+ 470 PRINT
+ 480 PRINT "END PROGRAM 80"
+ 490 END
- 260: error: OPTION redeclared 
-  OPTION BASE 0
-  ^
', tests/integration.rs:37:13

---- P083 stdout ----
thread 'P083' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n400 LET A(6)=777\n410 PRINT \"A(6) = \";A(6)\n440 PRINT\n450 PRINT \"               END TEST\"\n460 PRINT\n470 PRINT \"END PROGRAM 83\"\n480 STOP\n490 DIM A(5)\n500 END\n"`,
 right: `"490: error: redimensioned variable A\n DIM A(5)\n     ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 400 LET A(6)=777
+ 410 PRINT "A(6) = ";A(6)
+ 440 PRINT
+ 450 PRINT "               END TEST"
+ 460 PRINT
+ 470 PRINT "END PROGRAM 83"
+ 480 STOP
+ 490 DIM A(5)
+ 500 END
- 490: error: redimensioned variable A
-  DIM A(5)
-      ^
', tests/integration.rs:37:13

---- P078 stdout ----
thread 'P078' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 FOR I=0 TO 10\n230 LET A(I)=11*I+5000\n240 NEXT I\n250 FOR I=0 TO 10\n260 FOR J=0 TO 10\n270 LET A(I,J)=10000+(100*I)+J\n280 NEXT J\n290 NEXT I\n310 PRINT \"VARIABLE A(I) WAS ASSIGNED 11*I + 5000,\"\n320 PRINT \"AND VARIABLE A(I,J) WAS ASSIGNED 10000+(100*I)+J.\"\n330 PRINT \"RESULTS BELOW:\"\n340 PRINT\n350 PRINT \"ARRAY VALUES FOR A(I,J):\"\n360 PRINT \"EACH LINE HAS ALL THE ELEMENTS FOR A GIVEN VALUE OF I,\"\n370 PRINT \"WITH J GOING FROM 0 TO 10.\"\n380 PRINT\n390 LET C1=0\n400 LET C2=0\n410 FOR I = 0 TO 10\n420 PRINT \"I=\";I;\":\";\n430 FOR J=0 TO 10\n440 PRINT A(I,J);\n450 IF A(I,J)=10000+(100*I)+J THEN 470\n460 LET C2=9\n470 NEXT J\n480 PRINT\n490 NEXT I\n500 PRINT\n510 PRINT \"ARRAY VALUES FOR A(I):\"\n520 PRINT\n530 FOR I = 0 TO 10\n540 PRINT \"A(\";I;\") = \";A(I)\n550 IF A(I)=11*I+5000 THEN 570\n560 LET C1=9\n570 NEXT I\n580 IF C1=0 THEN 610\n590 PRINT\n600 PRINT \"***** SOME VALUES IN ONE-DIMENSIONAL ARRAY WERE LOST *****\"\n610 IF C2=0 THEN 640\n620 PRINT\n630 PRINT \"***** SOME VALUES IN TWO-DIMENSIONAL ARRAY WERE LOST *****\"\n640 PRINT\n650 PRINT \"               END TEST\"\n660 PRINT\n670 PRINT \"END PROGRAM 78\"\n680 END\n"`,
 right: `"270: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n LET A(I,J)=10000+(100*I)+J\n     ^\n440: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n PRINT A(I,J);\n       ^\n450: error: type mismatch for variable A\n info: it was previously used or DIM as a one-dimension array\n IF A(I,J)=10000+(100*I)+J THEN 470\n    ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 FOR I=0 TO 10
+ 230 LET A(I)=11*I+5000
+ 240 NEXT I
+ 250 FOR I=0 TO 10
+ 260 FOR J=0 TO 10
+ 270 LET A(I,J)=10000+(100*I)+J
+ 280 NEXT J
+ 290 NEXT I
+ 310 PRINT "VARIABLE A(I) WAS ASSIGNED 11*I + 5000,"
+ 320 PRINT "AND VARIABLE A(I,J) WAS ASSIGNED 10000+(100*I)+J."
+ 330 PRINT "RESULTS BELOW:"
+ 340 PRINT
+ 350 PRINT "ARRAY VALUES FOR A(I,J):"
+ 360 PRINT "EACH LINE HAS ALL THE ELEMENTS FOR A GIVEN VALUE OF I,"
+ 370 PRINT "WITH J GOING FROM 0 TO 10."
+ 380 PRINT
+ 390 LET C1=0
+ 400 LET C2=0
+ 410 FOR I = 0 TO 10
+ 420 PRINT "I=";I;":";
+ 430 FOR J=0 TO 10
+ 440 PRINT A(I,J);
+ 450 IF A(I,J)=10000+(100*I)+J THEN 470
+ 460 LET C2=9
+ 470 NEXT J
+ 480 PRINT
+ 490 NEXT I
+ 500 PRINT
+ 510 PRINT "ARRAY VALUES FOR A(I):"
+ 520 PRINT
+ 530 FOR I = 0 TO 10
+ 540 PRINT "A(";I;") = ";A(I)
+ 550 IF A(I)=11*I+5000 THEN 570
+ 560 LET C1=9
+ 570 NEXT I
+ 580 IF C1=0 THEN 610
+ 590 PRINT
+ 600 PRINT "***** SOME VALUES IN ONE-DIMENSIONAL ARRAY WERE LOST *****"
+ 610 IF C2=0 THEN 640
+ 620 PRINT
+ 630 PRINT "***** SOME VALUES IN TWO-DIMENSIONAL ARRAY WERE LOST *****"
+ 640 PRINT
+ 650 PRINT "               END TEST"
+ 660 PRINT
+ 670 PRINT "END PROGRAM 78"
+ 680 END
- 270: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  LET A(I,J)=10000+(100*I)+J
-      ^
- 440: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  PRINT A(I,J);
-        ^
- 450: error: type mismatch for variable A
-  info: it was previously used or DIM as a one-dimension array
-  IF A(I,J)=10000+(100*I)+J THEN 470
-     ^
', tests/integration.rs:37:13

---- P081 stdout ----
thread 'P081' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 DIM A(5)\n280 OPTION BASE 1\n290 PRINT \"TO HELP IN CHECKING INTERPRETATION, YOU MAY ENTER\"\n300 PRINT \"VALUES TO BE USED AS SUBSCRIPTS ON THE ARRAY. THE PROGRAM\"\n310 PRINT \"WILL ASSIGN THE VALUE 777 TO THE INDICATED ELEMENT AND\"\n320 PRINT \"THEN ECHO THE RESULT. IN THIS WAY YOU CAN CHECK WHICH\"\n330 PRINT \"SUBSCRIPTS ARE WITHIN THE ARRAY AND WHICH CAUSE EXCEPTIONS.\"\n340 PRINT \"THE ARRAY IS SET WITH \'DIM A(5)\', FOLLOWED BY OPTION BASE 1.\"\n350 PRINT \"YOU SHOULD AT LEAST TEST SUBSCRIPT VALUES OF ZERO\"\n360 PRINT \"AND SIX.  THE ARRAY HAS BEEN DIMENSIONED AS A(5).\"\n370 PRINT\n380 PRINT \"ENTER 100 WHEN YOU WISH TO STOP.\"\n390 PRINT\n400 PRINT \"ENTER VALUE TO BE USED AS SUBSCRIPT:\"\n410 INPUT I\n420 IF I=100 THEN 470\n430 LET A(I)=777\n440 PRINT \"A(\";I;\") = \";A(I)\n450 PRINT\n460 GOTO 400\n470 PRINT\n480 PRINT \"               END TEST\"\n490 PRINT\n500 PRINT \"END PROGRAM 81\"\n510 END\n"`,
 right: `"280: error: OPTION used after arrays used or DIM \n OPTION BASE 1\n ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 DIM A(5)
+ 280 OPTION BASE 1
+ 290 PRINT "TO HELP IN CHECKING INTERPRETATION, YOU MAY ENTER"
+ 300 PRINT "VALUES TO BE USED AS SUBSCRIPTS ON THE ARRAY. THE PROGRAM"
+ 310 PRINT "WILL ASSIGN THE VALUE 777 TO THE INDICATED ELEMENT AND"
+ 320 PRINT "THEN ECHO THE RESULT. IN THIS WAY YOU CAN CHECK WHICH"
+ 330 PRINT "SUBSCRIPTS ARE WITHIN THE ARRAY AND WHICH CAUSE EXCEPTIONS."
+ 340 PRINT "THE ARRAY IS SET WITH 'DIM A(5)', FOLLOWED BY OPTION BASE 1."
+ 350 PRINT "YOU SHOULD AT LEAST TEST SUBSCRIPT VALUES OF ZERO"
+ 360 PRINT "AND SIX.  THE ARRAY HAS BEEN DIMENSIONED AS A(5)."
+ 370 PRINT
+ 380 PRINT "ENTER 100 WHEN YOU WISH TO STOP."
+ 390 PRINT
+ 400 PRINT "ENTER VALUE TO BE USED AS SUBSCRIPT:"
+ 410 INPUT I
+ 420 IF I=100 THEN 470
+ 430 LET A(I)=777
+ 440 PRINT "A(";I;") = ";A(I)
+ 450 PRINT
+ 460 GOTO 400
+ 470 PRINT
+ 480 PRINT "               END TEST"
+ 490 PRINT
+ 500 PRINT "END PROGRAM 81"
+ 510 END
- 280: error: OPTION used after arrays used or DIM 
-  OPTION BASE 1
-  ^
', tests/integration.rs:37:13

---- P079 stdout ----
thread 'P079' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 FOR I=0 TO 10\n240 LET A9(I)=111*I+5000\n250 NEXT I\n270 PRINT \"VARIABLE A9(I) WAS ASSIGNED 111*I + 5000.\"\n290 PRINT \"RESULTS BELOW:\"\n300 PRINT\n360 LET C=0\n370 FOR I = 0 TO 10\n380 PRINT \"A9(\";I;\") = \";A9(I)\n390 IF A9(I)=111*I+5000 THEN 410\n400 LET C=9\n410 NEXT I\n420 IF C=0 THEN 450\n430 PRINT\n440 PRINT \"***** SOME VALUES IN ARRAY WERE LOST *****\"\n450 PRINT\n460 PRINT \"               END TEST\"\n470 PRINT\n480 PRINT \"END PROGRAM 79\"\n490 END\n"`,
 right: `"240: error: numeric variable used as array A9\n LET A9(I)=111*I+5000\n     ^\n380: error: numeric variable used as array A9\n PRINT \"A9(\";I;\") = \";A9(I)\n                      ^\n390: error: numeric variable used as array A9\n IF A9(I)=111*I+5000 THEN 410\n    ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 FOR I=0 TO 10
+ 240 LET A9(I)=111*I+5000
+ 250 NEXT I
+ 270 PRINT "VARIABLE A9(I) WAS ASSIGNED 111*I + 5000."
+ 290 PRINT "RESULTS BELOW:"
+ 300 PRINT
+ 360 LET C=0
+ 370 FOR I = 0 TO 10
+ 380 PRINT "A9(";I;") = ";A9(I)
+ 390 IF A9(I)=111*I+5000 THEN 410
+ 400 LET C=9
+ 410 NEXT I
+ 420 IF C=0 THEN 450
+ 430 PRINT
+ 440 PRINT "***** SOME VALUES IN ARRAY WERE LOST *****"
+ 450 PRINT
+ 460 PRINT "               END TEST"
+ 470 PRINT
+ 480 PRINT "END PROGRAM 79"
+ 490 END
- 240: error: numeric variable used as array A9
-  LET A9(I)=111*I+5000
-      ^
- 380: error: numeric variable used as array A9
-  PRINT "A9(";I;") = ";A9(I)
-                       ^
- 390: error: numeric variable used as array A9
-  IF A9(I)=111*I+5000 THEN 410
-     ^
', tests/integration.rs:37:13

---- P082 stdout ----
thread 'P082' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n240 LET A(0) = 105\n250 OPTION BASE 1\n260 PRINT\n270 PRINT \"A(0) = \";A(0)\n280 PRINT\n290 PRINT \"               END TEST\"\n300 PRINT\n310 PRINT \"END PROGRAM 82\"\n320 END\n"`,
 right: `"250: error: OPTION used after arrays used or DIM \n OPTION BASE 1\n ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 240 LET A(0) = 105
+ 250 OPTION BASE 1
+ 260 PRINT
+ 270 PRINT "A(0) = ";A(0)
+ 280 PRINT
+ 290 PRINT "               END TEST"
+ 300 PRINT
+ 310 PRINT "END PROGRAM 82"
+ 320 END
- 250: error: OPTION used after arrays used or DIM 
-  OPTION BASE 1
-  ^
', tests/integration.rs:37:13

---- P088 stdout ----
thread 'P088' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n130 FOR I=1 TO 5\n140 REM 3RD DIGIT OF LINE NUMBER IS ITS POSITION IN LIST\n150 ON I  GOTO 221, 252, 213, 244, 235\n160 PRINT \"CONTROL FELL THROUGH ON-GOTO\"\n170 GOTO 280\n213 IF I=3 THEN 290\n218 LET K=3\n219 GOTO 270\n221 IF I=1 THEN 290\n228 LET K=1\n229 GOTO 270\n235 IF I=5 THEN 290\n238 LET K=5\n239 GOTO 270\n244 IF I=4 THEN 290\n248 LET K=4\n249 GOTO 270\n252 IF I=2 THEN 290\n258 LET K=2\n259 GOTO 270\n270 PRINT \"CONTROL WENT TO LINE #\";K;\" IN LIST EVEN THOUGH ON-GOTO\";\n275 PRINT \" EXPRESSION = \";I\n280 LET N=1\n290 NEXT I\n300 PRINT\n310 IF N=0 THEN 340\n320 PRINT \"***  TEST FAILED  ***\"\n330 GOTO 350\n340 PRINT \"***  TEST PASSED  ***\"\n350 PRINT\n360 PRINT \"                                 END TEST.\"\n370 PRINT\n375 PRINT\n380 PRINT \"SECTION 88.2: THE ON-GOTO EXPRESSION WITH FRACTIONAL VALUES.\"\n400 PRINT\n410 PRINT \"THIS SECTION TESTS THAT FRACTIONAL VALUES ARE ROUNDED\"\n420 PRINT \"TO THE NEAREST INTEGER BY THE ON-GOTO BEFORE SELECTION\"\n425 PRINT \"OF THE LINE-NUMBER FROM THE LIST.\"\n430 PRINT\n440 PRINT \"                               BEGIN TEST.\"\n450 PRINT\n500 LET N=0\n510 FOR I=0.6 TO 3.4 STEP .2\n530 ON I GOTO 600,700,800\n540 PRINT \"CONTROL FELL THROUGH ON-GOTO.\"\n550 GOTO 950\n600 LET K=1\n610 IF I<.5 THEN 900\n620 IF I>1.5 THEN 900\n630 GOTO 1000\n700 LET K=2\n710 IF I<1.5 THEN 900\n720 IF I>2.5 THEN 900\n730 GOTO 1000\n800 LET K=3\n810 IF I<2.5 THEN 900\n820 IF I>3.5 THEN 900\n830 GOTO 1000\n900 PRINT \"CONTROL WENT TO LINE #\";K;\" IN LIST, BUT ON-GOTO\";\n910 PRINT \" EXPRESSION = \";I\n950 LET N=1\n1000 NEXT I\n1010 PRINT\n1020 IF N=0 THEN 1050\n1030 PRINT \"***  TEST FAILED  ***\"\n1040 GOTO 1060\n1050 PRINT \"***  TEST PASSED  ***\"\n1060 PRINT\n1070 PRINT \"                                END TEST.\"\n1260 PRINT\n1270 PRINT \"END PROGRAM 88\"\n1280 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 130 FOR I=1 TO 5
+ 140 REM 3RD DIGIT OF LINE NUMBER IS ITS POSITION IN LIST
+ 150 ON I  GOTO 221, 252, 213, 244, 235
+ 160 PRINT "CONTROL FELL THROUGH ON-GOTO"
+ 170 GOTO 280
+ 213 IF I=3 THEN 290
+ 218 LET K=3
+ 219 GOTO 270
+ 221 IF I=1 THEN 290
+ 228 LET K=1
+ 229 GOTO 270
+ 235 IF I=5 THEN 290
+ 238 LET K=5
+ 239 GOTO 270
+ 244 IF I=4 THEN 290
+ 248 LET K=4
+ 249 GOTO 270
+ 252 IF I=2 THEN 290
+ 258 LET K=2
+ 259 GOTO 270
+ 270 PRINT "CONTROL WENT TO LINE #";K;" IN LIST EVEN THOUGH ON-GOTO";
+ 275 PRINT " EXPRESSION = ";I
+ 280 LET N=1
+ 290 NEXT I
+ 300 PRINT
+ 310 IF N=0 THEN 340
+ 320 PRINT "***  TEST FAILED  ***"
+ 330 GOTO 350
+ 340 PRINT "***  TEST PASSED  ***"
+ 350 PRINT
+ 360 PRINT "                                 END TEST."
+ 370 PRINT
+ 375 PRINT
+ 380 PRINT "SECTION 88.2: THE ON-GOTO EXPRESSION WITH FRACTIONAL VALUES."
+ 400 PRINT
+ 410 PRINT "THIS SECTION TESTS THAT FRACTIONAL VALUES ARE ROUNDED"
+ 420 PRINT "TO THE NEAREST INTEGER BY THE ON-GOTO BEFORE SELECTION"
+ 425 PRINT "OF THE LINE-NUMBER FROM THE LIST."
+ 430 PRINT
+ 440 PRINT "                               BEGIN TEST."
+ 450 PRINT
+ 500 LET N=0
+ 510 FOR I=0.6 TO 3.4 STEP .2
+ 530 ON I GOTO 600,700,800
+ 540 PRINT "CONTROL FELL THROUGH ON-GOTO."
+ 550 GOTO 950
+ 600 LET K=1
+ 610 IF I<.5 THEN 900
+ 620 IF I>1.5 THEN 900
+ 630 GOTO 1000
+ 700 LET K=2
+ 710 IF I<1.5 THEN 900
+ 720 IF I>2.5 THEN 900
+ 730 GOTO 1000
+ 800 LET K=3
+ 810 IF I<2.5 THEN 900
+ 820 IF I>3.5 THEN 900
+ 830 GOTO 1000
+ 900 PRINT "CONTROL WENT TO LINE #";K;" IN LIST, BUT ON-GOTO";
+ 910 PRINT " EXPRESSION = ";I
+ 950 LET N=1
+ 1000 NEXT I
+ 1010 PRINT
+ 1020 IF N=0 THEN 1050
+ 1030 PRINT "***  TEST FAILED  ***"
+ 1040 GOTO 1060
+ 1050 PRINT "***  TEST PASSED  ***"
+ 1060 PRINT
+ 1070 PRINT "                                END TEST."
+ 1260 PRINT
+ 1270 PRINT "END PROGRAM 88"
+ 1280 END
+ 
', tests/integration.rs:37:13

---- P086 stdout ----
thread 'P086' panicked at 'assertion failed: `(left == right)`
  left: `"320: error: unexpected return\n"`,
 right: `"320: error: stack underflow \n"`: 
Diff:
+ 320: error: unexpected return
- 320: error: stack underflow 
', tests/integration.rs:37:13

---- P084 stdout ----
thread 'P084' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n670 INPUT I\n680 IF I=1 THEN 730\n690 IF I=2 THEN 770\n700 IF I=3 THEN 770\n710 PRINT \"INVALID RESPONSE - RE-ENTER.\"\n720 GOTO 650\n730 DIM A(12)\n740 IF I=1 THEN 770\n750 LET A(S)=7\n760 GOTO 810\n770 DIM A(14)\n780 IF I=1 THEN 750\n790 IF I=2 THEN 730\n800 LET A(S)=8\n810 PRINT\n820 PRINT\n830 PRINT \"                END TEST\"\n840 PRINT\n850 PRINT \"END PROGRAM 84\"\n860 END\n"`,
 right: `"770: error: redimensioned variable A\n DIM A(14)\n     ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 670 INPUT I
+ 680 IF I=1 THEN 730
+ 690 IF I=2 THEN 770
+ 700 IF I=3 THEN 770
+ 710 PRINT "INVALID RESPONSE - RE-ENTER."
+ 720 GOTO 650
+ 730 DIM A(12)
+ 740 IF I=1 THEN 770
+ 750 LET A(S)=7
+ 760 GOTO 810
+ 770 DIM A(14)
+ 780 IF I=1 THEN 750
+ 790 IF I=2 THEN 730
+ 800 LET A(S)=8
+ 810 PRINT
+ 820 PRINT
+ 830 PRINT "                END TEST"
+ 840 PRINT
+ 850 PRINT "END PROGRAM 84"
+ 860 END
- 770: error: redimensioned variable A
-  DIM A(14)
-      ^
', tests/integration.rs:37:13

---- P087 stdout ----
thread 'P087' panicked at 'assertion failed: `(left == right)`
  left: `"230: error: non-existing line number \n GOTO 285\n      ^\n"`,
 right: `"230: error: non-existing line number \n GOSUB 285\n       ^\n"`: 
Diff:
+  GOTO 285
+       ^
-  GOSUB 285
-        ^
', tests/integration.rs:37:13

---- P085 stdout ----
thread 'P085' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n1610 LET M(L9)=M0\n1620 LET I(L9)=I0\n1630 LET J(L9)=J0\n1640 IF I0=0 THEN 1670\n1650 IF I0=J0 THEN 1670\n1660 GOTO 1740\n1670 LET K0=1\n1680 REM RESTORE STATE\n1690 LET I0=I(L9)\n1700 LET J0=J(L9)\n1710 LET M0=M(L9)\n1720 LET L9=L9-1\n1730 RETURN\n1740 REM BIN(I0,J0)=BIN(I0,J0-1)+BIN(I0-1,J0-1)\n1750 LET J0=J0-1\n1760 GOSUB 1570\n1770 LET M0=K0\n1780 LET I0=I0-1\n1790 GOSUB 1570\n1800 LET K0=K0+M0\n1810 REM RESTORE STATE\n1820 LET I0=I(L9)\n1830 LET J0=J(L9)\n1840 LET M0=M(L9)\n1850 LET L9=L9-1\n1860 RETURN\n1900 PRINT\n1910 IF F=0 THEN 1940\n1920 PRINT \"***  TEST FAILED  ***\"\n1930 GOTO 1950\n1940 PRINT \"***  TEST PASSED  ***\"\n1950 PRINT\n2000 PRINT \"                  END TEST.\"\n2010 PRINT\n2020 PRINT\n2030 PRINT \"SECTION 85.3: GOSUB WITHOUT RETURN.\"\n2040 PRINT\n2050 PRINT \"THIS SECTION TESTS THAT PROGRAM EXECUTION MAY VALIDLY\"\n2060 PRINT \"TERMINATE EVEN THOUGH MORE GOSUBS HAVE BEEN EXECUTED \"\n2070 PRINT \"THAN RETURNS.\"\n2080 PRINT\n2090 PRINT \"                  BEGIN TEST.\"\n2100 PRINT\n2110 GOSUB 2200\n2120 PRINT \"***  TEST FAILED  ***\"\n2130 GOTO 2990\n2200 PRINT \"IF PROGRAM TERMINATES NORMALLY, THEN\"\n2220 PRINT \"***  TEST PASSED  ***\"\n2990 PRINT\n3000 PRINT \"                   END TEST.\"\n3010 PRINT\n3020 PRINT \"END PROGRAM 85\"\n4000 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 1610 LET M(L9)=M0
+ 1620 LET I(L9)=I0
+ 1630 LET J(L9)=J0
+ 1640 IF I0=0 THEN 1670
+ 1650 IF I0=J0 THEN 1670
+ 1660 GOTO 1740
+ 1670 LET K0=1
+ 1680 REM RESTORE STATE
+ 1690 LET I0=I(L9)
+ 1700 LET J0=J(L9)
+ 1710 LET M0=M(L9)
+ 1720 LET L9=L9-1
+ 1730 RETURN
+ 1740 REM BIN(I0,J0)=BIN(I0,J0-1)+BIN(I0-1,J0-1)
+ 1750 LET J0=J0-1
+ 1760 GOSUB 1570
+ 1770 LET M0=K0
+ 1780 LET I0=I0-1
+ 1790 GOSUB 1570
+ 1800 LET K0=K0+M0
+ 1810 REM RESTORE STATE
+ 1820 LET I0=I(L9)
+ 1830 LET J0=J(L9)
+ 1840 LET M0=M(L9)
+ 1850 LET L9=L9-1
+ 1860 RETURN
+ 1900 PRINT
+ 1910 IF F=0 THEN 1940
+ 1920 PRINT "***  TEST FAILED  ***"
+ 1930 GOTO 1950
+ 1940 PRINT "***  TEST PASSED  ***"
+ 1950 PRINT
+ 2000 PRINT "                  END TEST."
+ 2010 PRINT
+ 2020 PRINT
+ 2030 PRINT "SECTION 85.3: GOSUB WITHOUT RETURN."
+ 2040 PRINT
+ 2050 PRINT "THIS SECTION TESTS THAT PROGRAM EXECUTION MAY VALIDLY"
+ 2060 PRINT "TERMINATE EVEN THOUGH MORE GOSUBS HAVE BEEN EXECUTED "
+ 2070 PRINT "THAN RETURNS."
+ 2080 PRINT
+ 2090 PRINT "                  BEGIN TEST."
+ 2100 PRINT
+ 2110 GOSUB 2200
+ 2120 PRINT "***  TEST FAILED  ***"
+ 2130 GOTO 2990
+ 2200 PRINT "IF PROGRAM TERMINATES NORMALLY, THEN"
+ 2220 PRINT "***  TEST PASSED  ***"
+ 2990 PRINT
+ 3000 PRINT "                   END TEST."
+ 3010 PRINT
+ 3020 PRINT "END PROGRAM 85"
+ 4000 END
+ 
', tests/integration.rs:37:13

---- P090 stdout ----
thread 'P090' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 ON X GOTO 210,230\n190 LET A$=\"Z\"\n200 GOTO 250\n210 LET A$=\"FIRST\"\n220 GOTO 250\n230 LET A$=\"SECOND\"\n240 GOTO 250\n250 IF A$=\"Z\" THEN 280\n260 PRINT \"ON GOTO JUMPED TO \";A$;\" LINE NUMBER IN LIST.\"\n270 GOTO 290\n280 PRINT \"CONTROL FELL THROUGH ON-GOTO TO NEXT STATEMENT.\"\n290 PRINT \"***  TEST FAILED  ***\"\n300 PRINT\n310 PRINT \"                  END TEST.\"\n320 PRINT\n330 PRINT \"END PROGRAM 90\"\n340 END\n"`,
 right: `"180: error: index out of range \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 ON X GOTO 210,230
+ 190 LET A$="Z"
+ 200 GOTO 250
+ 210 LET A$="FIRST"
+ 220 GOTO 250
+ 230 LET A$="SECOND"
+ 240 GOTO 250
+ 250 IF A$="Z" THEN 280
+ 260 PRINT "ON GOTO JUMPED TO ";A$;" LINE NUMBER IN LIST."
+ 270 GOTO 290
+ 280 PRINT "CONTROL FELL THROUGH ON-GOTO TO NEXT STATEMENT."
+ 290 PRINT "***  TEST FAILED  ***"
+ 300 PRINT
+ 310 PRINT "                  END TEST."
+ 320 PRINT
+ 330 PRINT "END PROGRAM 90"
+ 340 END
- 180: error: index out of range 
', tests/integration.rs:37:13

---- P091 stdout ----
thread 'P091' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 ON X GOTO 295\n260 PRINT \"CONTROL FELL THROUGH THE ON-GOTO STATEMENT.\"\n280 GOTO 310\n290 LET A$=\"LINE 290.\"\n300 PRINT \"\'ON X GOTO 295\' JUMPED TO \";A$\n310 PRINT\n320 PRINT \"                                 END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 91.\"\n350 END\n"`,
 right: `"250: error: non-existing line number \n ON X GOTO 295\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 ON X GOTO 295
+ 260 PRINT "CONTROL FELL THROUGH THE ON-GOTO STATEMENT."
+ 280 GOTO 310
+ 290 LET A$="LINE 290."
+ 300 PRINT "'ON X GOTO 295' JUMPED TO ";A$
+ 310 PRINT
+ 320 PRINT "                                 END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 91."
+ 350 END
- 250: error: non-existing line number 
-  ON X GOTO 295
-            ^
', tests/integration.rs:37:13

---- P089 stdout ----
thread 'P089' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 ON X GOTO 210,230\n190 LET A$=\"Z\"\n200 GOTO 250\n210 LET A$=\"FIRST\"\n220 GOTO 250\n230 LET A$=\"SECOND\"\n240 GOTO 250\n250 IF A$=\"Z\" THEN 280\n260 PRINT \"ON GOTO JUMPED TO \";A$;\" LINE NUMBER IN LIST.\"\n270 GOTO 290\n280 PRINT \"CONTROL FELL THROUGH ON-GOTO TO NEXT STATEMENT.\"\n290 PRINT \"***  TEST FAILED  ***\"\n300 PRINT\n310 PRINT \"                  END TEST.\"\n320 PRINT\n330 PRINT \"END PROGRAM 89\"\n340 END\n"`,
 right: `"180: error: index out of range \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 ON X GOTO 210,230
+ 190 LET A$="Z"
+ 200 GOTO 250
+ 210 LET A$="FIRST"
+ 220 GOTO 250
+ 230 LET A$="SECOND"
+ 240 GOTO 250
+ 250 IF A$="Z" THEN 280
+ 260 PRINT "ON GOTO JUMPED TO ";A$;" LINE NUMBER IN LIST."
+ 270 GOTO 290
+ 280 PRINT "CONTROL FELL THROUGH ON-GOTO TO NEXT STATEMENT."
+ 290 PRINT "***  TEST FAILED  ***"
+ 300 PRINT
+ 310 PRINT "                  END TEST."
+ 320 PRINT
+ 330 PRINT "END PROGRAM 89"
+ 340 END
- 180: error: index out of range 
', tests/integration.rs:37:13

---- P096 stdout ----
thread 'P096' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 DATA 1E-99999\n190 READ A\n200 PRINT \"RESULTING VALUE =\";A\n210 PRINT\n220 IF A=0 THEN 260\n230 PRINT \"RESULTING VALUE <> 0. IF VALUE <> 1E-99999, THEN,\"\n240 PRINT \"***  TEST FAILED  ***\"\n250 GOTO 270\n260 PRINT \"***  TEST PASSED  ***\"\n270 PRINT\n280 PRINT \"                 END TEST.\"\n290 PRINT\n300 PRINT \"END PROGRAM 96\"\n310 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 DATA 1E-99999
+ 190 READ A
+ 200 PRINT "RESULTING VALUE =";A
+ 210 PRINT
+ 220 IF A=0 THEN 260
+ 230 PRINT "RESULTING VALUE <> 0. IF VALUE <> 1E-99999, THEN,"
+ 240 PRINT "***  TEST FAILED  ***"
+ 250 GOTO 270
+ 260 PRINT "***  TEST PASSED  ***"
+ 270 PRINT
+ 280 PRINT "                 END TEST."
+ 290 PRINT
+ 300 PRINT "END PROGRAM 96"
+ 310 END
+ 
', tests/integration.rs:37:13

---- P093 stdout ----
thread 'P093' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 READ N\n255 IF N=0 THEN 1200\n260 LET I=I+1\n270 LET I$=\"#\"\n280 LET J$=\"#\"\n290 LET K$=\"#\"\n300 LET L$=\"#\"\n310 ON I GOTO 410,420,430,440,450,460,470,480,490,500,510\n410 LET I$=\"A\"\n411 LET J$=\"B\"\n412 LET K$=\"C\"\n413 LET L$=\"D\"\n414 GOTO 600\n420 LET I$=\"EF\"\n421 LET J$=\"GHI\"\n422 LET K$=\"JKLM\"\n423 GOTO 600\n430 LET I$=\"ABCDEFGHIJKLM\"\n431 LET J$=\"NOPQRSTUVWXYZ\"\n432 LET K$=\"0123456789\"\n433 LET L$=\"+.   -\"\n434 GOTO 600\n440 LET I$=\"EIGHTEEN POSITIONS\"\n441 GOTO 600\n450 LET I$=\"ABC\"\n451 LET J$=\"DEF\"\n452 LET K$=\"GHI\"\n453 LET L$=\"2.1E3\"\n454 GOTO 600\n460 LET I$=\"ABC   \"\n461 LET J$=\"   DEF   \"\n462 LET K$=\"   GHI\"\n463 GOTO 600\n470 LET I$=\"A   B\"\n471 LET J$=\"C   D\"\n472 GOTO 600\n480 LET I$=\"A  B\"\n481 LET J$=\"  C  D  \"\n482 LET K$=\"E  F\"\n483 GOTO 600\n490 LET I$=\"A\"\n491 LET J$=\"B,C\"\n492 LET K$=\"\"\n493 LET L$=\"D\"\n494 GOTO 600\n500 LET I$=\"ABCDEFGHIJKLM\"\n501 LET J$=\"NOPQRSTUVWXYZ\"\n502 LET K$=\"0123456789\"\n503 GOTO 600\n510 LET I$=\"!#$%&\'()*+,-\"\n511 LET J$=\"./:;<=>?^_\"\n512 GOTO 600\n600 REM COMPARAND VALUES INITIALIZED\n630 LET A$=\"#\"\n640 LET B$=\"#\"\n650 LET C$=\"#\"\n660 LET D$=\"#\"\n670 ON N GOTO 710,720,730,740\n710 READ A$\n715 GOTO 800\n720 READ A$,B$\n725 GOTO 800\n730 READ A$,B$,C$\n735 GOTO 800\n740 READ A$,B$,C$,D$\n745 GOTO 800\n800 REM TEST VALUES NOW SET\n810 IF A$<>I$ THEN 900\n820 IF B$<>J$ THEN 900\n830 IF C$<>K$ THEN 900\n840 IF D$<>L$ THEN 900\n850 LET S=0\n860 GOTO 910\n900 LET S=1\n910 ON N GOTO 920,930,940,950\n920 LET B$=\"\"\n925 LET J$=\"\"\n930 LET C$=\"\"\n935 LET K$=\"\"\n940 LET D$=\"\"\n945 LET L$=\"\"\n950 REM NOW SET UP FOR PRINT\n960 PRINT\n970 PRINT\n980 PRINT \"SHOULD BE: ***\";I$;J$;K$;L$;\"***\"\n990 PRINT \"ACTUAL:    ***\";A$;B$;C$;D$;\"***\"\n1000 IF S=0 THEN 1100\n1010 PRINT \"TEST FAILED\"\n1020 LET F=F+1\n1030 GOTO 250\n1100 PRINT \"TEST OK\"\n1110 GOTO 250\n1200 PRINT\n1210 PRINT\n1220 IF F=0 THEN 1270\n1230 PRINT \"*** TEST FAILED: \";F;\" CASE(S) HANDLED IMPROPERLY. ***\"\n1240 GOTO 1300\n1270 PRINT \"*** TEST PASSED ***\"\n1300 PRINT\n1310 PRINT \"                  END TEST\"\n1320 PRINT\n1330 PRINT \"END PROGRAM 93\"\n2010 DATA 4,\"A\",B,\"C\",D\n2020 DATA 3,EF,\"GHI\",JKLM\n2030 DATA 4,ABCDEFGHIJKLM,NOPQRSTUVWXYZ,0123456789,+.   -\n2040 DATA 1,EIGHTEEN POSITIONS\n2050 DATA 4,ABC   ,   DEF   ,   GHI,2.1E3\n2060 DATA 3,\"ABC   \",\"   DEF   \",\"   GHI\"\n2070 DATA 2,  A   B  ,  C   D\n2080 DATA 3,  A  B  ,  \"  C  D  \"  ,  E  F\n2090 DATA 4,A,\"B,C\",\"\",  D\n2100 DATA 3,\"ABCDEFGHIJKLM\",\"NOPQRSTUVWXYZ\",\"0123456789\"\n2110 DATA 2,\"!#$%&\'()*+,-\",\"./:;<=>?^_\"\n2120 DATA 0\n2130 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 READ N
+ 255 IF N=0 THEN 1200
+ 260 LET I=I+1
+ 270 LET I$="#"
+ 280 LET J$="#"
+ 290 LET K$="#"
+ 300 LET L$="#"
+ 310 ON I GOTO 410,420,430,440,450,460,470,480,490,500,510
+ 410 LET I$="A"
+ 411 LET J$="B"
+ 412 LET K$="C"
+ 413 LET L$="D"
+ 414 GOTO 600
+ 420 LET I$="EF"
+ 421 LET J$="GHI"
+ 422 LET K$="JKLM"
+ 423 GOTO 600
+ 430 LET I$="ABCDEFGHIJKLM"
+ 431 LET J$="NOPQRSTUVWXYZ"
+ 432 LET K$="0123456789"
+ 433 LET L$="+.   -"
+ 434 GOTO 600
+ 440 LET I$="EIGHTEEN POSITIONS"
+ 441 GOTO 600
+ 450 LET I$="ABC"
+ 451 LET J$="DEF"
+ 452 LET K$="GHI"
+ 453 LET L$="2.1E3"
+ 454 GOTO 600
+ 460 LET I$="ABC   "
+ 461 LET J$="   DEF   "
+ 462 LET K$="   GHI"
+ 463 GOTO 600
+ 470 LET I$="A   B"
+ 471 LET J$="C   D"
+ 472 GOTO 600
+ 480 LET I$="A  B"
+ 481 LET J$="  C  D  "
+ 482 LET K$="E  F"
+ 483 GOTO 600
+ 490 LET I$="A"
+ 491 LET J$="B,C"
+ 492 LET K$=""
+ 493 LET L$="D"
+ 494 GOTO 600
+ 500 LET I$="ABCDEFGHIJKLM"
+ 501 LET J$="NOPQRSTUVWXYZ"
+ 502 LET K$="0123456789"
+ 503 GOTO 600
+ 510 LET I$="!#$%&'()*+,-"
+ 511 LET J$="./:;<=>?^_"
+ 512 GOTO 600
+ 600 REM COMPARAND VALUES INITIALIZED
+ 630 LET A$="#"
+ 640 LET B$="#"
+ 650 LET C$="#"
+ 660 LET D$="#"
+ 670 ON N GOTO 710,720,730,740
+ 710 READ A$
+ 715 GOTO 800
+ 720 READ A$,B$
+ 725 GOTO 800
+ 730 READ A$,B$,C$
+ 735 GOTO 800
+ 740 READ A$,B$,C$,D$
+ 745 GOTO 800
+ 800 REM TEST VALUES NOW SET
+ 810 IF A$<>I$ THEN 900
+ 820 IF B$<>J$ THEN 900
+ 830 IF C$<>K$ THEN 900
+ 840 IF D$<>L$ THEN 900
+ 850 LET S=0
+ 860 GOTO 910
+ 900 LET S=1
+ 910 ON N GOTO 920,930,940,950
+ 920 LET B$=""
+ 925 LET J$=""
+ 930 LET C$=""
+ 935 LET K$=""
+ 940 LET D$=""
+ 945 LET L$=""
+ 950 REM NOW SET UP FOR PRINT
+ 960 PRINT
+ 970 PRINT
+ 980 PRINT "SHOULD BE: ***";I$;J$;K$;L$;"***"
+ 990 PRINT "ACTUAL:    ***";A$;B$;C$;D$;"***"
+ 1000 IF S=0 THEN 1100
+ 1010 PRINT "TEST FAILED"
+ 1020 LET F=F+1
+ 1030 GOTO 250
+ 1100 PRINT "TEST OK"
+ 1110 GOTO 250
+ 1200 PRINT
+ 1210 PRINT
+ 1220 IF F=0 THEN 1270
+ 1230 PRINT "*** TEST FAILED: ";F;" CASE(S) HANDLED IMPROPERLY. ***"
+ 1240 GOTO 1300
+ 1270 PRINT "*** TEST PASSED ***"
+ 1300 PRINT
+ 1310 PRINT "                  END TEST"
+ 1320 PRINT
+ 1330 PRINT "END PROGRAM 93"
+ 2010 DATA 4,"A",B,"C",D
+ 2020 DATA 3,EF,"GHI",JKLM
+ 2030 DATA 4,ABCDEFGHIJKLM,NOPQRSTUVWXYZ,0123456789,+.   -
+ 2040 DATA 1,EIGHTEEN POSITIONS
+ 2050 DATA 4,ABC   ,   DEF   ,   GHI,2.1E3
+ 2060 DATA 3,"ABC   ","   DEF   ","   GHI"
+ 2070 DATA 2,  A   B  ,  C   D
+ 2080 DATA 3,  A  B  ,  "  C  D  "  ,  E  F
+ 2090 DATA 4,A,"B,C","",  D
+ 2100 DATA 3,"ABCDEFGHIJKLM","NOPQRSTUVWXYZ","0123456789"
+ 2110 DATA 2,"!#$%&'()*+,-","./:;<=>?^_"
+ 2120 DATA 0
+ 2130 END
+ 
', tests/integration.rs:37:13

---- P092 stdout ----
thread 'P092' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n138 DIM A(110)\n140 LET A(1)=9.99998E37\n145 LET A(2)=1E38\n150 LET A(3)=-1E38\n155 LET A(4)=-9.99998E37\n160 LET A(5)=9.87653E37\n165 LET A(6)=9.87655E37\n170 LET A(7)=9.87653E-38\n175 LET A(8)=9.87655E-38\n180 LET A(9)=1.00000E-38\n185 LET A(10)=1.00002E-38\n190 LET A(11)=-1.00002E-38\n195 LET A(12)=-1.00000E-38\n200 LET A(13)=9.99998E-38\n205 LET A(14)=10E-38\n210 LET A(15)=123.455\n215 LET A(16)=123.457\n220 LET A(17)=123.455\n225 LET A(18)=123.457\n230 LET A(19)=9.87653E37\n235 LET A(20)=9.87655E37\n240 LET A(21)=123455\n245 LET A(22)=123457\n250 LET A(23)=123455\n255 LET A(24)=123457\n260 LET A(25)=123455\n265 LET A(26)=123457\n270 LET A(27)=987.653\n275 LET A(28)=987.655\n280 LET A(29)=1.23455E+6\n285 LET A(30)=1.23457E+6\n290 LET A(31)=1.23455E+8\n295 LET A(32)=1.23457E+8\n300 LET A(33)=1.23455E-2\n305 LET A(34)=1.23457E-2\n310 LET A(35)=1.23455E-4\n315 LET A(36)=1.23457E-4\n320 LET A(37)=.119999\n325 LET A(38)=.120001\n330 LET A(39)=.119999\n335 LET A(40)=.120001\n340 LET A(41)=-.120001\n345 LET A(42)=-.119999\n350 LET A(43)=.119999\n355 LET A(44)=.120001\n360 LET A(45)=0\n365 LET A(46)=0\n370 LET A(47)=0\n375 LET A(48)=0\n380 LET A(49)=0\n385 LET A(50)=0\n390 LET A(51)=1.22999E9\n395 LET A(52)=1.23001E9\n400 LET A(53)=1.22999E9\n405 LET A(54)=1.23001E9\n410 LET A(55)=1.22999E9\n415 LET A(56)=1.23001E9\n420 LET A(57)=1.22999E-9\n425 LET A(58)=1.23001E-9\n430 LET A(59)=1.22999E-9\n435 LET A(60)=1.23001E-9\n440 LET A(61)=1.22999E-9\n445 LET A(62)=1.23001E-9\n450 LET A(63)=1.22999E-9\n455 LET A(64)=1.23001E-9\n460 LET A(65)=0\n465 LET A(66)=0\n470 LET A(67)=0\n475 LET A(68)=0\n480 LET A(69)=0\n485 LET A(70)=0\n490 LET A(71)=0\n495 LET A(72)=0\n500 LET A(73)=122.999\n505 LET A(74)=123.001\n510 LET A(75)=122.999\n515 LET A(76)=123.001\n520 LET A(77)=122.999\n525 LET A(78)=123.001\n530 LET A(79)=122.999\n535 LET A(80)=123.001\n540 LET A(81)=1.2345578E19\n545 LET A(82)=1.2345779E19\n550 LET A(83)=1.23455E15\n555 LET A(84)=1.23457E15\n560 LET A(85)=1.23455E-15\n565 LET A(86)=1.23457E-15\n570 LET A(87)=123455\n575 LET A(88)=123457\n580 LET A(89)=123455\n585 LET A(90)=123457\n1000 LET I=-1\n1001 LET J=0\n1002 PRINT \"TRAIL #\",\"DATA VALUE\",\"RESULTS\"\n1005 LET F=0\n1010 READ X\n1020 IF X=-1 THEN 5000\n1025 LET J=J+1\n1030 LET I=I+2\n1035 LET K=I+1\n1040 IF X<A(I) THEN 1100\n1050 IF X>A(K) THEN 1100\n1060 PRINT J,X,\" OK \"\n1070 GOTO 1010\n1100 PRINT J,X,\"FAIL\"\n1110 LET F=F+1\n1120 GOTO 1010\n4000 DATA +.999999E38,-.999999E38,.00987654E40,987.654E-40\n4010 DATA +1.00001E-38,-1.00001E-38,9.99999E-38\n4015 DATA 123456.E-3,.123456E3\n4020 DATA 9.87654E37,123456,123456.,123456.0,987.654\n4030 DATA 1234560,123456000,.0123456,.000123456\n4040 DATA .12,+.12,-.12,0.12\n4050 DATA 0.0,+0,-.000\n4060 DATA 1.23E9,1.23E09,1.23E+9,1.23E-9,1.23E-09,1.23E-0009\n4070 DATA 000001.2300000E-000009,0E0,000.000E22,+000E55,0.0E-000\n4080 DATA 123E0,123E000,123E-00,123E+0\n4090 DATA 12345678901234567890,123456E10,0.0000123456E-10\n4100 DATA 123456000000000E-9,0.000000000123456E15\n4900 DATA -1\n5000 PRINT\n5010 IF F=0 THEN 5050\n5020 PRINT \"***** TEST FAILED ***** \";F;\" CASE(S) HANDLED IMPROPERLY.\"\n5030 GOTO 5100\n5050 PRINT \"***** TEST PASSED *****\"\n5100 PRINT\n5110 PRINT \"                  END TEST\"\n5120 PRINT\n5130 PRINT \"END PROGRAM 92\"\n5140 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 138 DIM A(110)
+ 140 LET A(1)=9.99998E37
+ 145 LET A(2)=1E38
+ 150 LET A(3)=-1E38
+ 155 LET A(4)=-9.99998E37
+ 160 LET A(5)=9.87653E37
+ 165 LET A(6)=9.87655E37
+ 170 LET A(7)=9.87653E-38
+ 175 LET A(8)=9.87655E-38
+ 180 LET A(9)=1.00000E-38
+ 185 LET A(10)=1.00002E-38
+ 190 LET A(11)=-1.00002E-38
+ 195 LET A(12)=-1.00000E-38
+ 200 LET A(13)=9.99998E-38
+ 205 LET A(14)=10E-38
+ 210 LET A(15)=123.455
+ 215 LET A(16)=123.457
+ 220 LET A(17)=123.455
+ 225 LET A(18)=123.457
+ 230 LET A(19)=9.87653E37
+ 235 LET A(20)=9.87655E37
+ 240 LET A(21)=123455
+ 245 LET A(22)=123457
+ 250 LET A(23)=123455
+ 255 LET A(24)=123457
+ 260 LET A(25)=123455
+ 265 LET A(26)=123457
+ 270 LET A(27)=987.653
+ 275 LET A(28)=987.655
+ 280 LET A(29)=1.23455E+6
+ 285 LET A(30)=1.23457E+6
+ 290 LET A(31)=1.23455E+8
+ 295 LET A(32)=1.23457E+8
+ 300 LET A(33)=1.23455E-2
+ 305 LET A(34)=1.23457E-2
+ 310 LET A(35)=1.23455E-4
+ 315 LET A(36)=1.23457E-4
+ 320 LET A(37)=.119999
+ 325 LET A(38)=.120001
+ 330 LET A(39)=.119999
+ 335 LET A(40)=.120001
+ 340 LET A(41)=-.120001
+ 345 LET A(42)=-.119999
+ 350 LET A(43)=.119999
+ 355 LET A(44)=.120001
+ 360 LET A(45)=0
+ 365 LET A(46)=0
+ 370 LET A(47)=0
+ 375 LET A(48)=0
+ 380 LET A(49)=0
+ 385 LET A(50)=0
+ 390 LET A(51)=1.22999E9
+ 395 LET A(52)=1.23001E9
+ 400 LET A(53)=1.22999E9
+ 405 LET A(54)=1.23001E9
+ 410 LET A(55)=1.22999E9
+ 415 LET A(56)=1.23001E9
+ 420 LET A(57)=1.22999E-9
+ 425 LET A(58)=1.23001E-9
+ 430 LET A(59)=1.22999E-9
+ 435 LET A(60)=1.23001E-9
+ 440 LET A(61)=1.22999E-9
+ 445 LET A(62)=1.23001E-9
+ 450 LET A(63)=1.22999E-9
+ 455 LET A(64)=1.23001E-9
+ 460 LET A(65)=0
+ 465 LET A(66)=0
+ 470 LET A(67)=0
+ 475 LET A(68)=0
+ 480 LET A(69)=0
+ 485 LET A(70)=0
+ 490 LET A(71)=0
+ 495 LET A(72)=0
+ 500 LET A(73)=122.999
+ 505 LET A(74)=123.001
+ 510 LET A(75)=122.999
+ 515 LET A(76)=123.001
+ 520 LET A(77)=122.999
+ 525 LET A(78)=123.001
+ 530 LET A(79)=122.999
+ 535 LET A(80)=123.001
+ 540 LET A(81)=1.2345578E19
+ 545 LET A(82)=1.2345779E19
+ 550 LET A(83)=1.23455E15
+ 555 LET A(84)=1.23457E15
+ 560 LET A(85)=1.23455E-15
+ 565 LET A(86)=1.23457E-15
+ 570 LET A(87)=123455
+ 575 LET A(88)=123457
+ 580 LET A(89)=123455
+ 585 LET A(90)=123457
+ 1000 LET I=-1
+ 1001 LET J=0
+ 1002 PRINT "TRAIL #","DATA VALUE","RESULTS"
+ 1005 LET F=0
+ 1010 READ X
+ 1020 IF X=-1 THEN 5000
+ 1025 LET J=J+1
+ 1030 LET I=I+2
+ 1035 LET K=I+1
+ 1040 IF X<A(I) THEN 1100
+ 1050 IF X>A(K) THEN 1100
+ 1060 PRINT J,X," OK "
+ 1070 GOTO 1010
+ 1100 PRINT J,X,"FAIL"
+ 1110 LET F=F+1
+ 1120 GOTO 1010
+ 4000 DATA +.999999E38,-.999999E38,.00987654E40,987.654E-40
+ 4010 DATA +1.00001E-38,-1.00001E-38,9.99999E-38
+ 4015 DATA 123456.E-3,.123456E3
+ 4020 DATA 9.87654E37,123456,123456.,123456.0,987.654
+ 4030 DATA 1234560,123456000,.0123456,.000123456
+ 4040 DATA .12,+.12,-.12,0.12
+ 4050 DATA 0.0,+0,-.000
+ 4060 DATA 1.23E9,1.23E09,1.23E+9,1.23E-9,1.23E-09,1.23E-0009
+ 4070 DATA 000001.2300000E-000009,0E0,000.000E22,+000E55,0.0E-000
+ 4080 DATA 123E0,123E000,123E-00,123E+0
+ 4090 DATA 12345678901234567890,123456E10,0.0000123456E-10
+ 4100 DATA 123456000000000E-9,0.000000000123456E15
+ 4900 DATA -1
+ 5000 PRINT
+ 5010 IF F=0 THEN 5050
+ 5020 PRINT "***** TEST FAILED ***** ";F;" CASE(S) HANDLED IMPROPERLY."
+ 5030 GOTO 5100
+ 5050 PRINT "***** TEST PASSED *****"
+ 5100 PRINT
+ 5110 PRINT "                  END TEST"
+ 5120 PRINT
+ 5130 PRINT "END PROGRAM 92"
+ 5140 END
+ 
', tests/integration.rs:37:13

---- P097 stdout ----
thread 'P097' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 DATA 5,6\n190 LET A=1\n200 LET B=2\n210 LET C=3\n220 PRINT \"ABOUT TO EXECUTE READ - \"\n230 READ A,B,C\n240 PRINT\n245 PRINT \"***  TEST FAILED  ***\"\n260 PRINT \"A, B, AND C WERE INITIALIZED TO 1, 2, AND 3\"\n270 PRINT \"RESPECTIVELY, AND THEN \'READ A,B,C\' WAS ATTEMPTED\"\n280 PRINT \"FROM A DATA-LIST CONTAINING 5,6. RESULTS BELOW:\"\n290 PRINT\n300 PRINT \"A=\";A;\"    B=\";B;\"    C=\";C\n310 PRINT\n320 PRINT \"              END TEST\"\n330 PRINT\n340 PRINT \"END PROGRAM 97\"\n350 END\n"`,
 right: `"230: error: insufficient data for READ \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 DATA 5,6
+ 190 LET A=1
+ 200 LET B=2
+ 210 LET C=3
+ 220 PRINT "ABOUT TO EXECUTE READ - "
+ 230 READ A,B,C
+ 240 PRINT
+ 245 PRINT "***  TEST FAILED  ***"
+ 260 PRINT "A, B, AND C WERE INITIALIZED TO 1, 2, AND 3"
+ 270 PRINT "RESPECTIVELY, AND THEN 'READ A,B,C' WAS ATTEMPTED"
+ 280 PRINT "FROM A DATA-LIST CONTAINING 5,6. RESULTS BELOW:"
+ 290 PRINT
+ 300 PRINT "A=";A;"    B=";B;"    C=";C
+ 310 PRINT
+ 320 PRINT "              END TEST"
+ 330 PRINT
+ 340 PRINT "END PROGRAM 97"
+ 350 END
- 230: error: insufficient data for READ 
', tests/integration.rs:37:13

---- P095 stdout ----
thread 'P095' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n340 DATA 1,A,2,B,3,4\n350 READ A,A$,B,B$\n360 PRINT\n370 PRINT Y$,1,\"A\",2,\"B\"\n380 PRINT Z$,A,A$,B,B$\n390 IF A<>1 THEN 450\n400 IF A$<>\"A\" THEN 450\n410 IF B<>2 THEN 450\n420 IF B$<>\"B\" THEN 450\n430 PRINT W$\n440 GOTO 470\n450 PRINT X$\n460 LET F=F+1\n470 READ A,B,C,A$\n480 PRINT\n490 PRINT Y$,3,4,5,\"C\"\n500 PRINT Z$,A,B,C,A$\n510 IF A<>3 THEN 570\n520 IF B<>4 THEN 570\n530 IF C<>5 THEN 570\n540 IF A$<>\"C\" THEN 570\n550 PRINT W$\n560 GOTO 590\n570 PRINT X$\n580 LET F=F+1\n590 GOTO 620\n600 REM TEST BRANCHING TO A DATA STATEMENT\n610 DATA 5,C,D,E\n620 DATA F,6\n630 DATA 7,8,9,10\n640 READ A$,B$,C$,D$,E$,A\n650 PRINT\n660 PRINT Y$,\"D\",\"E\",\"F\",\"6\",\"7\",8\n670 PRINT Z$,A$,B$,C$,D$,E$,A\n680 IF A$<>\"D\" THEN 760\n690 IF B$<>\"E\" THEN 760\n700 IF C$<>\"F\" THEN 760\n710 IF D$<>\"6\" THEN 760\n720 IF E$<>\"7\" THEN 760\n730 IF A<>8 THEN 760\n740 PRINT W$\n750 GOTO 780\n760 PRINT X$\n770 LET F=F+1\n780 READ A$\n790 PRINT\n800 PRINT Y$,\"9\"\n810 PRINT Z$,A$\n820 IF A$<>\"9\" THEN 850\n830 PRINT W$\n840 GOTO 870\n850 PRINT X$\n860 LET F=F+1\n870 READ A,B\n880 PRINT\n890 PRINT Y$,10,11\n900 PRINT Z$,A,B\n910 IF A<>10 THEN 950\n920 IF B<>11 THEN 950\n930 PRINT W$\n940 GOTO 970\n950 PRINT X$\n960 LET F=F+1\n970 DATA 11\n980 PRINT\n990 IF F=0 THEN 1020\n1000 PRINT \"*** TEST FAILED IN \";F;\" CASE(S). ***\"\n1010 GOTO 1030\n1020 PRINT \"*** TEST PASSED ***\"\n1030 PRINT\n1040 PRINT \"               END TEST\"\n1050 PRINT\n1060 PRINT \"SECTION 95.2: RESTORE STATEMENT\"\n1070 PRINT\n1080 PRINT \"THIS SECTION TESTS THE CAPABILITY OF THE RESTORE STATEMENT\"\n1090 PRINT \"TO ENABLE READING FROM THE BEGINNING OF THE DATA SEQUENCE.\"\n1100 PRINT \"FURTHERMORE, DATA VALUES WHICH WERE ORIGINALLY READ AS\"\n1110 PRINT \"NUMERIC MAY BE SUBSEQUENTLY READ AS STRINGS, AND \"\n1120 PRINT \"VICE-VERSA, AS LONG AS DATA-TYPE IS COMPATIBLE WITH\"\n1130 PRINT \"VARIABLE-TYPE.\"\n1140 PRINT\n1150 PRINT \"               BEGIN TEST\"\n1160 LET F=0\n1170 PRINT\n1180 PRINT \"EXECUTE FIRST RESTORE\"\n1190 RESTORE\n1200 READ A$,B$,C$,D$,E$,F$,G$\n1210 PRINT\n1220 PRINT Y$,\"1\",\"A\",\"2\",\"B\",\"3\",\"4\",\"5\"\n1230 PRINT Z$,A$,B$,C$,D$,E$,F$,G$\n1240 IF A$<>\"1\" THEN 1330\n1250 IF B$<>\"A\" THEN 1330\n1260 IF C$<>\"2\" THEN 1330\n1270 IF D$<>\"B\" THEN 1330\n1280 IF E$<>\"3\" THEN 1330\n1290 IF F$<>\"4\" THEN 1330\n1300 IF G$<>\"5\" THEN 1330\n1310 PRINT W$\n1320 GOTO 1350\n1330 PRINT X$\n1340 LET F=F+1\n1350 READ A$,B$,C$,D$,A,B,E$\n1360 PRINT\n1370 PRINT Y$,\"C\",\"D\",\"E\",\"F\",6,7,\"8\"\n1380 PRINT Z$,A$,B$,C$,D$,A,B,E$\n1390 IF A$<>\"C\" THEN 1480\n1400 IF B$<>\"D\" THEN 1480\n1410 IF C$<>\"E\" THEN 1480\n1420 IF D$<>\"F\" THEN 1480\n1430 IF A<>6 THEN 1480\n1440 IF B<>7 THEN 1480\n1450 IF E$<>\"8\" THEN 1480\n1460 PRINT W$\n1470 GOTO 1500\n1480 PRINT X$\n1490 LET F=F+1\n1500 PRINT\n1510 PRINT \"EXECUTE SECOND RESTORE\"\n1520 RESTORE\n1530 PRINT\n1540 READ A,A$,B$,C$,B\n1550 PRINT\n1560 PRINT Y$,1,\"A\",\"2\",\"B\",3\n1570 PRINT Z$,A,A$,B$,C$,B\n1580 IF A<>1 THEN 1650\n1590 IF A$<>\"A\" THEN 1650\n1600 IF B$<>\"2\" THEN 1650\n1610 IF C$<>\"B\" THEN 1650\n1620 IF B<>3 THEN 1650\n1630 PRINT W$\n1640 GOTO 1670\n1650 PRINT X$\n1660 LET F=F+1\n1670 PRINT\n1680 PRINT\n1690 IF F=0 THEN 1720\n1700 PRINT \"*** TEST FAILED IN \";F;\" CASE(S). ***\"\n1710 GOTO 1730\n1720 PRINT \"*** TEST PASSED ***\"\n1730 PRINT\n1740 PRINT \"              END TEST\"\n1750 PRINT\n1760 PRINT \"END PROGRAM 95\"\n1770 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 340 DATA 1,A,2,B,3,4
+ 350 READ A,A$,B,B$
+ 360 PRINT
+ 370 PRINT Y$,1,"A",2,"B"
+ 380 PRINT Z$,A,A$,B,B$
+ 390 IF A<>1 THEN 450
+ 400 IF A$<>"A" THEN 450
+ 410 IF B<>2 THEN 450
+ 420 IF B$<>"B" THEN 450
+ 430 PRINT W$
+ 440 GOTO 470
+ 450 PRINT X$
+ 460 LET F=F+1
+ 470 READ A,B,C,A$
+ 480 PRINT
+ 490 PRINT Y$,3,4,5,"C"
+ 500 PRINT Z$,A,B,C,A$
+ 510 IF A<>3 THEN 570
+ 520 IF B<>4 THEN 570
+ 530 IF C<>5 THEN 570
+ 540 IF A$<>"C" THEN 570
+ 550 PRINT W$
+ 560 GOTO 590
+ 570 PRINT X$
+ 580 LET F=F+1
+ 590 GOTO 620
+ 600 REM TEST BRANCHING TO A DATA STATEMENT
+ 610 DATA 5,C,D,E
+ 620 DATA F,6
+ 630 DATA 7,8,9,10
+ 640 READ A$,B$,C$,D$,E$,A
+ 650 PRINT
+ 660 PRINT Y$,"D","E","F","6","7",8
+ 670 PRINT Z$,A$,B$,C$,D$,E$,A
+ 680 IF A$<>"D" THEN 760
+ 690 IF B$<>"E" THEN 760
+ 700 IF C$<>"F" THEN 760
+ 710 IF D$<>"6" THEN 760
+ 720 IF E$<>"7" THEN 760
+ 730 IF A<>8 THEN 760
+ 740 PRINT W$
+ 750 GOTO 780
+ 760 PRINT X$
+ 770 LET F=F+1
+ 780 READ A$
+ 790 PRINT
+ 800 PRINT Y$,"9"
+ 810 PRINT Z$,A$
+ 820 IF A$<>"9" THEN 850
+ 830 PRINT W$
+ 840 GOTO 870
+ 850 PRINT X$
+ 860 LET F=F+1
+ 870 READ A,B
+ 880 PRINT
+ 890 PRINT Y$,10,11
+ 900 PRINT Z$,A,B
+ 910 IF A<>10 THEN 950
+ 920 IF B<>11 THEN 950
+ 930 PRINT W$
+ 940 GOTO 970
+ 950 PRINT X$
+ 960 LET F=F+1
+ 970 DATA 11
+ 980 PRINT
+ 990 IF F=0 THEN 1020
+ 1000 PRINT "*** TEST FAILED IN ";F;" CASE(S). ***"
+ 1010 GOTO 1030
+ 1020 PRINT "*** TEST PASSED ***"
+ 1030 PRINT
+ 1040 PRINT "               END TEST"
+ 1050 PRINT
+ 1060 PRINT "SECTION 95.2: RESTORE STATEMENT"
+ 1070 PRINT
+ 1080 PRINT "THIS SECTION TESTS THE CAPABILITY OF THE RESTORE STATEMENT"
+ 1090 PRINT "TO ENABLE READING FROM THE BEGINNING OF THE DATA SEQUENCE."
+ 1100 PRINT "FURTHERMORE, DATA VALUES WHICH WERE ORIGINALLY READ AS"
+ 1110 PRINT "NUMERIC MAY BE SUBSEQUENTLY READ AS STRINGS, AND "
+ 1120 PRINT "VICE-VERSA, AS LONG AS DATA-TYPE IS COMPATIBLE WITH"
+ 1130 PRINT "VARIABLE-TYPE."
+ 1140 PRINT
+ 1150 PRINT "               BEGIN TEST"
+ 1160 LET F=0
+ 1170 PRINT
+ 1180 PRINT "EXECUTE FIRST RESTORE"
+ 1190 RESTORE
+ 1200 READ A$,B$,C$,D$,E$,F$,G$
+ 1210 PRINT
+ 1220 PRINT Y$,"1","A","2","B","3","4","5"
+ 1230 PRINT Z$,A$,B$,C$,D$,E$,F$,G$
+ 1240 IF A$<>"1" THEN 1330
+ 1250 IF B$<>"A" THEN 1330
+ 1260 IF C$<>"2" THEN 1330
+ 1270 IF D$<>"B" THEN 1330
+ 1280 IF E$<>"3" THEN 1330
+ 1290 IF F$<>"4" THEN 1330
+ 1300 IF G$<>"5" THEN 1330
+ 1310 PRINT W$
+ 1320 GOTO 1350
+ 1330 PRINT X$
+ 1340 LET F=F+1
+ 1350 READ A$,B$,C$,D$,A,B,E$
+ 1360 PRINT
+ 1370 PRINT Y$,"C","D","E","F",6,7,"8"
+ 1380 PRINT Z$,A$,B$,C$,D$,A,B,E$
+ 1390 IF A$<>"C" THEN 1480
+ 1400 IF B$<>"D" THEN 1480
+ 1410 IF C$<>"E" THEN 1480
+ 1420 IF D$<>"F" THEN 1480
+ 1430 IF A<>6 THEN 1480
+ 1440 IF B<>7 THEN 1480
+ 1450 IF E$<>"8" THEN 1480
+ 1460 PRINT W$
+ 1470 GOTO 1500
+ 1480 PRINT X$
+ 1490 LET F=F+1
+ 1500 PRINT
+ 1510 PRINT "EXECUTE SECOND RESTORE"
+ 1520 RESTORE
+ 1530 PRINT
+ 1540 READ A,A$,B$,C$,B
+ 1550 PRINT
+ 1560 PRINT Y$,1,"A","2","B",3
+ 1570 PRINT Z$,A,A$,B$,C$,B
+ 1580 IF A<>1 THEN 1650
+ 1590 IF A$<>"A" THEN 1650
+ 1600 IF B$<>"2" THEN 1650
+ 1610 IF C$<>"B" THEN 1650
+ 1620 IF B<>3 THEN 1650
+ 1630 PRINT W$
+ 1640 GOTO 1670
+ 1650 PRINT X$
+ 1660 LET F=F+1
+ 1670 PRINT
+ 1680 PRINT
+ 1690 IF F=0 THEN 1720
+ 1700 PRINT "*** TEST FAILED IN ";F;" CASE(S). ***"
+ 1710 GOTO 1730
+ 1720 PRINT "*** TEST PASSED ***"
+ 1730 PRINT
+ 1740 PRINT "              END TEST"
+ 1750 PRINT
+ 1760 PRINT "END PROGRAM 95"
+ 1770 END
+ 
', tests/integration.rs:37:13

---- P100 stdout ----
thread 'P100' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n5 DATA ABC12345678901234567890123456789012345678901234567890123456789XYZ\n45 PRINT \"SECTION 100.1 EXCEPTION - STRING OVERFLOW ON READ.\"\n55 PRINT\n65 PRINT \"THIS TEST READS A LONG STRING (65 CHARACTERS) INTO A\"\n75 PRINT \"VARIABLE. IN ORDER TO PASS, THE PROCESSOR MUST EITHER:\"\n85 PRINT\n95 PRINT \"1) CORRECTLY ACCEPT THE STRING AND RETAIN ITS VALUE IN\"\n105 PRINT \"   THE VARIABLE, AS DEMONSTRATED IN THE PRINTING, OR\"\n110 PRINT\n115 PRINT \"2) DETECT STRING OVERFLOW, REPORT THE EXCEPTION AND\"\n125 PRINT \"   TERMINATE THE PROGRAM, AS THIS EXCEPTION IS FATAL.\"\n135 PRINT\n145 PRINT \"               BEGIN TEST\"\n155 PRINT\n165 LET A$=\"INITIALIZED\"\n175 PRINT \"ABOUT TO ATTEMPT READ. FATAL EXCEPTION MAY OCCUR NOW:\"\n185 PRINT\n195 READ A$\n205 PRINT \"IF THIS LINE PRINTS, NO EXCEPTION SHOULD HAVE BEEN REPORTED\"\n215 PRINT \"AND THE TWO LINES BELOW (BEGINNING WITH \'ABC\' AND ENDING\"\n220 PRINT \"WITH \'XYZ\') SHOULD BE IDENTICAL. OTHERWISE,\"\n225 PRINT \"***  TEST FAILS  ***\"\n230 PRINT\n235 PRINT \"(FIRST LINE IS CONSTANT, SECOND IS FROM THE VARIABLE.)\"\n245 PRINT\n255 PRINT \"ABC123456789012345678901234567890\";\n265 PRINT \"12345678901234567890123456789XYZ\"\n275 PRINT A$\n285 PRINT\n295 PRINT \"               END TEST\"\n305 PRINT\n315 PRINT \"END PROGRAM 100\"\n325 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 5 DATA ABC12345678901234567890123456789012345678901234567890123456789XYZ
+ 45 PRINT "SECTION 100.1 EXCEPTION - STRING OVERFLOW ON READ."
+ 55 PRINT
+ 65 PRINT "THIS TEST READS A LONG STRING (65 CHARACTERS) INTO A"
+ 75 PRINT "VARIABLE. IN ORDER TO PASS, THE PROCESSOR MUST EITHER:"
+ 85 PRINT
+ 95 PRINT "1) CORRECTLY ACCEPT THE STRING AND RETAIN ITS VALUE IN"
+ 105 PRINT "   THE VARIABLE, AS DEMONSTRATED IN THE PRINTING, OR"
+ 110 PRINT
+ 115 PRINT "2) DETECT STRING OVERFLOW, REPORT THE EXCEPTION AND"
+ 125 PRINT "   TERMINATE THE PROGRAM, AS THIS EXCEPTION IS FATAL."
+ 135 PRINT
+ 145 PRINT "               BEGIN TEST"
+ 155 PRINT
+ 165 LET A$="INITIALIZED"
+ 175 PRINT "ABOUT TO ATTEMPT READ. FATAL EXCEPTION MAY OCCUR NOW:"
+ 185 PRINT
+ 195 READ A$
+ 205 PRINT "IF THIS LINE PRINTS, NO EXCEPTION SHOULD HAVE BEEN REPORTED"
+ 215 PRINT "AND THE TWO LINES BELOW (BEGINNING WITH 'ABC' AND ENDING"
+ 220 PRINT "WITH 'XYZ') SHOULD BE IDENTICAL. OTHERWISE,"
+ 225 PRINT "***  TEST FAILS  ***"
+ 230 PRINT
+ 235 PRINT "(FIRST LINE IS CONSTANT, SECOND IS FROM THE VARIABLE.)"
+ 245 PRINT
+ 255 PRINT "ABC123456789012345678901234567890";
+ 265 PRINT "12345678901234567890123456789XYZ"
+ 275 PRINT A$
+ 285 PRINT
+ 295 PRINT "               END TEST"
+ 305 PRINT
+ 315 PRINT "END PROGRAM 100"
+ 325 END
+ 
', tests/integration.rs:37:13

---- P094 stdout ----
thread 'P094' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n150 FOR I=1 TO 5\n160 LET A(I)=I\n170 LET B(I)=I\n180 FOR J=1 TO 3\n190 LET C(I,J)=1000*I+J\n200 LET D(I,J)=1000*I+J\n210 NEXT J\n220 NEXT I\n230 LET J=2\n240 READ I,A(I),I,A(I),I,C(I,J),J,I,C(I,J)\n250 DATA 3,199,2,299,4,399,1,2,499\n260 LET B(3)=199\n270 LET B(2)=299\n280 LET D(4,2)=399\n290 LET D(2,1)=499\n300 PRINT \"VALUES FOR A(I)\"\n310 PRINT \"I\",\"A(I)\",\"A(I)\"\n320 PRINT ,\"SHOULD BE\",\"ACTUAL\"\n330 LET M$=\"PASSED. ***\"\n340 FOR I=1 TO 5\n350 LET S$=\" \"\n360 IF A(I)=B(I) THEN 390\n370 LET M$=\"FAILED. ***\"\n380 LET S$=\" ***\"\n390 PRINT I,B(I),A(I),S$\n400 NEXT I\n410 PRINT\n420 PRINT \"*** TEST FOR ONE-DIMENSIONAL ARRAY \";M$\n430 LET M$=\"PASSED. ***\"\n440 PRINT\n450 PRINT \"VALUES FOR C(I,J)\"\n460 PRINT \"I=\",,\"J=1\",\"J=2\",\"J=3\"\n470 FOR I=1 TO 5\n480 PRINT I,\"SHOULD BE:\",D(I,1),D(I,2),D(I,3)\n490 PRINT ,\"ACTUAL:\",C(I,1),C(I,2),C(I,3)\n500 PRINT ,,\n510 FOR J=1 TO 3\n520 IF C(I,J)=D(I,J) THEN 560\n530 LET M$=\"FAILED. ***\"\n540 PRINT \" ***\",\n550 GOTO 570\n560 PRINT \"   \",\n570 NEXT J\n580 PRINT\n590 NEXT I\n600 PRINT\n610 PRINT \"*** TEST FOR TWO-DIMENSIONAL ARRAY \";M$\n620 PRINT\n630 PRINT \"                 END TEST\"\n640 PRINT\n650 PRINT \"END PROGRAM 94\"\n660 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 150 FOR I=1 TO 5
+ 160 LET A(I)=I
+ 170 LET B(I)=I
+ 180 FOR J=1 TO 3
+ 190 LET C(I,J)=1000*I+J
+ 200 LET D(I,J)=1000*I+J
+ 210 NEXT J
+ 220 NEXT I
+ 230 LET J=2
+ 240 READ I,A(I),I,A(I),I,C(I,J),J,I,C(I,J)
+ 250 DATA 3,199,2,299,4,399,1,2,499
+ 260 LET B(3)=199
+ 270 LET B(2)=299
+ 280 LET D(4,2)=399
+ 290 LET D(2,1)=499
+ 300 PRINT "VALUES FOR A(I)"
+ 310 PRINT "I","A(I)","A(I)"
+ 320 PRINT ,"SHOULD BE","ACTUAL"
+ 330 LET M$="PASSED. ***"
+ 340 FOR I=1 TO 5
+ 350 LET S$=" "
+ 360 IF A(I)=B(I) THEN 390
+ 370 LET M$="FAILED. ***"
+ 380 LET S$=" ***"
+ 390 PRINT I,B(I),A(I),S$
+ 400 NEXT I
+ 410 PRINT
+ 420 PRINT "*** TEST FOR ONE-DIMENSIONAL ARRAY ";M$
+ 430 LET M$="PASSED. ***"
+ 440 PRINT
+ 450 PRINT "VALUES FOR C(I,J)"
+ 460 PRINT "I=",,"J=1","J=2","J=3"
+ 470 FOR I=1 TO 5
+ 480 PRINT I,"SHOULD BE:",D(I,1),D(I,2),D(I,3)
+ 490 PRINT ,"ACTUAL:",C(I,1),C(I,2),C(I,3)
+ 500 PRINT ,,
+ 510 FOR J=1 TO 3
+ 520 IF C(I,J)=D(I,J) THEN 560
+ 530 LET M$="FAILED. ***"
+ 540 PRINT " ***",
+ 550 GOTO 570
+ 560 PRINT "   ",
+ 570 NEXT J
+ 580 PRINT
+ 590 NEXT I
+ 600 PRINT
+ 610 PRINT "*** TEST FOR TWO-DIMENSIONAL ARRAY ";M$
+ 620 PRINT
+ 630 PRINT "                 END TEST"
+ 640 PRINT
+ 650 PRINT "END PROGRAM 94"
+ 660 END
+ 
', tests/integration.rs:37:13

---- P101 stdout ----
thread 'P101' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 DATA 9.9E99999\n190 READ A\n200 PRINT\n210 PRINT \"RESULTING VALUE IN VARIABLE = \";A\n220 PRINT\n225 IF A <= .99E38 THEN 250\n230 PRINT \"IF EXCEPTION OCCURRED, VARIABLE SHOULD = POSITIVE INFINITY.\"\n240 PRINT \"IF NOT, IT SHOULD = 9.9E99999; OTHERWISE,\"\n250 PRINT \"***  TEST FAILED  *** \"\n260 PRINT\n270 PRINT \"                 END TEST\"\n280 PRINT\n290 PRINT \"SECTION 101.2: EXCEPTION - NEGATIVE OVERFLOW ON READ\"\n300 PRINT\n310 PRINT \"THIS SECTION IS IDENTICAL TO THE PREVIOUS, EXCEPT THAT\"\n320 PRINT \"-9.9E99999 IS USED TO CAUSE OVERFLOW.\"\n330 PRINT\n340 PRINT \"                 BEGIN TEST\"\n350 PRINT\n360 PRINT \"ABOUT TO EXECUTE READ.\"\n370 DATA -9.9E99999\n380 READ A\n390 PRINT\n400 PRINT \"RESULTING VALUE IN VARIABLE = \";A\n410 PRINT\n415 IF A >= .99E38 THEN 440\n420 PRINT \"IF EXCEPTION OCCURRED, VARIABLE SHOULD = NEGATIVE INFINITY.\"\n430 PRINT \"IF NOT, IT SHOULD = -9.9E99999; OTHERWISE,\"\n440 PRINT \"***  TEST FAILED  *** \"\n450 PRINT\n460 PRINT \"                 END TEST\"\n470 PRINT\n480 PRINT \"END PROGRAM 101\"\n490 END\n"`,
 right: `"190: warning: numeric constant overflow \n380: warning: numeric constant overflow \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 DATA 9.9E99999
+ 190 READ A
+ 200 PRINT
+ 210 PRINT "RESULTING VALUE IN VARIABLE = ";A
+ 220 PRINT
+ 225 IF A <= .99E38 THEN 250
+ 230 PRINT "IF EXCEPTION OCCURRED, VARIABLE SHOULD = POSITIVE INFINITY."
+ 240 PRINT "IF NOT, IT SHOULD = 9.9E99999; OTHERWISE,"
+ 250 PRINT "***  TEST FAILED  *** "
+ 260 PRINT
+ 270 PRINT "                 END TEST"
+ 280 PRINT
+ 290 PRINT "SECTION 101.2: EXCEPTION - NEGATIVE OVERFLOW ON READ"
+ 300 PRINT
+ 310 PRINT "THIS SECTION IS IDENTICAL TO THE PREVIOUS, EXCEPT THAT"
+ 320 PRINT "-9.9E99999 IS USED TO CAUSE OVERFLOW."
+ 330 PRINT
+ 340 PRINT "                 BEGIN TEST"
+ 350 PRINT
+ 360 PRINT "ABOUT TO EXECUTE READ."
+ 370 DATA -9.9E99999
+ 380 READ A
+ 390 PRINT
+ 400 PRINT "RESULTING VALUE IN VARIABLE = ";A
+ 410 PRINT
+ 415 IF A >= .99E38 THEN 440
+ 420 PRINT "IF EXCEPTION OCCURRED, VARIABLE SHOULD = NEGATIVE INFINITY."
+ 430 PRINT "IF NOT, IT SHOULD = -9.9E99999; OTHERWISE,"
+ 440 PRINT "***  TEST FAILED  *** "
+ 450 PRINT
+ 460 PRINT "                 END TEST"
+ 470 PRINT
+ 480 PRINT "END PROGRAM 101"
+ 490 END
- 190: warning: numeric constant overflow 
- 380: warning: numeric constant overflow 
', tests/integration.rs:37:13

---- P098 stdout ----
thread 'P098' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 DATA 5,6,2D3\n270 PRINT \"ABOUT TO READ -\"\n290 READ A,B,C\n300 PRINT\n310 PRINT \"***  TEST FAILED  ***\"\n320 PRINT \"VARIABLES A,B, AND C WERE INITIALIZED TO 1, 2, AND 3,\"\n330 PRINT \"RESPECTIVELY, AND THEN READ INTO FROM A DATA-LIST\"\n340 PRINT \"CONTAINING 5, 6, AND \'2D3\'. RESULTS BELOW:\"\n350 PRINT\n360 PRINT \"A=\";A;\"    B=\";B;\"    C=\";C\n370 PRINT\n380 PRINT \"              END TEST\"\n390 PRINT\n400 PRINT \"END PROGRAM 98\"\n410 END\n"`,
 right: `"290: error: reading string into numeric variable \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 DATA 5,6,2D3
+ 270 PRINT "ABOUT TO READ -"
+ 290 READ A,B,C
+ 300 PRINT
+ 310 PRINT "***  TEST FAILED  ***"
+ 320 PRINT "VARIABLES A,B, AND C WERE INITIALIZED TO 1, 2, AND 3,"
+ 330 PRINT "RESPECTIVELY, AND THEN READ INTO FROM A DATA-LIST"
+ 340 PRINT "CONTAINING 5, 6, AND '2D3'. RESULTS BELOW:"
+ 350 PRINT
+ 360 PRINT "A=";A;"    B=";B;"    C=";C
+ 370 PRINT
+ 380 PRINT "              END TEST"
+ 390 PRINT
+ 400 PRINT "END PROGRAM 98"
+ 410 END
- 290: error: reading string into numeric variable 
', tests/integration.rs:37:13

---- P102 stdout ----
thread 'P102' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n290 DATA ABC,D?F,GHI\n300 READ A$,B$,C$\n305 PRINT \"RESULTING VALUES:\"\n310 PRINT \"A$=\";A$\n320 PRINT \"B$=\";B$\n330 PRINT \"C$=\";C$\n340 PRINT\n350 PRINT \"                  END TEST\"\n360 PRINT\n370 PRINT \"END PROGRAM 102\"\n380 END\n"`,
 right: `"290: error: invalid characters found \n DATA ABC,D?F,GHI\n           ^\n290: error: syntax error \n DATA ABC,D?F,GHI\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 290 DATA ABC,D?F,GHI
+ 300 READ A$,B$,C$
+ 305 PRINT "RESULTING VALUES:"
+ 310 PRINT "A$=";A$
+ 320 PRINT "B$=";B$
+ 330 PRINT "C$=";C$
+ 340 PRINT
+ 350 PRINT "                  END TEST"
+ 360 PRINT
+ 370 PRINT "END PROGRAM 102"
+ 380 END
- 290: error: invalid characters found 
-  DATA ABC,D?F,GHI
-            ^
- 290: error: syntax error 
-  DATA ABC,D?F,GHI
-            ^
', tests/integration.rs:37:13

---- P099 stdout ----
thread 'P099' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 DATA 5,6,\"7\"\n270 PRINT \"ABOUT TO READ -\"\n290 READ A,B,C\n300 PRINT\n310 PRINT \"***  TEST FAILED  ***\"\n320 PRINT \"VARIABLES A, B, AND C WERE INITIALIZED TO 1, 2, AND 3,\"\n330 PRINT \"RESPECTIVELY, AND THEN READ INTO FROM A DATA-LIST\"\n340 PRINT \"CONTAINING 5, 6, AND A QUOTED \'7\'. RESULTS BELOW:\"\n350 PRINT\n360 PRINT \"A=\";A;\"    B=\";B;\"    C=\";C\n370 PRINT\n380 PRINT \"                END TEST\"\n390 PRINT\n400 PRINT \"END PROGRAM 99\"\n410 END\n"`,
 right: `"290: error: reading string into numeric variable \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 DATA 5,6,"7"
+ 270 PRINT "ABOUT TO READ -"
+ 290 READ A,B,C
+ 300 PRINT
+ 310 PRINT "***  TEST FAILED  ***"
+ 320 PRINT "VARIABLES A, B, AND C WERE INITIALIZED TO 1, 2, AND 3,"
+ 330 PRINT "RESPECTIVELY, AND THEN READ INTO FROM A DATA-LIST"
+ 340 PRINT "CONTAINING 5, 6, AND A QUOTED '7'. RESULTS BELOW:"
+ 350 PRINT
+ 360 PRINT "A=";A;"    B=";B;"    C=";C
+ 370 PRINT
+ 380 PRINT "                END TEST"
+ 390 PRINT
+ 400 PRINT "END PROGRAM 99"
+ 410 END
- 290: error: reading string into numeric variable 
', tests/integration.rs:37:13

---- P103 stdout ----
thread 'P103' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n240 READ A$\n250 PRINT \"A READ STATEMENT HAS ATTEMPTED TO ASSOCIATE THE STRING\"\n260 PRINT \"CONSISTING OF AN ASTERISK, THE SINGLE OCCURRENCE OF\"\n270 PRINT \"A QUOTE CHARACTER AND A QUESTION MARK WITH A STRING \"\n280 PRINT \"VARIABLE. \"\n290 PRINT\n300 PRINT \"VARIABLE=\";A$\n310 PRINT\n315 DATA \"*\"?\"\n320 PRINT \"                               END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 103.\"\n350 END\n"`,
 right: `"315: error: invalid characters found \n DATA \"*\"?\"\n         ^\n315: error: syntax error \n DATA \"*\"?\"\n         ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 240 READ A$
+ 250 PRINT "A READ STATEMENT HAS ATTEMPTED TO ASSOCIATE THE STRING"
+ 260 PRINT "CONSISTING OF AN ASTERISK, THE SINGLE OCCURRENCE OF"
+ 270 PRINT "A QUOTE CHARACTER AND A QUESTION MARK WITH A STRING "
+ 280 PRINT "VARIABLE. "
+ 290 PRINT
+ 300 PRINT "VARIABLE=";A$
+ 310 PRINT
+ 315 DATA "*"?"
+ 320 PRINT "                               END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 103."
+ 350 END
- 315: error: invalid characters found 
-  DATA "*"?"
-          ^
- 315: error: syntax error 
-  DATA "*"?"
-          ^
', tests/integration.rs:37:13

---- P105 stdout ----
thread 'P105' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n290 DATA ABC,,GHI,JKL\n300 READ A$,B$,C$\n303 PRINT \"RESULTING VALUES:\"\n310 PRINT \"A$=\";A$\n320 PRINT \"B$=\";B$\n330 PRINT \"C$=\";C$\n340 PRINT\n350 PRINT \"               END TEST\"\n360 PRINT\n370 PRINT \"END PROGRAM 105\"\n380 END\n"`,
 right: `"290: error: syntax error \n DATA ABC,,GHI,JKL\n          ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 290 DATA ABC,,GHI,JKL
+ 300 READ A$,B$,C$
+ 303 PRINT "RESULTING VALUES:"
+ 310 PRINT "A$=";A$
+ 320 PRINT "B$=";B$
+ 330 PRINT "C$=";C$
+ 340 PRINT
+ 350 PRINT "               END TEST"
+ 360 PRINT
+ 370 PRINT "END PROGRAM 105"
+ 380 END
- 290: error: syntax error 
-  DATA ABC,,GHI,JKL
-           ^
', tests/integration.rs:37:13

---- P104 stdout ----
thread 'P104' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n240 READ A$\n250 PRINT \"A READ STATEMENT HAS ATTEMPTED TO ASSOCIATE THE \"\n260 PRINT \"STRING CONSISTING OF AN ASTERISK, TWO CONSECUTIVE\"\n270 PRINT \"QUOTE CHARACTERS AND A QUESTION MARK WITH A STRING \"\n280 PRINT \"VARIABLE. \"\n290 PRINT\n300 PRINT \"VARIABLE=\";A$\n310 PRINT\n315 DATA \"*\"\"?\"\n320 PRINT \"                               END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 104.\"\n350 END\n"`,
 right: `"315: error: syntax error \n DATA \"*\"\"?\"\n         ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 240 READ A$
+ 250 PRINT "A READ STATEMENT HAS ATTEMPTED TO ASSOCIATE THE "
+ 260 PRINT "STRING CONSISTING OF AN ASTERISK, TWO CONSECUTIVE"
+ 270 PRINT "QUOTE CHARACTERS AND A QUESTION MARK WITH A STRING "
+ 280 PRINT "VARIABLE. "
+ 290 PRINT
+ 300 PRINT "VARIABLE=";A$
+ 310 PRINT
+ 315 DATA "*""?"
+ 320 PRINT "                               END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 104."
+ 350 END
- 315: error: syntax error 
-  DATA "*""?"
-          ^
', tests/integration.rs:37:13

---- P106 stdout ----
thread 'P106' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 DATA ABC,DEF,GHI\n270 READ A$,,C$\n280 PRINT\n290 PRINT \"RESULTING VALUES:\"\n300 PRINT \"A$=\";A$\n310 PRINT \"B$=\";B$\n320 PRINT \"C$=\";C$\n330 PRINT\n340 PRINT \"               END TEST\"\n350 PRINT\n360 PRINT \"END PROGRAM 106\"\n370 END\n"`,
 right: `"270: error: syntax error \n READ A$,,C$\n         ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 DATA ABC,DEF,GHI
+ 270 READ A$,,C$
+ 280 PRINT
+ 290 PRINT "RESULTING VALUES:"
+ 300 PRINT "A$=";A$
+ 310 PRINT "B$=";B$
+ 320 PRINT "C$=";C$
+ 330 PRINT
+ 340 PRINT "               END TEST"
+ 350 PRINT
+ 360 PRINT "END PROGRAM 106"
+ 370 END
- 270: error: syntax error 
-  READ A$,,C$
-          ^
', tests/integration.rs:37:13

---- P114 stdout ----
thread 'P114' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n170 READ A,V\n180 IF A=999 THEN 290\n190 LET V1=ABS(A)\n200 IF V=V1 THEN 270\n240 LET F=F+1\n250 PRINT A,V,V1,\"FAIL\"\n260 GOTO 170\n270 PRINT A,V,V1,\" OK \"\n280 GOTO 170\n290 PRINT\n300 IF F=0 THEN 330\n310 PRINT \"*** TEST FAILED IN \";F;\" CASE(S) ***\"\n320 GOTO 340\n330 PRINT \"*** TEST PASSED ***\"\n340 PRINT\n350 PRINT \"               END TEST\"\n360 PRINT\n370 PRINT \"END PROGRAM 114\"\n380 DATA -2,2,-1,1,+0,0,-0,0,1,1,2,2,2.1,2.1,2.9,2.9,-2.1,2.1,-2.9,2.9\n390 DATA -1.23E22,1.23E22,3.21E-11,3.21E-11,9.99E37,9.99E37\n400 DATA -9.99E37,9.99E37,1E38,1E38,-1E38,1E38,1E-38,1E-38\n410 DATA -1E-38,1E-38,-1.01E-38,1.01E-38,.001,.001,-.001,.001\n420 DATA 999,999\n430 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 170 READ A,V
+ 180 IF A=999 THEN 290
+ 190 LET V1=ABS(A)
+ 200 IF V=V1 THEN 270
+ 240 LET F=F+1
+ 250 PRINT A,V,V1,"FAIL"
+ 260 GOTO 170
+ 270 PRINT A,V,V1," OK "
+ 280 GOTO 170
+ 290 PRINT
+ 300 IF F=0 THEN 330
+ 310 PRINT "*** TEST FAILED IN ";F;" CASE(S) ***"
+ 320 GOTO 340
+ 330 PRINT "*** TEST PASSED ***"
+ 340 PRINT
+ 350 PRINT "               END TEST"
+ 360 PRINT
+ 370 PRINT "END PROGRAM 114"
+ 380 DATA -2,2,-1,1,+0,0,-0,0,1,1,2,2,2.1,2.1,2.9,2.9,-2.1,2.1,-2.9,2.9
+ 390 DATA -1.23E22,1.23E22,3.21E-11,3.21E-11,9.99E37,9.99E37
+ 400 DATA -9.99E37,9.99E37,1E38,1E38,-1E38,1E38,1E-38,1E-38
+ 410 DATA -1E-38,1E-38,-1.01E-38,1.01E-38,.001,.001,-.001,.001
+ 420 DATA 999,999
+ 430 END
+ 
', tests/integration.rs:37:13

---- P116 stdout ----
thread 'P116' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n170 READ A,V\n180 IF A=999 THEN 280\n190 LET V1=SGN(A)\n210 LET R$=\" OK \"\n220 IF V=V1 THEN 260\n240 LET R$=\"FAIL\"\n250 LET F=F+1\n260 PRINT A,V,V1,R$\n270 GOTO 170\n280 PRINT\n290 IF F=0 THEN 320\n300 PRINT \"*** TEST FAILED IN \";F;\" CASE(S) ***\"\n310 GOTO 330\n320 PRINT \"*** TEST PASSED ***\"\n330 PRINT\n340 PRINT \"                 END TEST\"\n350 PRINT\n360 PRINT \"END PROGRAM 116\"\n370 DATA 0,0,1,1,-1,-1,3,1,-4,-1,86.1234,1,-345.678E22,-1\n380 DATA +22.2222E-33,1,.0000000123,1\n390 DATA 1E38,1,-1E38,-1,1E-38,1,-1E-38,-1,-0,0,+0,0\n400 DATA -00.00E11,0\n410 DATA 999,999\n420 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 170 READ A,V
+ 180 IF A=999 THEN 280
+ 190 LET V1=SGN(A)
+ 210 LET R$=" OK "
+ 220 IF V=V1 THEN 260
+ 240 LET R$="FAIL"
+ 250 LET F=F+1
+ 260 PRINT A,V,V1,R$
+ 270 GOTO 170
+ 280 PRINT
+ 290 IF F=0 THEN 320
+ 300 PRINT "*** TEST FAILED IN ";F;" CASE(S) ***"
+ 310 GOTO 330
+ 320 PRINT "*** TEST PASSED ***"
+ 330 PRINT
+ 340 PRINT "                 END TEST"
+ 350 PRINT
+ 360 PRINT "END PROGRAM 116"
+ 370 DATA 0,0,1,1,-1,-1,3,1,-4,-1,86.1234,1,-345.678E22,-1
+ 380 DATA +22.2222E-33,1,.0000000123,1
+ 390 DATA 1E38,1,-1E38,-1,1E-38,1,-1E-38,-1,-0,0,+0,0
+ 400 DATA -00.00E11,0
+ 410 DATA 999,999
+ 420 END
+ 
', tests/integration.rs:37:13

---- P113 stdout ----
thread 'P113' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 INPUT A,,B\n280 PRINT \"A = \";A;\"      B = \";B\n290 PRINT\n300 PRINT \"               END TEST\"\n310 PRINT\n320 PRINT \"END PROGRAM 113\"\n330 END\n"`,
 right: `"270: error: syntax error \n INPUT A,,B\n         ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 INPUT A,,B
+ 280 PRINT "A = ";A;"      B = ";B
+ 290 PRINT
+ 300 PRINT "               END TEST"
+ 310 PRINT
+ 320 PRINT "END PROGRAM 113"
+ 330 END
- 270: error: syntax error 
-  INPUT A,,B
-          ^
', tests/integration.rs:37:13

---- P115 stdout ----
thread 'P115' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 READ A,V\n190 IF A=999 THEN 300\n200 LET V1=INT(A)\n210 IF V=V1 THEN 280\n250 LET F=F+1\n260 PRINT A,V,V1,\"FAIL\"\n270 GOTO 180\n280 PRINT A,V,V1,\" OK \"\n290 GOTO 180\n300 REM DISPLAY RESULTS\n310 PRINT\n320 IF F=0 THEN 350\n330 PRINT \"*** TEST FAILED IN \";F;\" CASE(S) ***\"\n340 GOTO 360\n350 PRINT \"*** TEST PASSED ***\"\n360 PRINT\n370 PRINT \"                END TEST\"\n380 PRINT\n390 PRINT\n400 PRINT \"SECTION 115.2 EVALUATION OF INT FUNCTION FOR VALUES\"\n410 PRINT \"        OF LARGE MAGNITUDE.\"\n420 PRINT\n430 PRINT \"THIS IS AN INFORMATIVE TEST TO EXAMINE THE BEHAVIOR OF\"\n440 PRINT \"THE INT FUNCTION WHEN THE RESULT DEPENDS ON CALCULATION\"\n450 PRINT \"BEYOND SIX DECIMAL DIGITS. THIS SECTION IS NOT CONSIDERED\"\n460 PRINT \"EITHER TO PAS OR FAIL.\"\n470 PRINT\n480 PRINT \"               BEGIN TEST\"\n490 PRINT\n500 PRINT \" \",\"CORRECT\",\"ACTUAL\"\n510 PRINT \"ARGUMENT\",\"VALUE\",\"VALUE\"\n520 PRINT\n530 READ A,A$,V$\n540 IF A=999 THEN 580\n550 LET V=INT(A)\n560 PRINT A$,V$,V\n570 GOTO 530\n580 PRINT\n590 PRINT \"                END TEST\"\n600 PRINT\n610 PRINT \"END PROGRAM 115\"\n620 DATA 3,3,-3,-3,2.1,2,2.9,2,-2.1,-3,-2.9,-3\n630 DATA 1,1,-1,-1,0,0,.1,0,.9,0,-.1,-1,-.9,-1\n640 DATA 1234.2,1234,1234.9,1234,-12345.6,-12346\n650 DATA 3.99999,3,-44.0001,-45\n660 DATA -123E2,-12300,-456E-2,-5,789999E-4,78\n670 DATA 1E-38,0,123.45678E-3,0,123.456E-33,0\n680 DATA -1E-38,-1,-123.45678E-3,-1,-123.456E-33,-1\n690 DATA 999,999\n700 DATA 987654.1,\"987654.1\",\"987654\",987654.9,\"987654.9\",\"987654\"\n710 DATA 1234567.9,\"1234567.9\",\"1234567\",12345678.9,\"12345678.9\"\n720 DATA \"12345678\",123456789.9,\"123456789.9\",\"123456789\"\n730 DATA 1234567890.9,\"1234567890.9\",\"1234567890\"\n740 DATA -987654.1,\"-987654.1\",\"-987655\"\n750 DATA -987654.9,\"-987654.9\",\"-987655\"\n760 DATA -1234567.1,\"-1234567.1\",\"-1234568\"\n770 DATA -12345678.1,\"-12345678.1\",\"-123456789\"\n780 DATA -123456789.1,\"-123456789.1\",\"-123456790\"\n790 DATA -1234567890.1,\"-1234567890.1\",\"-1234567891\"\n2000 DATA 999,\"Q\",\"Q\"\n2010 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 READ A,V
+ 190 IF A=999 THEN 300
+ 200 LET V1=INT(A)
+ 210 IF V=V1 THEN 280
+ 250 LET F=F+1
+ 260 PRINT A,V,V1,"FAIL"
+ 270 GOTO 180
+ 280 PRINT A,V,V1," OK "
+ 290 GOTO 180
+ 300 REM DISPLAY RESULTS
+ 310 PRINT
+ 320 IF F=0 THEN 350
+ 330 PRINT "*** TEST FAILED IN ";F;" CASE(S) ***"
+ 340 GOTO 360
+ 350 PRINT "*** TEST PASSED ***"
+ 360 PRINT
+ 370 PRINT "                END TEST"
+ 380 PRINT
+ 390 PRINT
+ 400 PRINT "SECTION 115.2 EVALUATION OF INT FUNCTION FOR VALUES"
+ 410 PRINT "        OF LARGE MAGNITUDE."
+ 420 PRINT
+ 430 PRINT "THIS IS AN INFORMATIVE TEST TO EXAMINE THE BEHAVIOR OF"
+ 440 PRINT "THE INT FUNCTION WHEN THE RESULT DEPENDS ON CALCULATION"
+ 450 PRINT "BEYOND SIX DECIMAL DIGITS. THIS SECTION IS NOT CONSIDERED"
+ 460 PRINT "EITHER TO PAS OR FAIL."
+ 470 PRINT
+ 480 PRINT "               BEGIN TEST"
+ 490 PRINT
+ 500 PRINT " ","CORRECT","ACTUAL"
+ 510 PRINT "ARGUMENT","VALUE","VALUE"
+ 520 PRINT
+ 530 READ A,A$,V$
+ 540 IF A=999 THEN 580
+ 550 LET V=INT(A)
+ 560 PRINT A$,V$,V
+ 570 GOTO 530
+ 580 PRINT
+ 590 PRINT "                END TEST"
+ 600 PRINT
+ 610 PRINT "END PROGRAM 115"
+ 620 DATA 3,3,-3,-3,2.1,2,2.9,2,-2.1,-3,-2.9,-3
+ 630 DATA 1,1,-1,-1,0,0,.1,0,.9,0,-.1,-1,-.9,-1
+ 640 DATA 1234.2,1234,1234.9,1234,-12345.6,-12346
+ 650 DATA 3.99999,3,-44.0001,-45
+ 660 DATA -123E2,-12300,-456E-2,-5,789999E-4,78
+ 670 DATA 1E-38,0,123.45678E-3,0,123.456E-33,0
+ 680 DATA -1E-38,-1,-123.45678E-3,-1,-123.456E-33,-1
+ 690 DATA 999,999
+ 700 DATA 987654.1,"987654.1","987654",987654.9,"987654.9","987654"
+ 710 DATA 1234567.9,"1234567.9","1234567",12345678.9,"12345678.9"
+ 720 DATA "12345678",123456789.9,"123456789.9","123456789"
+ 730 DATA 1234567890.9,"1234567890.9","1234567890"
+ 740 DATA -987654.1,"-987654.1","-987655"
+ 750 DATA -987654.9,"-987654.9","-987655"
+ 760 DATA -1234567.1,"-1234567.1","-1234568"
+ 770 DATA -12345678.1,"-12345678.1","-123456789"
+ 780 DATA -123456789.1,"-123456789.1","-123456790"
+ 790 DATA -1234567890.1,"-1234567890.1","-1234567891"
+ 2000 DATA 999,"Q","Q"
+ 2010 END
+ 
', tests/integration.rs:37:13

---- P117 stdout ----
thread 'P117' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=SQR(A)\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK  - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 117\"\n2990 DATA 0,0,0,0\n3000 DATA  1.000000000E-38, 0.100000000E-18\n3010 DATA  0.999994499E-19, 0.100001000E-18\n3040 DATA  0.999999000E-37, 0.316227608E-18\n3050 DATA  0.316226949E-18, 0.316228267E-18\n3052 DATA  0.900000000E-37, 0.300000000E-18\n3055 DATA  0.299999333E-18, 0.300000667E-18\n3060 DATA  0.999999000E-36, 0.999999500E-18\n3070 DATA  0.999998499E-18, 0.100000500E-17\n3080 DATA  0.999999000E-30, 0.999999500E-15\n3090 DATA  0.999998499E-15, 1.000000500E-15\n3100 DATA  0.123456000E-19, 0.111110756E-09\n3110 DATA  0.111109805E-09, 0.111111706E-09\n3120 DATA  0.654321000E-04, 0.808901106E-02\n3130 DATA  0.808899988E-02, 0.808902225E-02\n3140 DATA  0.500000000E+00, 0.707106781E+00\n3150 DATA  0.707105574E+00, 0.707107989E+00\n3160 DATA  0.100000000E+01, 0.100000000E+01\n3170 DATA  0.999994499E+00, 0.100001000E+01\n3180 DATA  0.999999000E+00, 0.999999500E+00\n3190 DATA  0.999998499E+00, 0.100000500E+01\n3200 DATA  0.200000000E+01, 0.141421356E+01\n3210 DATA  0.141420502E+01, 0.141422210E+01\n3220 DATA  0.300000000E+01, 0.173205081E+01\n3230 DATA  0.173204292E+01, 0.173205870E+01\n3240 DATA  0.400000000E+01, 0.200000000E+01\n3250 DATA  0.199999249E+01, 0.200000750E+01\n3260 DATA  0.500000000E+01, 0.223606798E+01\n3270 DATA  0.223606074E+01, 0.223607522E+01\n3280 DATA  0.999999000E+01, 0.316227608E+01\n3290 DATA  0.316226949E+01, 0.316228267E+01\n3300 DATA  0.100000000E+02, 0.316227766E+01\n3310 DATA  0.316225684E+01, 0.316229848E+01\n3320 DATA  0.400000000E+05, 0.200000000E+03\n3330 DATA  0.199999249E+03, 0.200000750E+03\n3340 DATA  0.123456000E+09, 0.111110756E+05\n3350 DATA  0.111109805E+05, 0.111111706E+05\n3360 DATA  0.654321000E+21, 0.255796990E+11\n3370 DATA  0.255796294E+11, 0.255797686E+11\n3380 DATA  0.999999000E+32, 0.999999500E+16\n3390 DATA  0.999998499E+16, 1.000000500E+16\n3392 DATA  0.900000000E+37, 0.300000000E+19\n3394 DATA  0.299999333E+19, 0.300000667E+19\n3400 DATA  0.100000000E+39, 1.000000000E+19\n3410 DATA  0.999994499E+19, 0.100001000E+20\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=SQR(A)
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK  - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 117"
+ 2990 DATA 0,0,0,0
+ 3000 DATA  1.000000000E-38, 0.100000000E-18
+ 3010 DATA  0.999994499E-19, 0.100001000E-18
+ 3040 DATA  0.999999000E-37, 0.316227608E-18
+ 3050 DATA  0.316226949E-18, 0.316228267E-18
+ 3052 DATA  0.900000000E-37, 0.300000000E-18
+ 3055 DATA  0.299999333E-18, 0.300000667E-18
+ 3060 DATA  0.999999000E-36, 0.999999500E-18
+ 3070 DATA  0.999998499E-18, 0.100000500E-17
+ 3080 DATA  0.999999000E-30, 0.999999500E-15
+ 3090 DATA  0.999998499E-15, 1.000000500E-15
+ 3100 DATA  0.123456000E-19, 0.111110756E-09
+ 3110 DATA  0.111109805E-09, 0.111111706E-09
+ 3120 DATA  0.654321000E-04, 0.808901106E-02
+ 3130 DATA  0.808899988E-02, 0.808902225E-02
+ 3140 DATA  0.500000000E+00, 0.707106781E+00
+ 3150 DATA  0.707105574E+00, 0.707107989E+00
+ 3160 DATA  0.100000000E+01, 0.100000000E+01
+ 3170 DATA  0.999994499E+00, 0.100001000E+01
+ 3180 DATA  0.999999000E+00, 0.999999500E+00
+ 3190 DATA  0.999998499E+00, 0.100000500E+01
+ 3200 DATA  0.200000000E+01, 0.141421356E+01
+ 3210 DATA  0.141420502E+01, 0.141422210E+01
+ 3220 DATA  0.300000000E+01, 0.173205081E+01
+ 3230 DATA  0.173204292E+01, 0.173205870E+01
+ 3240 DATA  0.400000000E+01, 0.200000000E+01
+ 3250 DATA  0.199999249E+01, 0.200000750E+01
+ 3260 DATA  0.500000000E+01, 0.223606798E+01
+ 3270 DATA  0.223606074E+01, 0.223607522E+01
+ 3280 DATA  0.999999000E+01, 0.316227608E+01
+ 3290 DATA  0.316226949E+01, 0.316228267E+01
+ 3300 DATA  0.100000000E+02, 0.316227766E+01
+ 3310 DATA  0.316225684E+01, 0.316229848E+01
+ 3320 DATA  0.400000000E+05, 0.200000000E+03
+ 3330 DATA  0.199999249E+03, 0.200000750E+03
+ 3340 DATA  0.123456000E+09, 0.111110756E+05
+ 3350 DATA  0.111109805E+05, 0.111111706E+05
+ 3360 DATA  0.654321000E+21, 0.255796990E+11
+ 3370 DATA  0.255796294E+11, 0.255797686E+11
+ 3380 DATA  0.999999000E+32, 0.999999500E+16
+ 3390 DATA  0.999998499E+16, 1.000000500E+16
+ 3392 DATA  0.900000000E+37, 0.300000000E+19
+ 3394 DATA  0.299999333E+19, 0.300000667E+19
+ 3400 DATA  0.100000000E+39, 1.000000000E+19
+ 3410 DATA  0.999994499E+19, 0.100001000E+20
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P118 stdout ----
thread 'P118' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 LET A=(-3)\n240 LET B=SQR(A)\n255 PRINT \"***  TEST FAILED  ***\"\n257 PRINT\n260 PRINT \"ARGUMENT WAS SET TO -3; IT NOW EQUALS \";A\n270 PRINT \"RESULT OF SQR IS \";B\n280 PRINT\n330 PRINT\n340 PRINT \"                                 END TEST\"\n350 PRINT\n360 PRINT \"END PROGRAM 118\"\n370 END\n"`,
 right: `"240: error: function domain error SQR(-3)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 LET A=(-3)
+ 240 LET B=SQR(A)
+ 255 PRINT "***  TEST FAILED  ***"
+ 257 PRINT
+ 260 PRINT "ARGUMENT WAS SET TO -3; IT NOW EQUALS ";A
+ 270 PRINT "RESULT OF SQR IS ";B
+ 280 PRINT
+ 330 PRINT
+ 340 PRINT "                                 END TEST"
+ 350 PRINT
+ 360 PRINT "END PROGRAM 118"
+ 370 END
- 240: error: function domain error SQR(-3)
', tests/integration.rs:37:13

---- P122 stdout ----
thread 'P122' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET C=EXP(A)\n260 PRINT \"VALUE RETURNED BY EXP = \";C\n270 PRINT\n280 PRINT \"---------------------------------------\"\n290 PRINT\n300 IF B=C THEN 350\n310 LET B=C\n320 LET F=F*1.1\n330 LET A=A*F\n340 GOTO 240\n350 PRINT \"LAST TWO INVOCATIONS OF EXP SHOULD HAVE BEEN REPORTED\"\n360 PRINT \"AS OVERFLOW, AND MACHINE INFINITY SUPPLIED; IF SO,\"\n370 PRINT \"***  TEST PASSED  ***  OTHERWISE  ***  TEST FAILED  ***\"\n380 PRINT\n390 PRINT \"                               END TEST.\"\n400 PRINT\n410 PRINT \"END PROGRAM 122\"\n420 END\n"`,
 right: `"250: warning: operation overflow EXP(1140.57)\n250: warning: operation overflow EXP(2444.91)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET C=EXP(A)
+ 260 PRINT "VALUE RETURNED BY EXP = ";C
+ 270 PRINT
+ 280 PRINT "---------------------------------------"
+ 290 PRINT
+ 300 IF B=C THEN 350
+ 310 LET B=C
+ 320 LET F=F*1.1
+ 330 LET A=A*F
+ 340 GOTO 240
+ 350 PRINT "LAST TWO INVOCATIONS OF EXP SHOULD HAVE BEEN REPORTED"
+ 360 PRINT "AS OVERFLOW, AND MACHINE INFINITY SUPPLIED; IF SO,"
+ 370 PRINT "***  TEST PASSED  ***  OTHERWISE  ***  TEST FAILED  ***"
+ 380 PRINT
+ 390 PRINT "                               END TEST."
+ 400 PRINT
+ 410 PRINT "END PROGRAM 122"
+ 420 END
- 250: warning: operation overflow EXP(1140.57)
- 250: warning: operation overflow EXP(2444.91)
', tests/integration.rs:37:13

---- P119 stdout ----
thread 'P119' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=ATN(A)\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK  - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 119\"\n3000 DATA -0.100000000E+39,-0.157079633E+01\n3010 DATA -0.157080133E+01,-0.157079132E+01\n3020 DATA -0.999999000E+38,-0.157079633E+01\n3030 DATA -0.157080133E+01,-0.157079132E+01\n3040 DATA -0.300000000E+31,-0.157079633E+01\n3050 DATA -0.157080133E+01,-0.157079132E+01\n3060 DATA -0.200000000E+21,-0.157079633E+01\n3070 DATA -0.157080133E+01,-0.157079132E+01\n3080 DATA -0.900000000E+11,-0.157079633E+01\n3090 DATA -0.157080133E+01,-0.157079132E+01\n3100 DATA -0.900000000E+06,-0.157079522E+01\n3110 DATA -0.157080022E+01,-0.157079021E+01\n3120 DATA -0.300000000E+06,-0.157079299E+01\n3130 DATA -0.157079800E+01,-0.157078799E+01\n3140 DATA -0.200000000E+06,-0.157079133E+01\n3150 DATA -0.157079633E+01,-0.157078632E+01\n3160 DATA -0.100000000E+06,-0.157078633E+01\n3170 DATA -0.157079133E+01,-0.157078132E+01\n3180 DATA -0.987654000E+05,-0.157078620E+01\n3190 DATA -0.157079121E+01,-0.157078120E+01\n3200 DATA -0.987654000E+04,-0.157069508E+01\n3210 DATA -0.157070008E+01,-0.157069007E+01\n3220 DATA -0.987600000E+03,-0.156978377E+01\n3230 DATA -0.156978878E+01,-0.156977877E+01\n3240 DATA -0.987000000E+02,-0.156066496E+01\n3250 DATA -0.156066998E+01,-0.156065995E+01\n3260 DATA -0.980000000E+01,-0.146910748E+01\n3270 DATA -0.146911258E+01,-0.146910237E+01\n3280 DATA -0.880000000E+01,-0.145764535E+01\n3290 DATA -0.145765048E+01,-0.145764021E+01\n3300 DATA -0.770000000E+01,-0.144164904E+01\n3310 DATA -0.144165421E+01,-0.144164387E+01\n3320 DATA -0.660000000E+01,-0.142042490E+01\n3330 DATA -0.142043013E+01,-0.142041967E+01\n3340 DATA -0.550000000E+01,-0.139094283E+01\n3350 DATA -0.139094815E+01,-0.139093750E+01\n3360 DATA -0.440000000E+01,-0.134731973E+01\n3370 DATA -0.134732522E+01,-0.134731423E+01\n3380 DATA -0.330000000E+01,-0.127656176E+01\n3390 DATA -0.127656761E+01,-0.127655592E+01\n3400 DATA -0.220000000E+01,-0.114416883E+01\n3410 DATA -0.114417555E+01,-0.114416212E+01\n3420 DATA -0.110000000E+01,-0.832981267E+00\n3430 DATA -0.832986292E+00,-0.832976241E+00\n3440 DATA -0.900000000E+00,-0.732815102E+00\n3450 DATA -0.732816155E+00,-0.732814049E+00\n3460 DATA -0.600000000E+00,-0.540419500E+00\n3470 DATA -0.540420736E+00,-0.540418264E+00\n3480 DATA -0.100000000E+00,-0.996686525E-01\n3490 DATA -0.996696926E-01,-0.996676123E-01\n3500 DATA -0.900000000E-01,-0.897581742E-01\n3510 DATA -0.897583234E-01,-0.897580249E-01\n3520 DATA -0.900000000E-02,-0.899975701E-02\n3530 DATA -0.899977202E-02,-0.899974201E-02\n3540 DATA -0.600000000E-02,-0.599992800E-02\n3550 DATA -0.599994301E-02,-0.599991300E-02\n3560 DATA -0.300000000E-02,-0.299999100E-02\n3570 DATA -0.300000600E-02,-0.299997600E-02\n3580 DATA -0.200000000E-02,-0.199999733E-02\n3590 DATA -0.200001234E-02,-0.199998233E-02\n3600 DATA -0.100000000E-02,-0.999999667E-03\n3610 DATA -0.100001467E-02,-0.999989166E-03\n3620 DATA -0.900000000E-03,-0.899999757E-03\n3630 DATA -0.900001257E-03,-0.899998257E-03\n3640 DATA -0.400000000E-03,-0.399999979E-03\n3650 DATA -0.400001479E-03,-0.399998478E-03\n3660 DATA -0.900000000E-04,-0.899999998E-04\n3670 DATA -0.900001498E-04,-0.899998497E-04\n3680 DATA -0.900000000E-09,-0.900000000E-09\n3690 DATA -0.900001500E-09,-0.899998500E-09\n3700 DATA -0.900000000E-19,-0.900000000E-19\n3710 DATA -0.900001500E-19,-0.899998500E-19\n3720 DATA -0.900000000E-29,-0.900000000E-29\n3730 DATA -0.900001500E-29,-0.899998500E-29\n3740 DATA -0.900000000E-37,-0.900000000E-37\n3750 DATA -0.900001500E-37,-0.899998500E-37\n3760 DATA  0,0,0,0\n3780 DATA  0.900000000E-37, 0.900000000E-37\n3790 DATA  0.899998500E-37, 0.900001500E-37\n3820 DATA  0.900000000E-29, 0.900000000E-29\n3830 DATA  0.899998500E-29, 0.900001500E-29\n3840 DATA  0.900000000E-19, 0.900000000E-19\n3850 DATA  0.899998500E-19, 0.900001500E-19\n3860 DATA  0.900000000E-09, 0.900000000E-09\n3870 DATA  0.899998500E-09, 0.900001500E-09\n3880 DATA  0.900000000E-04, 0.899999998E-04\n3890 DATA  0.899998497E-04, 0.900001498E-04\n3900 DATA  0.400000000E-03, 0.399999979E-03\n3910 DATA  0.399998478E-03, 0.400001479E-03\n3920 DATA  0.900000000E-03, 0.899999757E-03\n3930 DATA  0.899998257E-03, 0.900001257E-03\n3940 DATA  0.100000000E-02, 0.999999667E-03\n3950 DATA  0.999989166E-03, 0.100001467E-02\n3960 DATA  0.200000000E-02, 0.199999733E-02\n3970 DATA  0.199998233E-02, 0.200001234E-02\n3980 DATA  0.300000000E-02, 0.299999100E-02\n3990 DATA  0.299997600E-02, 0.300000600E-02\n4000 DATA  0.600000000E-02, 0.599992800E-02\n4010 DATA  0.599991300E-02, 0.599994301E-02\n4020 DATA  0.900000000E-02, 0.899975701E-02\n4030 DATA  0.899974201E-02, 0.899977202E-02\n4040 DATA  0.900000000E-01, 0.897581742E-01\n4050 DATA  0.897580249E-01, 0.897583234E-01\n4060 DATA  0.100000000E+00, 0.996686525E-01\n4070 DATA  0.996676123E-01, 0.996696926E-01\n4080 DATA  0.600000000E+00, 0.540419500E+00\n4090 DATA  0.540418264E+00, 0.540420736E+00\n4100 DATA  0.900000000E+00, 0.732815102E+00\n4110 DATA  0.732814049E+00, 0.732816155E+00\n4120 DATA  0.110000000E+01, 0.832981267E+00\n4130 DATA  0.832976241E+00, 0.832986292E+00\n4140 DATA  0.220000000E+01, 0.114416883E+01\n4150 DATA  0.114416212E+01, 0.114417555E+01\n4160 DATA  0.330000000E+01, 0.127656176E+01\n4170 DATA  0.127655592E+01, 0.127656761E+01\n4180 DATA  0.440000000E+01, 0.134731973E+01\n4190 DATA  0.134731423E+01, 0.134732522E+01\n4200 DATA  0.550000000E+01, 0.139094283E+01\n4210 DATA  0.139093750E+01, 0.139094815E+01\n4220 DATA  0.660000000E+01, 0.142042490E+01\n4230 DATA  0.142041967E+01, 0.142043013E+01\n4240 DATA  0.770000000E+01, 0.144164904E+01\n4250 DATA  0.144164387E+01, 0.144165421E+01\n4260 DATA  0.880000000E+01, 0.145764535E+01\n4270 DATA  0.145764021E+01, 0.145765048E+01\n4280 DATA  0.990000000E+01, 0.147012767E+01\n4290 DATA  0.147012257E+01, 0.147013278E+01\n4300 DATA  0.987000000E+02, 0.156066496E+01\n4310 DATA  0.156065995E+01, 0.156066998E+01\n4320 DATA  0.987600000E+03, 0.156978377E+01\n4330 DATA  0.156977877E+01, 0.156978878E+01\n4340 DATA  0.987654000E+04, 0.157069508E+01\n4350 DATA  0.157069007E+01, 0.157070008E+01\n4360 DATA  0.987654000E+05, 0.157078620E+01\n4370 DATA  0.157078120E+01, 0.157079121E+01\n4380 DATA  0.100000000E+06, 0.157078633E+01\n4390 DATA  0.157078132E+01, 0.157079133E+01\n4400 DATA  0.200000000E+06, 0.157079133E+01\n4410 DATA  0.157078632E+01, 0.157079633E+01\n4420 DATA  0.300000000E+06, 0.157079299E+01\n4430 DATA  0.157078799E+01, 0.157079800E+01\n4440 DATA  0.900000000E+06, 0.157079522E+01\n4450 DATA  0.157079021E+01, 0.157080022E+01\n4460 DATA  0.900000000E+11, 0.157079633E+01\n4470 DATA  0.157079132E+01, 0.157080133E+01\n4480 DATA  0.200000000E+21, 0.157079633E+01\n4490 DATA  0.157079132E+01, 0.157080133E+01\n4500 DATA  0.300000000E+31, 0.157079633E+01\n4510 DATA  0.157079132E+01, 0.157080133E+01\n4520 DATA  0.999999000E+38, 0.157079633E+01\n4530 DATA  0.157079132E+01, 0.157080133E+01\n4540 DATA  0.100000000E+39, 0.157079633E+01\n4550 DATA  0.157079132E+01, 0.157080133E+01\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=ATN(A)
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK  - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 119"
+ 3000 DATA -0.100000000E+39,-0.157079633E+01
+ 3010 DATA -0.157080133E+01,-0.157079132E+01
+ 3020 DATA -0.999999000E+38,-0.157079633E+01
+ 3030 DATA -0.157080133E+01,-0.157079132E+01
+ 3040 DATA -0.300000000E+31,-0.157079633E+01
+ 3050 DATA -0.157080133E+01,-0.157079132E+01
+ 3060 DATA -0.200000000E+21,-0.157079633E+01
+ 3070 DATA -0.157080133E+01,-0.157079132E+01
+ 3080 DATA -0.900000000E+11,-0.157079633E+01
+ 3090 DATA -0.157080133E+01,-0.157079132E+01
+ 3100 DATA -0.900000000E+06,-0.157079522E+01
+ 3110 DATA -0.157080022E+01,-0.157079021E+01
+ 3120 DATA -0.300000000E+06,-0.157079299E+01
+ 3130 DATA -0.157079800E+01,-0.157078799E+01
+ 3140 DATA -0.200000000E+06,-0.157079133E+01
+ 3150 DATA -0.157079633E+01,-0.157078632E+01
+ 3160 DATA -0.100000000E+06,-0.157078633E+01
+ 3170 DATA -0.157079133E+01,-0.157078132E+01
+ 3180 DATA -0.987654000E+05,-0.157078620E+01
+ 3190 DATA -0.157079121E+01,-0.157078120E+01
+ 3200 DATA -0.987654000E+04,-0.157069508E+01
+ 3210 DATA -0.157070008E+01,-0.157069007E+01
+ 3220 DATA -0.987600000E+03,-0.156978377E+01
+ 3230 DATA -0.156978878E+01,-0.156977877E+01
+ 3240 DATA -0.987000000E+02,-0.156066496E+01
+ 3250 DATA -0.156066998E+01,-0.156065995E+01
+ 3260 DATA -0.980000000E+01,-0.146910748E+01
+ 3270 DATA -0.146911258E+01,-0.146910237E+01
+ 3280 DATA -0.880000000E+01,-0.145764535E+01
+ 3290 DATA -0.145765048E+01,-0.145764021E+01
+ 3300 DATA -0.770000000E+01,-0.144164904E+01
+ 3310 DATA -0.144165421E+01,-0.144164387E+01
+ 3320 DATA -0.660000000E+01,-0.142042490E+01
+ 3330 DATA -0.142043013E+01,-0.142041967E+01
+ 3340 DATA -0.550000000E+01,-0.139094283E+01
+ 3350 DATA -0.139094815E+01,-0.139093750E+01
+ 3360 DATA -0.440000000E+01,-0.134731973E+01
+ 3370 DATA -0.134732522E+01,-0.134731423E+01
+ 3380 DATA -0.330000000E+01,-0.127656176E+01
+ 3390 DATA -0.127656761E+01,-0.127655592E+01
+ 3400 DATA -0.220000000E+01,-0.114416883E+01
+ 3410 DATA -0.114417555E+01,-0.114416212E+01
+ 3420 DATA -0.110000000E+01,-0.832981267E+00
+ 3430 DATA -0.832986292E+00,-0.832976241E+00
+ 3440 DATA -0.900000000E+00,-0.732815102E+00
+ 3450 DATA -0.732816155E+00,-0.732814049E+00
+ 3460 DATA -0.600000000E+00,-0.540419500E+00
+ 3470 DATA -0.540420736E+00,-0.540418264E+00
+ 3480 DATA -0.100000000E+00,-0.996686525E-01
+ 3490 DATA -0.996696926E-01,-0.996676123E-01
+ 3500 DATA -0.900000000E-01,-0.897581742E-01
+ 3510 DATA -0.897583234E-01,-0.897580249E-01
+ 3520 DATA -0.900000000E-02,-0.899975701E-02
+ 3530 DATA -0.899977202E-02,-0.899974201E-02
+ 3540 DATA -0.600000000E-02,-0.599992800E-02
+ 3550 DATA -0.599994301E-02,-0.599991300E-02
+ 3560 DATA -0.300000000E-02,-0.299999100E-02
+ 3570 DATA -0.300000600E-02,-0.299997600E-02
+ 3580 DATA -0.200000000E-02,-0.199999733E-02
+ 3590 DATA -0.200001234E-02,-0.199998233E-02
+ 3600 DATA -0.100000000E-02,-0.999999667E-03
+ 3610 DATA -0.100001467E-02,-0.999989166E-03
+ 3620 DATA -0.900000000E-03,-0.899999757E-03
+ 3630 DATA -0.900001257E-03,-0.899998257E-03
+ 3640 DATA -0.400000000E-03,-0.399999979E-03
+ 3650 DATA -0.400001479E-03,-0.399998478E-03
+ 3660 DATA -0.900000000E-04,-0.899999998E-04
+ 3670 DATA -0.900001498E-04,-0.899998497E-04
+ 3680 DATA -0.900000000E-09,-0.900000000E-09
+ 3690 DATA -0.900001500E-09,-0.899998500E-09
+ 3700 DATA -0.900000000E-19,-0.900000000E-19
+ 3710 DATA -0.900001500E-19,-0.899998500E-19
+ 3720 DATA -0.900000000E-29,-0.900000000E-29
+ 3730 DATA -0.900001500E-29,-0.899998500E-29
+ 3740 DATA -0.900000000E-37,-0.900000000E-37
+ 3750 DATA -0.900001500E-37,-0.899998500E-37
+ 3760 DATA  0,0,0,0
+ 3780 DATA  0.900000000E-37, 0.900000000E-37
+ 3790 DATA  0.899998500E-37, 0.900001500E-37
+ 3820 DATA  0.900000000E-29, 0.900000000E-29
+ 3830 DATA  0.899998500E-29, 0.900001500E-29
+ 3840 DATA  0.900000000E-19, 0.900000000E-19
+ 3850 DATA  0.899998500E-19, 0.900001500E-19
+ 3860 DATA  0.900000000E-09, 0.900000000E-09
+ 3870 DATA  0.899998500E-09, 0.900001500E-09
+ 3880 DATA  0.900000000E-04, 0.899999998E-04
+ 3890 DATA  0.899998497E-04, 0.900001498E-04
+ 3900 DATA  0.400000000E-03, 0.399999979E-03
+ 3910 DATA  0.399998478E-03, 0.400001479E-03
+ 3920 DATA  0.900000000E-03, 0.899999757E-03
+ 3930 DATA  0.899998257E-03, 0.900001257E-03
+ 3940 DATA  0.100000000E-02, 0.999999667E-03
+ 3950 DATA  0.999989166E-03, 0.100001467E-02
+ 3960 DATA  0.200000000E-02, 0.199999733E-02
+ 3970 DATA  0.199998233E-02, 0.200001234E-02
+ 3980 DATA  0.300000000E-02, 0.299999100E-02
+ 3990 DATA  0.299997600E-02, 0.300000600E-02
+ 4000 DATA  0.600000000E-02, 0.599992800E-02
+ 4010 DATA  0.599991300E-02, 0.599994301E-02
+ 4020 DATA  0.900000000E-02, 0.899975701E-02
+ 4030 DATA  0.899974201E-02, 0.899977202E-02
+ 4040 DATA  0.900000000E-01, 0.897581742E-01
+ 4050 DATA  0.897580249E-01, 0.897583234E-01
+ 4060 DATA  0.100000000E+00, 0.996686525E-01
+ 4070 DATA  0.996676123E-01, 0.996696926E-01
+ 4080 DATA  0.600000000E+00, 0.540419500E+00
+ 4090 DATA  0.540418264E+00, 0.540420736E+00
+ 4100 DATA  0.900000000E+00, 0.732815102E+00
+ 4110 DATA  0.732814049E+00, 0.732816155E+00
+ 4120 DATA  0.110000000E+01, 0.832981267E+00
+ 4130 DATA  0.832976241E+00, 0.832986292E+00
+ 4140 DATA  0.220000000E+01, 0.114416883E+01
+ 4150 DATA  0.114416212E+01, 0.114417555E+01
+ 4160 DATA  0.330000000E+01, 0.127656176E+01
+ 4170 DATA  0.127655592E+01, 0.127656761E+01
+ 4180 DATA  0.440000000E+01, 0.134731973E+01
+ 4190 DATA  0.134731423E+01, 0.134732522E+01
+ 4200 DATA  0.550000000E+01, 0.139094283E+01
+ 4210 DATA  0.139093750E+01, 0.139094815E+01
+ 4220 DATA  0.660000000E+01, 0.142042490E+01
+ 4230 DATA  0.142041967E+01, 0.142043013E+01
+ 4240 DATA  0.770000000E+01, 0.144164904E+01
+ 4250 DATA  0.144164387E+01, 0.144165421E+01
+ 4260 DATA  0.880000000E+01, 0.145764535E+01
+ 4270 DATA  0.145764021E+01, 0.145765048E+01
+ 4280 DATA  0.990000000E+01, 0.147012767E+01
+ 4290 DATA  0.147012257E+01, 0.147013278E+01
+ 4300 DATA  0.987000000E+02, 0.156066496E+01
+ 4310 DATA  0.156065995E+01, 0.156066998E+01
+ 4320 DATA  0.987600000E+03, 0.156978377E+01
+ 4330 DATA  0.156977877E+01, 0.156978878E+01
+ 4340 DATA  0.987654000E+04, 0.157069508E+01
+ 4350 DATA  0.157069007E+01, 0.157070008E+01
+ 4360 DATA  0.987654000E+05, 0.157078620E+01
+ 4370 DATA  0.157078120E+01, 0.157079121E+01
+ 4380 DATA  0.100000000E+06, 0.157078633E+01
+ 4390 DATA  0.157078132E+01, 0.157079133E+01
+ 4400 DATA  0.200000000E+06, 0.157079133E+01
+ 4410 DATA  0.157078632E+01, 0.157079633E+01
+ 4420 DATA  0.300000000E+06, 0.157079299E+01
+ 4430 DATA  0.157078799E+01, 0.157079800E+01
+ 4440 DATA  0.900000000E+06, 0.157079522E+01
+ 4450 DATA  0.157079021E+01, 0.157080022E+01
+ 4460 DATA  0.900000000E+11, 0.157079633E+01
+ 4470 DATA  0.157079132E+01, 0.157080133E+01
+ 4480 DATA  0.200000000E+21, 0.157079633E+01
+ 4490 DATA  0.157079132E+01, 0.157080133E+01
+ 4500 DATA  0.300000000E+31, 0.157079633E+01
+ 4510 DATA  0.157079132E+01, 0.157080133E+01
+ 4520 DATA  0.999999000E+38, 0.157079633E+01
+ 4530 DATA  0.157079132E+01, 0.157080133E+01
+ 4540 DATA  0.100000000E+39, 0.157079633E+01
+ 4550 DATA  0.157079132E+01, 0.157080133E+01
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P121 stdout ----
thread 'P121' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=EXP(A)\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK  - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 121\"\n3000 DATA -0.874981000E+02, 0.100013354E-37\n3010 DATA  0.100002853E-37, 0.100023857E-37\n3020 DATA -0.859876000E+02, 0.452959954E-37\n3030 DATA  0.452914160E-37, 0.453005753E-37\n3040 DATA -0.750000000E+02, 0.267863696E-32\n3050 DATA  0.267836411E-32, 0.267890984E-32\n3060 DATA -0.444444000E+02, 0.498933114E-19\n3070 DATA  0.498882722E-19, 0.498983510E-19\n3080 DATA -0.234567000E+02, 0.649957001E-10\n3090 DATA  0.649891508E-10, 0.650022501E-10\n3100 DATA -0.777777000E+01, 0.418945382E-03\n3110 DATA  0.418940692E-03, 0.418950072E-03\n3120 DATA -0.222222000E+01, 0.108368264E+00\n3130 DATA  0.108366680E+00, 0.108369848E+00\n3140 DATA -0.100000000E+01, 0.367879441E+00\n3150 DATA  0.367875262E+00, 0.367883620E+00\n3160 DATA -0.999999000E+00, 0.367879809E+00\n3170 DATA  0.367878941E+00, 0.367880677E+00\n3180 DATA -0.456789000E+00, 0.633313955E+00\n3190 DATA  0.633312821E+00, 0.633315089E+00\n3200 DATA -0.987654000E-01, 0.905955220E+00\n3210 DATA  0.905954629E+00, 0.905955811E+00\n3220 DATA -0.987654000E-02, 0.990172073E+00\n3230 DATA  0.990171562E+00, 0.990172583E+00\n3240 DATA -0.987654000E-03, 0.999012834E+00\n3250 DATA  0.999012332E+00, 0.999013335E+00\n3260 DATA -0.987654000E-04, 0.999901239E+00\n3270 DATA  0.999900739E+00, 0.999901740E+00\n3280 DATA -0.987654000E-05, 0.999990124E+00\n3290 DATA  0.999989623E+00, 0.999990624E+00\n3300 DATA -0.987654000E-06, 0.999999012E+00\n3310 DATA  0.999998512E+00, 0.999999513E+00\n3320 DATA -0.987654000E-07, 0.999999901E+00\n3330 DATA  0.999999401E+00, 1.000000402E+00\n3340 DATA -0.987654000E-08, 0.999999990E+00\n3350 DATA  0.999999490E+00, 1.000000491E+00\n3360 DATA -0.987654000E-09, 0.999999999E+00\n3370 DATA  0.999999499E+00, 1.000000500E+00\n3380 DATA -0.987654000E-14, 1.000000000E+00\n3390 DATA  0.999999499E+00, 1.000000500E+00\n3400 DATA -0.987654000E-19, 1.000000000E+00\n3410 DATA  0.999999499E+00, 1.000000500E+00\n3420 DATA -0.987654000E-29, 1.000000000E+00\n3430 DATA  0.999999499E+00, 1.000000500E+00\n3442 DATA -0.987654000E-37, 1.000000000E+00\n3444 DATA  0.999999499E+00, 1.000000500E+00\n3445 DATA  0,1,1,1\n3446 DATA  0.987654000E-37, 0.100000000E+01\n3448 DATA  .0999995000E+01, 0.100000500E+01\n3449 DATA  0.987654000E-29, 0.100000000E+01\n3450 DATA  .0999995000E+01, 0.100000500E+01\n3460 DATA  0.987654000E-19, 0.100000000E+01\n3470 DATA  .0999995000E+01, 0.100000500E+01\n3480 DATA  0.987654000E-14, 0.100000000E+01\n3490 DATA  .0999995000E+01, 0.100000501E+01\n3500 DATA  0.987654000E-09, 0.100000000E+01\n3510 DATA  .0999995000E+01, 0.100000501E+01\n3520 DATA  0.987654000E-08, 0.100000001E+01\n3530 DATA  .0999995009E+01, 0.100000501E+01\n3540 DATA  0.987654000E-07, 0.100000010E+01\n3550 DATA  .0999995098E+01, 0.100000510E+01\n3560 DATA  0.987654000E-06, 0.100000099E+01\n3570 DATA  .0999995987E+01, 0.100000599E+01\n3580 DATA  0.987654000E-05, 0.100000988E+01\n3590 DATA  0.100000487E+01, 0.100001488E+01\n3600 DATA  0.987654000E-04, 0.100009877E+01\n3610 DATA  0.100009377E+01, 0.100010378E+01\n3620 DATA  0.987654000E-03, 0.100098814E+01\n3630 DATA  0.100098314E+01, 0.100099315E+01\n3640 DATA  0.987654000E-02, 0.100992547E+01\n3650 DATA  0.100992046E+01, 0.100993049E+01\n3660 DATA  0.987654000E-01, 0.110380732E+01\n3670 DATA  0.110380220E+01, 0.110381243E+01\n3680 DATA  0.456789000E+00, 0.157899568E+01\n3690 DATA  0.157898910E+01, 0.157900227E+01\n3700 DATA  0.999999000E+00, 0.271827911E+01\n3710 DATA  0.271827139E+01, 0.271828683E+01\n3720 DATA  0.100000000E+01, 0.271828183E+01\n3730 DATA  0.271824964E+01, 0.271831402E+01\n3740 DATA  0.222222000E+01, 0.922779385E+01\n3750 DATA  0.922769656E+01, 0.922789113E+01\n3760 DATA  0.777777000E+01, 0.238694599E+04\n3770 DATA  0.238691712E+04, 0.238697487E+04\n3780 DATA  0.234567000E+02, 0.153856332E+11\n3790 DATA  0.153840446E+11, 0.153872219E+11\n3800 DATA  0.444444000E+02, 0.200427667E+20\n3810 DATA  0.200407125E+20, 0.200448211E+20\n3820 DATA  0.750000000E+02, 0.373324200E+33\n3830 DATA  0.373286369E+33, 0.373362034E+33\n3840 DATA  0.859876000E+02, 0.220770068E+38\n3850 DATA  0.220747492E+38, 0.220792647E+38\n3860 DATA  0.874981000E+02, 0.999866475E+38\n3870 DATA  0.999765993E+38, 0.999966967E+38\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=EXP(A)
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK  - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 121"
+ 3000 DATA -0.874981000E+02, 0.100013354E-37
+ 3010 DATA  0.100002853E-37, 0.100023857E-37
+ 3020 DATA -0.859876000E+02, 0.452959954E-37
+ 3030 DATA  0.452914160E-37, 0.453005753E-37
+ 3040 DATA -0.750000000E+02, 0.267863696E-32
+ 3050 DATA  0.267836411E-32, 0.267890984E-32
+ 3060 DATA -0.444444000E+02, 0.498933114E-19
+ 3070 DATA  0.498882722E-19, 0.498983510E-19
+ 3080 DATA -0.234567000E+02, 0.649957001E-10
+ 3090 DATA  0.649891508E-10, 0.650022501E-10
+ 3100 DATA -0.777777000E+01, 0.418945382E-03
+ 3110 DATA  0.418940692E-03, 0.418950072E-03
+ 3120 DATA -0.222222000E+01, 0.108368264E+00
+ 3130 DATA  0.108366680E+00, 0.108369848E+00
+ 3140 DATA -0.100000000E+01, 0.367879441E+00
+ 3150 DATA  0.367875262E+00, 0.367883620E+00
+ 3160 DATA -0.999999000E+00, 0.367879809E+00
+ 3170 DATA  0.367878941E+00, 0.367880677E+00
+ 3180 DATA -0.456789000E+00, 0.633313955E+00
+ 3190 DATA  0.633312821E+00, 0.633315089E+00
+ 3200 DATA -0.987654000E-01, 0.905955220E+00
+ 3210 DATA  0.905954629E+00, 0.905955811E+00
+ 3220 DATA -0.987654000E-02, 0.990172073E+00
+ 3230 DATA  0.990171562E+00, 0.990172583E+00
+ 3240 DATA -0.987654000E-03, 0.999012834E+00
+ 3250 DATA  0.999012332E+00, 0.999013335E+00
+ 3260 DATA -0.987654000E-04, 0.999901239E+00
+ 3270 DATA  0.999900739E+00, 0.999901740E+00
+ 3280 DATA -0.987654000E-05, 0.999990124E+00
+ 3290 DATA  0.999989623E+00, 0.999990624E+00
+ 3300 DATA -0.987654000E-06, 0.999999012E+00
+ 3310 DATA  0.999998512E+00, 0.999999513E+00
+ 3320 DATA -0.987654000E-07, 0.999999901E+00
+ 3330 DATA  0.999999401E+00, 1.000000402E+00
+ 3340 DATA -0.987654000E-08, 0.999999990E+00
+ 3350 DATA  0.999999490E+00, 1.000000491E+00
+ 3360 DATA -0.987654000E-09, 0.999999999E+00
+ 3370 DATA  0.999999499E+00, 1.000000500E+00
+ 3380 DATA -0.987654000E-14, 1.000000000E+00
+ 3390 DATA  0.999999499E+00, 1.000000500E+00
+ 3400 DATA -0.987654000E-19, 1.000000000E+00
+ 3410 DATA  0.999999499E+00, 1.000000500E+00
+ 3420 DATA -0.987654000E-29, 1.000000000E+00
+ 3430 DATA  0.999999499E+00, 1.000000500E+00
+ 3442 DATA -0.987654000E-37, 1.000000000E+00
+ 3444 DATA  0.999999499E+00, 1.000000500E+00
+ 3445 DATA  0,1,1,1
+ 3446 DATA  0.987654000E-37, 0.100000000E+01
+ 3448 DATA  .0999995000E+01, 0.100000500E+01
+ 3449 DATA  0.987654000E-29, 0.100000000E+01
+ 3450 DATA  .0999995000E+01, 0.100000500E+01
+ 3460 DATA  0.987654000E-19, 0.100000000E+01
+ 3470 DATA  .0999995000E+01, 0.100000500E+01
+ 3480 DATA  0.987654000E-14, 0.100000000E+01
+ 3490 DATA  .0999995000E+01, 0.100000501E+01
+ 3500 DATA  0.987654000E-09, 0.100000000E+01
+ 3510 DATA  .0999995000E+01, 0.100000501E+01
+ 3520 DATA  0.987654000E-08, 0.100000001E+01
+ 3530 DATA  .0999995009E+01, 0.100000501E+01
+ 3540 DATA  0.987654000E-07, 0.100000010E+01
+ 3550 DATA  .0999995098E+01, 0.100000510E+01
+ 3560 DATA  0.987654000E-06, 0.100000099E+01
+ 3570 DATA  .0999995987E+01, 0.100000599E+01
+ 3580 DATA  0.987654000E-05, 0.100000988E+01
+ 3590 DATA  0.100000487E+01, 0.100001488E+01
+ 3600 DATA  0.987654000E-04, 0.100009877E+01
+ 3610 DATA  0.100009377E+01, 0.100010378E+01
+ 3620 DATA  0.987654000E-03, 0.100098814E+01
+ 3630 DATA  0.100098314E+01, 0.100099315E+01
+ 3640 DATA  0.987654000E-02, 0.100992547E+01
+ 3650 DATA  0.100992046E+01, 0.100993049E+01
+ 3660 DATA  0.987654000E-01, 0.110380732E+01
+ 3670 DATA  0.110380220E+01, 0.110381243E+01
+ 3680 DATA  0.456789000E+00, 0.157899568E+01
+ 3690 DATA  0.157898910E+01, 0.157900227E+01
+ 3700 DATA  0.999999000E+00, 0.271827911E+01
+ 3710 DATA  0.271827139E+01, 0.271828683E+01
+ 3720 DATA  0.100000000E+01, 0.271828183E+01
+ 3730 DATA  0.271824964E+01, 0.271831402E+01
+ 3740 DATA  0.222222000E+01, 0.922779385E+01
+ 3750 DATA  0.922769656E+01, 0.922789113E+01
+ 3760 DATA  0.777777000E+01, 0.238694599E+04
+ 3770 DATA  0.238691712E+04, 0.238697487E+04
+ 3780 DATA  0.234567000E+02, 0.153856332E+11
+ 3790 DATA  0.153840446E+11, 0.153872219E+11
+ 3800 DATA  0.444444000E+02, 0.200427667E+20
+ 3810 DATA  0.200407125E+20, 0.200448211E+20
+ 3820 DATA  0.750000000E+02, 0.373324200E+33
+ 3830 DATA  0.373286369E+33, 0.373362034E+33
+ 3840 DATA  0.859876000E+02, 0.220770068E+38
+ 3850 DATA  0.220747492E+38, 0.220792647E+38
+ 3860 DATA  0.874981000E+02, 0.999866475E+38
+ 3870 DATA  0.999765993E+38, 0.999966967E+38
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P057 stdout ----
thread 'P057' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n50 OPTION BASE 0\n90 PRINT \"SECTION 57.1: ONE-DIMENSIONAL ARRAYS WITHOUT THE\"\n95 PRINT \"        DIM STATEMENT.\"\n100 PRINT\n110 PRINT \"                               BEGIN TEST.\"\n120 PRINT\n130 FOR I=0 TO 10\n140 LET A(I)=I\n150 NEXT I\n160 LET A1=0\n170 LET C=0\n180 FOR I=10 TO 0 STEP -1\n190 LET Y=A(I)\n200 LET A1=A1+Y\n210 IF Y<>I THEN 230\n220 LET C=C+1\n230 NEXT I\n240 IF C<>11 THEN 260\n250 IF A1=55 THEN 280\n260 PRINT \"***  TEST FAILED   ***\"\n270 GOTO 290\n280 PRINT \"***  TEST PASSED   ***\"\n290 PRINT\n300 PRINT \"                               END TEST.\"\n310 PRINT\n320 PRINT \"SECTION 57.2: TWO-DIMENSIONAL ARRAYS WITHOUT THE\"\n325 PRINT \"        DIM-STATEMENT.\"\n330 PRINT\n340 PRINT \"                              BEGIN TEST.\"\n350 PRINT\n360 FOR I=0 TO 10\n370 FOR J=0 TO 10\n380 LET Z=I+J\n390 LET B(I,J)=Z\n400 NEXT J\n410 NEXT I\n420 LET B1=0\n430 LET C=0\n440 FOR I=10 TO 0 STEP -1\n450 FOR J=10 TO 0 STEP -1\n460 LET W=B(I,J)\n470 LET B1=B1+W\n480 LET Z=I+J\n490 IF W<>Z THEN 510\n500 LET C=C+1\n510 NEXT J\n520 NEXT I\n530 IF C<>121 THEN 550\n540 IF B1=1210 THEN 570\n550 PRINT \"***  TEST FAILED  ***\"\n560 GOTO 580\n570 PRINT \"***  TEST PASSED  ***\"\n580 PRINT\n590 PRINT \"                               END TEST.\"\n600 PRINT\n640 PRINT \"SECTION 57.3: ONE-DIMENSIONAL ARRAYS WITH THE\"\n645 PRINT \"        DIM-STATEMENT.\"\n650 PRINT\n660 PRINT \"                              BEGIN TEST.\"\n670 PRINT\n680 DIM D(20)\n690 FOR I=0 TO 20\n700 LET H=I+1\n710 LET D(I)=H\n720 NEXT I\n730 LET D1=0\n740 LET C=0\n750 FOR I=0 TO 20\n760 LET M=D(I)\n770 LET D1=D1+M\n780 LET H=I+1\n790 IF M<>H THEN 810\n800 LET C=C+1\n810 NEXT I\n820 IF C<>21 THEN 840\n830 IF D1=231 THEN 860\n840 PRINT \"*** TEST FAILED  ***\"\n850 GOTO 870\n860 PRINT \"*** TEST PASSED  ***\"\n870 PRINT\n880 PRINT \"                                END TEST.\"\n890 PRINT\n900 PRINT\n910 PRINT \"SECTION 57.4: TWO-DIMENSIONAL ARRAYS WITH THE\"\n915 PRINT \"        DIM-STATEMENT.\"\n920 PRINT\n930 PRINT \"                               BEGIN TEST.\"\n940 PRINT\n950 DIM N(20,2),P(2,20),R(20,20)\n960 FOR I=0 TO 20\n970 LET I1=I+1\n980 LET N(I,1)=I1\n990 LET N(I,2)=-I\n1000 LET N(I,0)=1\n1010 FOR J=2 TO 0 STEP -1\n1020 LET J1=I*J\n1030 LET P(J,I)=J1\n1040 NEXT J\n1050 NEXT I\n1060 FOR K=0 TO 20\n1070 FOR L=0 TO 20\n1080 LET K1=K+L\n1090 LET R(K,L)=K1\n1100 NEXT L\n1110 NEXT K\n1120 LET N1=0\n1130 LET P1=0\n1140 LET R1=0\n1150 LET C=0\n1160 LET T=0\n1170 FOR I=0 TO 20\n1180 LET I1=I+1\n1190 LET T7=N(I,1)\n1200 LET T8=N(I,2)\n1210 LET T9=N(I,0)\n1220 IF T7 <> I1 THEN 1490\n1230 IF T8 <> -I THEN 1490\n1240 IF T9 <> 1 THEN 1490\n1250 FOR J=0 TO 2\n1260 LET F1=N(I,J)\n1270 LET N1=N1+F1\n1280 LET G1=P(J,I)\n1290 LET P1=P1+G1\n1300 LET J1=I*J\n1310 IF G1 <> J1 THEN 1330\n1320 LET C=C+1\n1330 NEXT J\n1340 NEXT I\n1350 IF C<>63 THEN 1490\n1360 IF N1<>42 THEN 1490\n1370 IF P1<>630 THEN 1490\n1380 FOR K=20 TO 0 STEP -1\n1390 FOR L=0 TO 20\n1400 LET Q1=R(K,L)\n1410 LET R1=R1+Q1\n1420 LET K1=K+L\n1430 IF Q1 <> K1 THEN 1450\n1440 LET T=T+1\n1450 NEXT L\n1460 NEXT K\n1470 IF T<>441 THEN 1490\n1480 IF R1=8820 THEN 1510\n1490 PRINT \"***  TEST FAILED  ***\"\n1500 GOTO 1520\n1510 PRINT \"***  TEST PASSED  ***\"\n1520 PRINT\n1530 PRINT \"                                END TEST.\"\n1540 PRINT\n1550 PRINT\n1560 PRINT \"END PROGRAM 57\"\n1570 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 50 OPTION BASE 0
+ 90 PRINT "SECTION 57.1: ONE-DIMENSIONAL ARRAYS WITHOUT THE"
+ 95 PRINT "        DIM STATEMENT."
+ 100 PRINT
+ 110 PRINT "                               BEGIN TEST."
+ 120 PRINT
+ 130 FOR I=0 TO 10
+ 140 LET A(I)=I
+ 150 NEXT I
+ 160 LET A1=0
+ 170 LET C=0
+ 180 FOR I=10 TO 0 STEP -1
+ 190 LET Y=A(I)
+ 200 LET A1=A1+Y
+ 210 IF Y<>I THEN 230
+ 220 LET C=C+1
+ 230 NEXT I
+ 240 IF C<>11 THEN 260
+ 250 IF A1=55 THEN 280
+ 260 PRINT "***  TEST FAILED   ***"
+ 270 GOTO 290
+ 280 PRINT "***  TEST PASSED   ***"
+ 290 PRINT
+ 300 PRINT "                               END TEST."
+ 310 PRINT
+ 320 PRINT "SECTION 57.2: TWO-DIMENSIONAL ARRAYS WITHOUT THE"
+ 325 PRINT "        DIM-STATEMENT."
+ 330 PRINT
+ 340 PRINT "                              BEGIN TEST."
+ 350 PRINT
+ 360 FOR I=0 TO 10
+ 370 FOR J=0 TO 10
+ 380 LET Z=I+J
+ 390 LET B(I,J)=Z
+ 400 NEXT J
+ 410 NEXT I
+ 420 LET B1=0
+ 430 LET C=0
+ 440 FOR I=10 TO 0 STEP -1
+ 450 FOR J=10 TO 0 STEP -1
+ 460 LET W=B(I,J)
+ 470 LET B1=B1+W
+ 480 LET Z=I+J
+ 490 IF W<>Z THEN 510
+ 500 LET C=C+1
+ 510 NEXT J
+ 520 NEXT I
+ 530 IF C<>121 THEN 550
+ 540 IF B1=1210 THEN 570
+ 550 PRINT "***  TEST FAILED  ***"
+ 560 GOTO 580
+ 570 PRINT "***  TEST PASSED  ***"
+ 580 PRINT
+ 590 PRINT "                               END TEST."
+ 600 PRINT
+ 640 PRINT "SECTION 57.3: ONE-DIMENSIONAL ARRAYS WITH THE"
+ 645 PRINT "        DIM-STATEMENT."
+ 650 PRINT
+ 660 PRINT "                              BEGIN TEST."
+ 670 PRINT
+ 680 DIM D(20)
+ 690 FOR I=0 TO 20
+ 700 LET H=I+1
+ 710 LET D(I)=H
+ 720 NEXT I
+ 730 LET D1=0
+ 740 LET C=0
+ 750 FOR I=0 TO 20
+ 760 LET M=D(I)
+ 770 LET D1=D1+M
+ 780 LET H=I+1
+ 790 IF M<>H THEN 810
+ 800 LET C=C+1
+ 810 NEXT I
+ 820 IF C<>21 THEN 840
+ 830 IF D1=231 THEN 860
+ 840 PRINT "*** TEST FAILED  ***"
+ 850 GOTO 870
+ 860 PRINT "*** TEST PASSED  ***"
+ 870 PRINT
+ 880 PRINT "                                END TEST."
+ 890 PRINT
+ 900 PRINT
+ 910 PRINT "SECTION 57.4: TWO-DIMENSIONAL ARRAYS WITH THE"
+ 915 PRINT "        DIM-STATEMENT."
+ 920 PRINT
+ 930 PRINT "                               BEGIN TEST."
+ 940 PRINT
+ 950 DIM N(20,2),P(2,20),R(20,20)
+ 960 FOR I=0 TO 20
+ 970 LET I1=I+1
+ 980 LET N(I,1)=I1
+ 990 LET N(I,2)=-I
+ 1000 LET N(I,0)=1
+ 1010 FOR J=2 TO 0 STEP -1
+ 1020 LET J1=I*J
+ 1030 LET P(J,I)=J1
+ 1040 NEXT J
+ 1050 NEXT I
+ 1060 FOR K=0 TO 20
+ 1070 FOR L=0 TO 20
+ 1080 LET K1=K+L
+ 1090 LET R(K,L)=K1
+ 1100 NEXT L
+ 1110 NEXT K
+ 1120 LET N1=0
+ 1130 LET P1=0
+ 1140 LET R1=0
+ 1150 LET C=0
+ 1160 LET T=0
+ 1170 FOR I=0 TO 20
+ 1180 LET I1=I+1
+ 1190 LET T7=N(I,1)
+ 1200 LET T8=N(I,2)
+ 1210 LET T9=N(I,0)
+ 1220 IF T7 <> I1 THEN 1490
+ 1230 IF T8 <> -I THEN 1490
+ 1240 IF T9 <> 1 THEN 1490
+ 1250 FOR J=0 TO 2
+ 1260 LET F1=N(I,J)
+ 1270 LET N1=N1+F1
+ 1280 LET G1=P(J,I)
+ 1290 LET P1=P1+G1
+ 1300 LET J1=I*J
+ 1310 IF G1 <> J1 THEN 1330
+ 1320 LET C=C+1
+ 1330 NEXT J
+ 1340 NEXT I
+ 1350 IF C<>63 THEN 1490
+ 1360 IF N1<>42 THEN 1490
+ 1370 IF P1<>630 THEN 1490
+ 1380 FOR K=20 TO 0 STEP -1
+ 1390 FOR L=0 TO 20
+ 1400 LET Q1=R(K,L)
+ 1410 LET R1=R1+Q1
+ 1420 LET K1=K+L
+ 1430 IF Q1 <> K1 THEN 1450
+ 1440 LET T=T+1
+ 1450 NEXT L
+ 1460 NEXT K
+ 1470 IF T<>441 THEN 1490
+ 1480 IF R1=8820 THEN 1510
+ 1490 PRINT "***  TEST FAILED  ***"
+ 1500 GOTO 1520
+ 1510 PRINT "***  TEST PASSED  ***"
+ 1520 PRINT
+ 1530 PRINT "                                END TEST."
+ 1540 PRINT
+ 1550 PRINT
+ 1560 PRINT "END PROGRAM 57"
+ 1570 END
+ 
', tests/integration.rs:37:13

---- P123 stdout ----
thread 'P123' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n300 LET C=EXP(A)\n310 PRINT \"VALUE RETURNED BY EXP = \";C\n320 PRINT\n330 PRINT \"---------------------------------------\"\n340 PRINT\n350 IF C=0 THEN 390\n360 LET F=F*1.1\n370 LET A=A*F\n380 GOTO 290\n390 PRINT \"LAST INVOCATION OF EXP SHOULD HAVE BEEN REPORTED AS\"\n400 PRINT \"UNDERFLOW IN ORDER TO COMPLY WITH ANSI RECOMMENDATION;\"\n410 PRINT\n420 PRINT \"***** TEST PASSES, SINCE ZERO WAS SUPPLIED.  *****\"\n430 PRINT\n440 PRINT \"                               END TEST\"\n450 PRINT\n460 PRINT \"END PROGRAM 123\"\n470 END\n"`,
 right: `"300: warning: operation overflow EXP(-1140.57)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 300 LET C=EXP(A)
+ 310 PRINT "VALUE RETURNED BY EXP = ";C
+ 320 PRINT
+ 330 PRINT "---------------------------------------"
+ 340 PRINT
+ 350 IF C=0 THEN 390
+ 360 LET F=F*1.1
+ 370 LET A=A*F
+ 380 GOTO 290
+ 390 PRINT "LAST INVOCATION OF EXP SHOULD HAVE BEEN REPORTED AS"
+ 400 PRINT "UNDERFLOW IN ORDER TO COMPLY WITH ANSI RECOMMENDATION;"
+ 410 PRINT
+ 420 PRINT "***** TEST PASSES, SINCE ZERO WAS SUPPLIED.  *****"
+ 430 PRINT
+ 440 PRINT "                               END TEST"
+ 450 PRINT
+ 460 PRINT "END PROGRAM 123"
+ 470 END
- 300: warning: operation overflow EXP(-1140.57)
', tests/integration.rs:37:13

---- P125 stdout ----
thread 'P125' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 LET A=(0)\n240 LET B=LOG(A)\n255 PRINT \"***  TEST FAILED  ***\"\n257 PRINT\n260 PRINT \"ARGUMENT WAS SET TO 0; IT NOW EQUALS \";A\n270 PRINT \"RESULT OF LOG IS \";B\n280 PRINT\n330 PRINT\n340 PRINT \"                                 END TEST\"\n350 PRINT\n360 PRINT \"END PROGRAM 125\"\n370 END\n"`,
 right: `"240: error: function domain error LOG(0)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 LET A=(0)
+ 240 LET B=LOG(A)
+ 255 PRINT "***  TEST FAILED  ***"
+ 257 PRINT
+ 260 PRINT "ARGUMENT WAS SET TO 0; IT NOW EQUALS ";A
+ 270 PRINT "RESULT OF LOG IS ";B
+ 280 PRINT
+ 330 PRINT
+ 340 PRINT "                                 END TEST"
+ 350 PRINT
+ 360 PRINT "END PROGRAM 125"
+ 370 END
- 240: error: function domain error LOG(0)
', tests/integration.rs:37:13

---- P124 stdout ----
thread 'P124' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=LOG(A)\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK  - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 124\"\n3000 DATA  0.100000000E-37,-0.874982335E+02\n3010 DATA -0.874982936E+02,-0.874981735E+02\n3020 DATA  0.100001000E-37,-0.874982235E+02\n3030 DATA -0.874982836E+02,-0.874981635E+02\n3040 DATA  0.987654000E-37,-0.852080713E+02\n3050 DATA -0.852081223E+02,-0.852080202E+02\n3060 DATA  0.898989000E-36,-0.829995478E+02\n3070 DATA -0.829995990E+02,-0.829994967E+02\n3080 DATA  0.787878000E-35,-0.808288903E+02\n3090 DATA -0.808289416E+02,-0.808288390E+02\n3100 DATA  0.676767000E-34,-0.786783214E+02\n3110 DATA -0.786783729E+02,-0.786782699E+02\n3120 DATA  0.565656000E-29,-0.673447369E+02\n3130 DATA -0.673447887E+02,-0.673446850E+02\n3140 DATA  0.454545000E-24,-0.560505006E+02\n3150 DATA -0.560505528E+02,-0.560504483E+02\n3160 DATA  0.343434000E-19,-0.448178771E+02\n3170 DATA -0.448179301E+02,-0.448178241E+02\n3180 DATA  0.232323000E-14,-0.336958179E+02\n3190 DATA -0.336958723E+02,-0.336957636E+02\n3200 DATA  0.121212000E-09,-0.228334800E+02\n3210 DATA -0.228335383E+02,-0.228334217E+02\n3220 DATA  0.909090000E-06,-0.139108217E+02\n3230 DATA -0.139108729E+02,-0.139107706E+02\n3240 DATA  0.888888000E-04,-0.932812441E+01\n3250 DATA -0.932813054E+01,-0.932811828E+01\n3260 DATA  0.777777000E-03,-0.715907071E+01\n3270 DATA -0.715907700E+01,-0.715906442E+01\n3280 DATA  0.666666000E-02,-0.501063629E+01\n3290 DATA -0.501064280E+01,-0.501062979E+01\n3300 DATA  0.555555000E-01,-0.289037276E+01\n3310 DATA -0.289037956E+01,-0.289036595E+01\n3320 DATA  0.123456000E+00,-0.209187046E+01\n3330 DATA -0.209188357E+01,-0.209185736E+01\n3340 DATA  0.298347000E+00,-0.120949804E+01\n3350 DATA -0.120950640E+01,-0.120948968E+01\n3360 DATA  0.535353000E+00,-0.624828937E+00\n3370 DATA -0.624831305E+00,-0.624826568E+00\n3380 DATA  0.893481000E+00,-0.112630209E+00\n3390 DATA -0.112631829E+00,-0.112628590E+00\n3400 DATA  0.999000000E+00,-0.100050033E-02\n3410 DATA -0.100150634E-02,-0.999498833E-03\n3420 DATA  0.999500000E+00,-0.500125042E-03\n3430 DATA -0.501126043E-03,-0.499124041E-03\n3440 DATA  0.999900000E+00,-0.100005000E-03\n3450 DATA -0.101005601E-03,-0.990048508E-04\n3460 DATA  0.999950000E+00,-0.500012500E-04\n3470 DATA -0.510013506E-04,-0.490011505E-04\n3480 DATA  0.999990000E+00,-0.100000500E-04\n3490 DATA -0.110001106E-04,-0.900003550E-05\n3500 DATA  0.999995000E+00,-0.500001250E-05\n3510 DATA -0.600002300E-05,-0.400000299E-05\n3520 DATA  0.999998000E+00,-0.200000200E-05\n3530 DATA -0.300000950E-05,-.0999995499E-05\n3540 DATA  0.999999000E+00,-0.100000050E-05\n3550 DATA -0.200000700E-05, 0.000000500E+00\n3560 DATA  0.100000000E+01, 0.000000000E+00\n3570 DATA -0.100001001E-04, 0.999995501E-05\n3580 DATA  0.100001000E+01, 0.999995000E-05\n3590 DATA  0.000000000E+00, 0.199998501E-04\n3600 DATA  0.100002000E+01, 0.199998000E-04\n3610 DATA  0.999994500E-05, 0.299996001E-04\n3620 DATA  0.100005000E+01, 0.499987500E-04\n3630 DATA  0.399991500E-04, 0.599982501E-04\n3640 DATA  0.100010000E+01, 0.999950003E-04\n3650 DATA  0.899959002E-04, 0.109994451E-03\n3660 DATA  0.100030000E+01, 0.299955009E-03\n3670 DATA  0.289957458E-03, 0.309952460E-03\n3680 DATA  0.100100000E+01, 0.999500333E-03\n3690 DATA  0.989509773E-03, 0.100949530E-02\n3700 DATA  0.100300000E+01, 0.299550898E-02\n3710 DATA  0.298553384E-02, 0.300548402E-02\n3720 DATA  0.101000000E+01, 0.995033085E-02\n3730 DATA  0.994042481E-02, 0.996023680E-02\n3740 DATA  0.103000000E+01, 0.295588022E-01\n3750 DATA  0.295490434E-01, 0.295685610E-01\n3760 DATA  0.111111000E+01, 0.105359516E+00\n3770 DATA  0.105350015E+00, 0.105369016E+00\n3780 DATA  0.154321000E+01, 0.433864663E+00\n3790 DATA  0.433857682E+00, 0.433871643E+00\n3800 DATA  0.200000000E+01, 0.693147181E+00\n3810 DATA  0.693141680E+00, 0.693152681E+00\n3820 DATA  0.232323000E+01, 0.842958459E+00\n3830 DATA  0.842953654E+00, 0.842963264E+00\n3840 DATA  0.271828000E+01, 0.999999327E+00\n3850 DATA  0.999995148E+00, 0.100000801E+01\n3860 DATA  0.400000000E+01, 0.138629436E+01\n3870 DATA  0.138628686E+01, 0.138630187E+01\n3880 DATA  0.714286000E+01, 0.196611326E+01\n3890 DATA  0.196610685E+01, 0.196611966E+01\n3900 DATA  0.800000000E+01, 0.207944154E+01\n3910 DATA  0.207943529E+01, 0.207944780E+01\n3920 DATA  0.536789000E+02, 0.398302000E+01\n3930 DATA  0.398301313E+01, 0.398302687E+01\n3940 DATA  0.482284000E+03, 0.617853315E+01\n3950 DATA  0.617852607E+01, 0.617854023E+01\n3960 DATA  0.962112000E+04, 0.917171596E+01\n3970 DATA  0.917170992E+01, 0.917172201E+01\n3980 DATA  0.863214000E+05, 0.113658328E+02\n3990 DATA  0.113657816E+02, 0.113658840E+02\n4000 DATA  0.777777000E+06, 0.135641951E+02\n4010 DATA  0.135641438E+02, 0.135642465E+02\n4020 DATA  0.987654000E+08, 0.184082579E+02\n4030 DATA  0.184082068E+02, 0.184083090E+02\n4040 DATA  0.898989000E+11, 0.252219515E+02\n4050 DATA  0.252219004E+02, 0.252220027E+02\n4060 DATA  0.797979000E+16, 0.366156885E+02\n4070 DATA  0.366156372E+02, 0.366157398E+02\n4080 DATA  0.696969000E+21, 0.479932726E+02\n4090 DATA  0.479932211E+02, 0.479933241E+02\n4100 DATA  0.595959000E+26, 0.593496290E+02\n4110 DATA  0.593495773E+02, 0.593496807E+02\n4120 DATA  0.494949000E+31, 0.706768373E+02\n4130 DATA  0.706767853E+02, 0.706768894E+02\n4140 DATA  0.393939000E+36, 0.819615041E+02\n4150 DATA  0.819614516E+02, 0.819615567E+02\n4160 DATA  0.987654000E+37, 0.851832256E+02\n4170 DATA  0.851831745E+02, 0.851832767E+02\n4180 DATA  0.987654000E+38, 0.874858107E+02\n4190 DATA  0.874857596E+02, 0.874858618E+02\n4200 DATA  0.100000000E+39, 0.874982335E+02\n4210 DATA  0.874981735E+02, 0.874982936E+02\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=LOG(A)
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK  - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 124"
+ 3000 DATA  0.100000000E-37,-0.874982335E+02
+ 3010 DATA -0.874982936E+02,-0.874981735E+02
+ 3020 DATA  0.100001000E-37,-0.874982235E+02
+ 3030 DATA -0.874982836E+02,-0.874981635E+02
+ 3040 DATA  0.987654000E-37,-0.852080713E+02
+ 3050 DATA -0.852081223E+02,-0.852080202E+02
+ 3060 DATA  0.898989000E-36,-0.829995478E+02
+ 3070 DATA -0.829995990E+02,-0.829994967E+02
+ 3080 DATA  0.787878000E-35,-0.808288903E+02
+ 3090 DATA -0.808289416E+02,-0.808288390E+02
+ 3100 DATA  0.676767000E-34,-0.786783214E+02
+ 3110 DATA -0.786783729E+02,-0.786782699E+02
+ 3120 DATA  0.565656000E-29,-0.673447369E+02
+ 3130 DATA -0.673447887E+02,-0.673446850E+02
+ 3140 DATA  0.454545000E-24,-0.560505006E+02
+ 3150 DATA -0.560505528E+02,-0.560504483E+02
+ 3160 DATA  0.343434000E-19,-0.448178771E+02
+ 3170 DATA -0.448179301E+02,-0.448178241E+02
+ 3180 DATA  0.232323000E-14,-0.336958179E+02
+ 3190 DATA -0.336958723E+02,-0.336957636E+02
+ 3200 DATA  0.121212000E-09,-0.228334800E+02
+ 3210 DATA -0.228335383E+02,-0.228334217E+02
+ 3220 DATA  0.909090000E-06,-0.139108217E+02
+ 3230 DATA -0.139108729E+02,-0.139107706E+02
+ 3240 DATA  0.888888000E-04,-0.932812441E+01
+ 3250 DATA -0.932813054E+01,-0.932811828E+01
+ 3260 DATA  0.777777000E-03,-0.715907071E+01
+ 3270 DATA -0.715907700E+01,-0.715906442E+01
+ 3280 DATA  0.666666000E-02,-0.501063629E+01
+ 3290 DATA -0.501064280E+01,-0.501062979E+01
+ 3300 DATA  0.555555000E-01,-0.289037276E+01
+ 3310 DATA -0.289037956E+01,-0.289036595E+01
+ 3320 DATA  0.123456000E+00,-0.209187046E+01
+ 3330 DATA -0.209188357E+01,-0.209185736E+01
+ 3340 DATA  0.298347000E+00,-0.120949804E+01
+ 3350 DATA -0.120950640E+01,-0.120948968E+01
+ 3360 DATA  0.535353000E+00,-0.624828937E+00
+ 3370 DATA -0.624831305E+00,-0.624826568E+00
+ 3380 DATA  0.893481000E+00,-0.112630209E+00
+ 3390 DATA -0.112631829E+00,-0.112628590E+00
+ 3400 DATA  0.999000000E+00,-0.100050033E-02
+ 3410 DATA -0.100150634E-02,-0.999498833E-03
+ 3420 DATA  0.999500000E+00,-0.500125042E-03
+ 3430 DATA -0.501126043E-03,-0.499124041E-03
+ 3440 DATA  0.999900000E+00,-0.100005000E-03
+ 3450 DATA -0.101005601E-03,-0.990048508E-04
+ 3460 DATA  0.999950000E+00,-0.500012500E-04
+ 3470 DATA -0.510013506E-04,-0.490011505E-04
+ 3480 DATA  0.999990000E+00,-0.100000500E-04
+ 3490 DATA -0.110001106E-04,-0.900003550E-05
+ 3500 DATA  0.999995000E+00,-0.500001250E-05
+ 3510 DATA -0.600002300E-05,-0.400000299E-05
+ 3520 DATA  0.999998000E+00,-0.200000200E-05
+ 3530 DATA -0.300000950E-05,-.0999995499E-05
+ 3540 DATA  0.999999000E+00,-0.100000050E-05
+ 3550 DATA -0.200000700E-05, 0.000000500E+00
+ 3560 DATA  0.100000000E+01, 0.000000000E+00
+ 3570 DATA -0.100001001E-04, 0.999995501E-05
+ 3580 DATA  0.100001000E+01, 0.999995000E-05
+ 3590 DATA  0.000000000E+00, 0.199998501E-04
+ 3600 DATA  0.100002000E+01, 0.199998000E-04
+ 3610 DATA  0.999994500E-05, 0.299996001E-04
+ 3620 DATA  0.100005000E+01, 0.499987500E-04
+ 3630 DATA  0.399991500E-04, 0.599982501E-04
+ 3640 DATA  0.100010000E+01, 0.999950003E-04
+ 3650 DATA  0.899959002E-04, 0.109994451E-03
+ 3660 DATA  0.100030000E+01, 0.299955009E-03
+ 3670 DATA  0.289957458E-03, 0.309952460E-03
+ 3680 DATA  0.100100000E+01, 0.999500333E-03
+ 3690 DATA  0.989509773E-03, 0.100949530E-02
+ 3700 DATA  0.100300000E+01, 0.299550898E-02
+ 3710 DATA  0.298553384E-02, 0.300548402E-02
+ 3720 DATA  0.101000000E+01, 0.995033085E-02
+ 3730 DATA  0.994042481E-02, 0.996023680E-02
+ 3740 DATA  0.103000000E+01, 0.295588022E-01
+ 3750 DATA  0.295490434E-01, 0.295685610E-01
+ 3760 DATA  0.111111000E+01, 0.105359516E+00
+ 3770 DATA  0.105350015E+00, 0.105369016E+00
+ 3780 DATA  0.154321000E+01, 0.433864663E+00
+ 3790 DATA  0.433857682E+00, 0.433871643E+00
+ 3800 DATA  0.200000000E+01, 0.693147181E+00
+ 3810 DATA  0.693141680E+00, 0.693152681E+00
+ 3820 DATA  0.232323000E+01, 0.842958459E+00
+ 3830 DATA  0.842953654E+00, 0.842963264E+00
+ 3840 DATA  0.271828000E+01, 0.999999327E+00
+ 3850 DATA  0.999995148E+00, 0.100000801E+01
+ 3860 DATA  0.400000000E+01, 0.138629436E+01
+ 3870 DATA  0.138628686E+01, 0.138630187E+01
+ 3880 DATA  0.714286000E+01, 0.196611326E+01
+ 3890 DATA  0.196610685E+01, 0.196611966E+01
+ 3900 DATA  0.800000000E+01, 0.207944154E+01
+ 3910 DATA  0.207943529E+01, 0.207944780E+01
+ 3920 DATA  0.536789000E+02, 0.398302000E+01
+ 3930 DATA  0.398301313E+01, 0.398302687E+01
+ 3940 DATA  0.482284000E+03, 0.617853315E+01
+ 3950 DATA  0.617852607E+01, 0.617854023E+01
+ 3960 DATA  0.962112000E+04, 0.917171596E+01
+ 3970 DATA  0.917170992E+01, 0.917172201E+01
+ 3980 DATA  0.863214000E+05, 0.113658328E+02
+ 3990 DATA  0.113657816E+02, 0.113658840E+02
+ 4000 DATA  0.777777000E+06, 0.135641951E+02
+ 4010 DATA  0.135641438E+02, 0.135642465E+02
+ 4020 DATA  0.987654000E+08, 0.184082579E+02
+ 4030 DATA  0.184082068E+02, 0.184083090E+02
+ 4040 DATA  0.898989000E+11, 0.252219515E+02
+ 4050 DATA  0.252219004E+02, 0.252220027E+02
+ 4060 DATA  0.797979000E+16, 0.366156885E+02
+ 4070 DATA  0.366156372E+02, 0.366157398E+02
+ 4080 DATA  0.696969000E+21, 0.479932726E+02
+ 4090 DATA  0.479932211E+02, 0.479933241E+02
+ 4100 DATA  0.595959000E+26, 0.593496290E+02
+ 4110 DATA  0.593495773E+02, 0.593496807E+02
+ 4120 DATA  0.494949000E+31, 0.706768373E+02
+ 4130 DATA  0.706767853E+02, 0.706768894E+02
+ 4140 DATA  0.393939000E+36, 0.819615041E+02
+ 4150 DATA  0.819614516E+02, 0.819615567E+02
+ 4160 DATA  0.987654000E+37, 0.851832256E+02
+ 4170 DATA  0.851831745E+02, 0.851832767E+02
+ 4180 DATA  0.987654000E+38, 0.874858107E+02
+ 4190 DATA  0.874857596E+02, 0.874858618E+02
+ 4200 DATA  0.100000000E+39, 0.874982335E+02
+ 4210 DATA  0.874981735E+02, 0.874982936E+02
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P126 stdout ----
thread 'P126' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 LET A=(-3)\n240 LET B=LOG(A)\n255 PRINT \"***  TEST FAILED  ***\"\n257 PRINT\n260 PRINT \"ARGUMENT WAS SET TO -3; IT NOW EQUALS \";A\n270 PRINT \"RESULT OF LOG IS \";B\n280 PRINT\n330 PRINT\n340 PRINT \"                                 END TEST\"\n350 PRINT\n360 PRINT \"END PROGRAM 126\"\n370 END\n"`,
 right: `"240: error: function domain error LOG(-3)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 LET A=(-3)
+ 240 LET B=LOG(A)
+ 255 PRINT "***  TEST FAILED  ***"
+ 257 PRINT
+ 260 PRINT "ARGUMENT WAS SET TO -3; IT NOW EQUALS ";A
+ 270 PRINT "RESULT OF LOG IS ";B
+ 280 PRINT
+ 330 PRINT
+ 340 PRINT "                                 END TEST"
+ 350 PRINT
+ 360 PRINT "END PROGRAM 126"
+ 370 END
- 240: error: function domain error LOG(-3)
', tests/integration.rs:37:13

---- P120 stdout ----
thread 'P120' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=COS(A)\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK  - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 120\"\n3000 DATA -0.987654000E+05, 0.999948424E+00\n3010 DATA  0.993938411E+00, 1.000000000E+00\n3020 DATA -0.987644000E+05, 0.548820645E+00\n3030 DATA  0.462623568E+00, 0.629534088E+00\n3040 DATA -0.942682000E+05,-0.400578628E-04\n3050 DATA -0.998733243E-01, 0.997936089E-01\n3060 DATA -0.942792000E+04,-0.999999900E+00\n3070 DATA -1.000000000E+00,-0.999944935E+00\n3080 DATA -0.942592000E+04, 0.415740724E+00\n3090 DATA  0.406624756E+00, 0.424815118E+00\n3100 DATA -0.942949000E+04,-0.349749758E-03\n3110 DATA -0.103496150E-01, 0.965010546E-02\n3120 DATA -0.986460000E+03, 0.999999996E+00\n3130 DATA  0.999998902E+00, 1.000000000E+00\n3140 DATA -0.999000000E+03, 0.999649853E+00\n3150 DATA  0.999622392E+00, 0.999676314E+00\n3160 DATA -0.994314000E+03, 0.748611695E-04\n3170 DATA -0.925139199E-03, 0.107486597E-02\n3180 DATA -0.879646000E+02, 1.000000000E+00\n3190 DATA  0.999999494E+00, 1.000000000E+00\n3200 DATA -0.990000000E+02, 0.398208804E-01\n3210 DATA  0.397209095E-01, 0.399208509E-01\n3220 DATA -0.895354000E+02,-0.937269090E-05\n3230 DATA -0.109373191E-03, 0.906273590E-04\n3240 DATA -0.500000000E+02, 0.964966028E+00\n3250 DATA  0.964939286E+00, 0.964992762E+00\n3260 DATA -0.200000000E+02, 0.408082062E+00\n3270 DATA  0.407990265E+00, 0.408173855E+00\n3280 DATA -0.590000000E+01, 0.927478431E+00\n3290 DATA  0.927474191E+00, 0.927482670E+00\n3300 DATA -0.471239000E+01, 0.101961531E-05\n3310 DATA -0.898038969E-05, 0.110196654E-04\n3320 DATA -0.314159000E+01,-1.000000000E+00\n3330 DATA -1.000000000E+00,-0.999999499E+00\n3340 DATA -0.230000000E+01,-0.666276021E+00\n3350 DATA -0.666283979E+00,-0.666268064E+00\n3360 DATA -0.157080000E+01,-0.367320510E-05\n3370 DATA -0.136732552E-04, 0.632679990E-05\n3380 DATA -0.120000000E+01, 0.362357754E+00\n3390 DATA  0.362347934E+00, 0.362367575E+00\n3400 DATA -0.100000000E+01, 0.540302306E+00\n3410 DATA  0.540293391E+00, 0.540311221E+00\n3420 DATA -0.987654000E+00, 0.550649666E+00\n3430 DATA  0.550648331E+00, 0.550651001E+00\n3440 DATA -0.765432000E+00, 0.721083114E+00\n3450 DATA  0.721081921E+00, 0.721084307E+00\n3460 DATA -0.987654000E-01, 0.995126661E+00\n3470 DATA  0.995126151E+00, 0.995127172E+00\n3480 DATA -0.765432000E-01, 0.997071999E+00\n3490 DATA  0.997071491E+00, 0.997072507E+00\n3500 DATA -0.975319000E-02, 0.999952438E+00\n3510 DATA  0.999951937E+00, 0.999952939E+00\n3520 DATA -0.345678000E-02, 0.999994025E+00\n3530 DATA  0.999993525E+00, 0.999994526E+00\n3540 DATA -0.100001000E-02, 0.999999500E+00\n3550 DATA  0.999998999E+00, 1.000000000E+00\n3560 DATA -0.100000000E-02, 0.999999500E+00\n3570 DATA  0.999998999E+00, 1.000000000E+00\n3580 DATA -0.999999000E-03, 0.999999500E+00\n3590 DATA  0.999999000E+00, 1.000000000E+00\n3600 DATA -0.987654000E-04, 0.999999995E+00\n3610 DATA  0.999999495E+00, 1.000000000E+00\n3620 DATA -0.917359000E-05, 1.000000000E+00\n3630 DATA  0.999999499E+00, 1.000000000E+00\n3640 DATA -0.900000000E-09, 0.100000000E+01\n3650 DATA  0.999999500E+00, 0.100000000E+01\n3660 DATA -0.900000000E-19, 0.100000000E+01\n3670 DATA  0.999999500E+00, 0.100000000E+01\n3680 DATA -0.900000000E-29, 0.100000000E+01\n3690 DATA  0.999999500E+00, 0.100000000E+01\n3691 DATA -0.900000000E-37, 0.100000000E+01\n3692 DATA  0.999999500E+00, 0.100000000E+01\n3693 DATA  0,1,1,1\n3695 DATA  1.000000000E-38, 0.100000000E+01\n3697 DATA  0.999995000E+00, 0.100000000E+01\n3700 DATA  0.900000000E-29, 0.100000000E+01\n3710 DATA  0.999999500E+00, 0.100000000E+01\n3720 DATA  0.900000000E-19, 0.100000000E+01\n3730 DATA  0.999999500E+00, 0.100000000E+01\n3740 DATA  0.900000000E-09, 0.100000000E+01\n3750 DATA  0.999999500E+00, 0.100000000E+01\n3760 DATA  0.917359000E-05, 1.000000000E+00\n3770 DATA  0.999999499E+00, 1.000000000E+00\n3780 DATA  0.987654000E-04, 0.999999995E+00\n3790 DATA  0.999999495E+00, 1.000000000E+00\n3800 DATA  0.999999000E-03, 0.999999500E+00\n3810 DATA  0.999999000E+00, 1.000000000E+00\n3820 DATA  0.100000000E-02, 0.999999500E+00\n3830 DATA  0.999998999E+00, 1.000000000E+00\n3840 DATA  0.100001000E-02, 0.999999500E+00\n3850 DATA  0.999998999E+00, 1.000000000E+00\n3860 DATA  0.345678000E-02, 0.999994025E+00\n3870 DATA  0.999993525E+00, 0.999994526E+00\n3880 DATA  0.975319000E-02, 0.999952438E+00\n3890 DATA  0.999951937E+00, 0.999952939E+00\n3900 DATA  0.765432000E-01, 0.997071999E+00\n3910 DATA  0.997071491E+00, 0.997072507E+00\n3920 DATA  0.987654000E-01, 0.995126661E+00\n3930 DATA  0.995126151E+00, 0.995127172E+00\n3940 DATA  0.765432000E+00, 0.721083114E+00\n3950 DATA  0.721081921E+00, 0.721084307E+00\n3960 DATA  0.987654000E+00, 0.550649666E+00\n3970 DATA  0.550648331E+00, 0.550651001E+00\n3980 DATA  0.100000000E+01, 0.540302306E+00\n3990 DATA  0.540293391E+00, 0.540311221E+00\n4000 DATA  0.120000000E+01, 0.362357754E+00\n4010 DATA  0.362347934E+00, 0.362367575E+00\n4020 DATA  0.157080000E+01,-0.367320510E-05\n4030 DATA -0.136732552E-04, 0.632679990E-05\n4060 DATA  0.230000000E+01,-0.666276021E+00\n4070 DATA -0.666283979E+00,-0.666268064E+00\n4080 DATA  0.314159000E+01,-1.000000000E+00\n4090 DATA -1.000000000E+00,-0.999999499E+00\n4100 DATA  0.390000000E+01,-0.725932304E+00\n4110 DATA -0.725939682E+00,-0.725924926E+00\n4120 DATA  0.471239000E+01, 0.101961531E-05\n4130 DATA -0.898038969E-05, 0.110196654E-04\n4140 DATA  0.590000000E+01, 0.927478431E+00\n4150 DATA  0.927474191E+00, 0.927482670E+00\n4160 DATA  0.200000000E+02, 0.408082062E+00\n4170 DATA  0.407990265E+00, 0.408173855E+00\n4180 DATA  0.500000000E+02, 0.964966028E+00\n4190 DATA  0.964939286E+00, 0.964992762E+00\n4200 DATA  0.895354000E+02,-0.937269088E-05\n4210 DATA -0.109373191E-03, 0.906273590E-04\n4220 DATA  0.990000000E+02, 0.398208804E-01\n4230 DATA  0.397209095E-01, 0.399208509E-01\n4240 DATA  0.879646000E+02, 1.000000000E+00\n4250 DATA  0.999999494E+00, 1.000000000E+00\n4260 DATA  0.994314000E+03, 0.748611695E-04\n4270 DATA -0.925139199E-03, 0.107486597E-02\n4280 DATA  0.999100000E+03, 0.997297435E+00\n4290 DATA  0.997222966E+00, 0.997370907E+00\n4300 DATA  0.986460000E+03, 0.999999996E+00\n4310 DATA  0.999998902E+00, 1.000000000E+00\n4320 DATA  0.942949000E+04,-0.349749758E-03\n4330 DATA -0.103496150E-01, 0.965010545E-02\n4340 DATA  0.942592000E+04, 0.415740724E+00\n4350 DATA  0.406624756E+00, 0.424815118E+00\n4360 DATA  0.942792000E+04,-0.999999900E+00\n4370 DATA -1.000000000E+00,-0.999944935E+00\n4380 DATA  0.942682000E+05,-0.400578571E-04\n4390 DATA -0.998733243E-01, 0.997936089E-01\n4400 DATA  0.987644000E+05, 0.548820645E+00\n4410 DATA  0.462623568E+00, 0.629534088E+00\n4420 DATA  0.987654000E+05, 0.999948424E+00\n4430 DATA  0.993938411E+00, 1.000000000E+00\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=COS(A)
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK  - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 120"
+ 3000 DATA -0.987654000E+05, 0.999948424E+00
+ 3010 DATA  0.993938411E+00, 1.000000000E+00
+ 3020 DATA -0.987644000E+05, 0.548820645E+00
+ 3030 DATA  0.462623568E+00, 0.629534088E+00
+ 3040 DATA -0.942682000E+05,-0.400578628E-04
+ 3050 DATA -0.998733243E-01, 0.997936089E-01
+ 3060 DATA -0.942792000E+04,-0.999999900E+00
+ 3070 DATA -1.000000000E+00,-0.999944935E+00
+ 3080 DATA -0.942592000E+04, 0.415740724E+00
+ 3090 DATA  0.406624756E+00, 0.424815118E+00
+ 3100 DATA -0.942949000E+04,-0.349749758E-03
+ 3110 DATA -0.103496150E-01, 0.965010546E-02
+ 3120 DATA -0.986460000E+03, 0.999999996E+00
+ 3130 DATA  0.999998902E+00, 1.000000000E+00
+ 3140 DATA -0.999000000E+03, 0.999649853E+00
+ 3150 DATA  0.999622392E+00, 0.999676314E+00
+ 3160 DATA -0.994314000E+03, 0.748611695E-04
+ 3170 DATA -0.925139199E-03, 0.107486597E-02
+ 3180 DATA -0.879646000E+02, 1.000000000E+00
+ 3190 DATA  0.999999494E+00, 1.000000000E+00
+ 3200 DATA -0.990000000E+02, 0.398208804E-01
+ 3210 DATA  0.397209095E-01, 0.399208509E-01
+ 3220 DATA -0.895354000E+02,-0.937269090E-05
+ 3230 DATA -0.109373191E-03, 0.906273590E-04
+ 3240 DATA -0.500000000E+02, 0.964966028E+00
+ 3250 DATA  0.964939286E+00, 0.964992762E+00
+ 3260 DATA -0.200000000E+02, 0.408082062E+00
+ 3270 DATA  0.407990265E+00, 0.408173855E+00
+ 3280 DATA -0.590000000E+01, 0.927478431E+00
+ 3290 DATA  0.927474191E+00, 0.927482670E+00
+ 3300 DATA -0.471239000E+01, 0.101961531E-05
+ 3310 DATA -0.898038969E-05, 0.110196654E-04
+ 3320 DATA -0.314159000E+01,-1.000000000E+00
+ 3330 DATA -1.000000000E+00,-0.999999499E+00
+ 3340 DATA -0.230000000E+01,-0.666276021E+00
+ 3350 DATA -0.666283979E+00,-0.666268064E+00
+ 3360 DATA -0.157080000E+01,-0.367320510E-05
+ 3370 DATA -0.136732552E-04, 0.632679990E-05
+ 3380 DATA -0.120000000E+01, 0.362357754E+00
+ 3390 DATA  0.362347934E+00, 0.362367575E+00
+ 3400 DATA -0.100000000E+01, 0.540302306E+00
+ 3410 DATA  0.540293391E+00, 0.540311221E+00
+ 3420 DATA -0.987654000E+00, 0.550649666E+00
+ 3430 DATA  0.550648331E+00, 0.550651001E+00
+ 3440 DATA -0.765432000E+00, 0.721083114E+00
+ 3450 DATA  0.721081921E+00, 0.721084307E+00
+ 3460 DATA -0.987654000E-01, 0.995126661E+00
+ 3470 DATA  0.995126151E+00, 0.995127172E+00
+ 3480 DATA -0.765432000E-01, 0.997071999E+00
+ 3490 DATA  0.997071491E+00, 0.997072507E+00
+ 3500 DATA -0.975319000E-02, 0.999952438E+00
+ 3510 DATA  0.999951937E+00, 0.999952939E+00
+ 3520 DATA -0.345678000E-02, 0.999994025E+00
+ 3530 DATA  0.999993525E+00, 0.999994526E+00
+ 3540 DATA -0.100001000E-02, 0.999999500E+00
+ 3550 DATA  0.999998999E+00, 1.000000000E+00
+ 3560 DATA -0.100000000E-02, 0.999999500E+00
+ 3570 DATA  0.999998999E+00, 1.000000000E+00
+ 3580 DATA -0.999999000E-03, 0.999999500E+00
+ 3590 DATA  0.999999000E+00, 1.000000000E+00
+ 3600 DATA -0.987654000E-04, 0.999999995E+00
+ 3610 DATA  0.999999495E+00, 1.000000000E+00
+ 3620 DATA -0.917359000E-05, 1.000000000E+00
+ 3630 DATA  0.999999499E+00, 1.000000000E+00
+ 3640 DATA -0.900000000E-09, 0.100000000E+01
+ 3650 DATA  0.999999500E+00, 0.100000000E+01
+ 3660 DATA -0.900000000E-19, 0.100000000E+01
+ 3670 DATA  0.999999500E+00, 0.100000000E+01
+ 3680 DATA -0.900000000E-29, 0.100000000E+01
+ 3690 DATA  0.999999500E+00, 0.100000000E+01
+ 3691 DATA -0.900000000E-37, 0.100000000E+01
+ 3692 DATA  0.999999500E+00, 0.100000000E+01
+ 3693 DATA  0,1,1,1
+ 3695 DATA  1.000000000E-38, 0.100000000E+01
+ 3697 DATA  0.999995000E+00, 0.100000000E+01
+ 3700 DATA  0.900000000E-29, 0.100000000E+01
+ 3710 DATA  0.999999500E+00, 0.100000000E+01
+ 3720 DATA  0.900000000E-19, 0.100000000E+01
+ 3730 DATA  0.999999500E+00, 0.100000000E+01
+ 3740 DATA  0.900000000E-09, 0.100000000E+01
+ 3750 DATA  0.999999500E+00, 0.100000000E+01
+ 3760 DATA  0.917359000E-05, 1.000000000E+00
+ 3770 DATA  0.999999499E+00, 1.000000000E+00
+ 3780 DATA  0.987654000E-04, 0.999999995E+00
+ 3790 DATA  0.999999495E+00, 1.000000000E+00
+ 3800 DATA  0.999999000E-03, 0.999999500E+00
+ 3810 DATA  0.999999000E+00, 1.000000000E+00
+ 3820 DATA  0.100000000E-02, 0.999999500E+00
+ 3830 DATA  0.999998999E+00, 1.000000000E+00
+ 3840 DATA  0.100001000E-02, 0.999999500E+00
+ 3850 DATA  0.999998999E+00, 1.000000000E+00
+ 3860 DATA  0.345678000E-02, 0.999994025E+00
+ 3870 DATA  0.999993525E+00, 0.999994526E+00
+ 3880 DATA  0.975319000E-02, 0.999952438E+00
+ 3890 DATA  0.999951937E+00, 0.999952939E+00
+ 3900 DATA  0.765432000E-01, 0.997071999E+00
+ 3910 DATA  0.997071491E+00, 0.997072507E+00
+ 3920 DATA  0.987654000E-01, 0.995126661E+00
+ 3930 DATA  0.995126151E+00, 0.995127172E+00
+ 3940 DATA  0.765432000E+00, 0.721083114E+00
+ 3950 DATA  0.721081921E+00, 0.721084307E+00
+ 3960 DATA  0.987654000E+00, 0.550649666E+00
+ 3970 DATA  0.550648331E+00, 0.550651001E+00
+ 3980 DATA  0.100000000E+01, 0.540302306E+00
+ 3990 DATA  0.540293391E+00, 0.540311221E+00
+ 4000 DATA  0.120000000E+01, 0.362357754E+00
+ 4010 DATA  0.362347934E+00, 0.362367575E+00
+ 4020 DATA  0.157080000E+01,-0.367320510E-05
+ 4030 DATA -0.136732552E-04, 0.632679990E-05
+ 4060 DATA  0.230000000E+01,-0.666276021E+00
+ 4070 DATA -0.666283979E+00,-0.666268064E+00
+ 4080 DATA  0.314159000E+01,-1.000000000E+00
+ 4090 DATA -1.000000000E+00,-0.999999499E+00
+ 4100 DATA  0.390000000E+01,-0.725932304E+00
+ 4110 DATA -0.725939682E+00,-0.725924926E+00
+ 4120 DATA  0.471239000E+01, 0.101961531E-05
+ 4130 DATA -0.898038969E-05, 0.110196654E-04
+ 4140 DATA  0.590000000E+01, 0.927478431E+00
+ 4150 DATA  0.927474191E+00, 0.927482670E+00
+ 4160 DATA  0.200000000E+02, 0.408082062E+00
+ 4170 DATA  0.407990265E+00, 0.408173855E+00
+ 4180 DATA  0.500000000E+02, 0.964966028E+00
+ 4190 DATA  0.964939286E+00, 0.964992762E+00
+ 4200 DATA  0.895354000E+02,-0.937269088E-05
+ 4210 DATA -0.109373191E-03, 0.906273590E-04
+ 4220 DATA  0.990000000E+02, 0.398208804E-01
+ 4230 DATA  0.397209095E-01, 0.399208509E-01
+ 4240 DATA  0.879646000E+02, 1.000000000E+00
+ 4250 DATA  0.999999494E+00, 1.000000000E+00
+ 4260 DATA  0.994314000E+03, 0.748611695E-04
+ 4270 DATA -0.925139199E-03, 0.107486597E-02
+ 4280 DATA  0.999100000E+03, 0.997297435E+00
+ 4290 DATA  0.997222966E+00, 0.997370907E+00
+ 4300 DATA  0.986460000E+03, 0.999999996E+00
+ 4310 DATA  0.999998902E+00, 1.000000000E+00
+ 4320 DATA  0.942949000E+04,-0.349749758E-03
+ 4330 DATA -0.103496150E-01, 0.965010545E-02
+ 4340 DATA  0.942592000E+04, 0.415740724E+00
+ 4350 DATA  0.406624756E+00, 0.424815118E+00
+ 4360 DATA  0.942792000E+04,-0.999999900E+00
+ 4370 DATA -1.000000000E+00,-0.999944935E+00
+ 4380 DATA  0.942682000E+05,-0.400578571E-04
+ 4390 DATA -0.998733243E-01, 0.997936089E-01
+ 4400 DATA  0.987644000E+05, 0.548820645E+00
+ 4410 DATA  0.462623568E+00, 0.629534088E+00
+ 4420 DATA  0.987654000E+05, 0.999948424E+00
+ 4430 DATA  0.993938411E+00, 1.000000000E+00
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P127 stdout ----
thread 'P127' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=SIN(A)\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK  - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 127\"\n3000 DATA -0.987654000E+05,-0.101562695E-01\n3010 DATA -0.109934299E+00, 0.897227872E-01\n3020 DATA -0.987644000E+05, 0.835940129E+00\n3030 DATA  0.776972770E+00, 0.886555051E+00\n3040 DATA -0.942682000E+05,-0.999999999E+00\n3050 DATA -1.000000000E+00,-0.994999665E+00\n3060 DATA -0.942792000E+04, 0.446577015E-03\n3070 DATA -0.955328265E-02, 0.104464371E-01\n3080 DATA -0.942592000E+04,-0.909483178E+00\n3090 DATA -0.913595542E+00,-0.905279866E+00\n3100 DATA -0.942949000E+04, 0.999999939E+00\n3110 DATA  0.999945941E+00, 1.000000000E+00\n3120 DATA -0.986460000E+03, 0.932271951E-04\n3130 DATA -0.906773181E-03, 0.109323198E-02\n3140 DATA -0.999000000E+03, 0.264607527E-01\n3150 DATA  0.254610398E-01, 0.274604392E-01\n3160 DATA -0.994314000E+03,-0.999999997E+00\n3170 DATA -1.000000000E+00,-0.999998922E+00\n3180 DATA -0.879646000E+02,-0.569948578E-05\n3190 DATA -0.105699986E-03, 0.943005641E-04\n3200 DATA -0.990000000E+02, 0.999206834E+00\n3210 DATA  0.999202347E+00, 0.999211312E+00\n3220 DATA -0.895354000E+02,-1.000000000E+00\n3230 DATA -1.000000000E+00,-0.999999494E+00\n3240 DATA -0.500000000E+02, 0.262374854E+00\n3250 DATA  0.262277855E+00, 0.262471849E+00\n3260 DATA -0.200000000E+02,-0.912945251E+00\n3270 DATA -0.912986555E+00,-0.912903937E+00\n3280 DATA -0.590000000E+01, 0.373876665E+00\n3290 DATA  0.373866890E+00, 0.373886440E+00\n3300 DATA -0.471239000E+01, 1.000000000E+00\n3310 DATA  0.999999499E+00, 1.000000000E+00\n3320 DATA -0.314159000E+01,-0.265358979E-05\n3330 DATA -0.126536398E-04, 0.734641421E-05\n3340 DATA -0.230000000E+01,-0.745705212E+00\n3350 DATA -0.745712375E+00,-0.745698049E+00\n3360 DATA -0.157080000E+01,-1.000000000E+00\n3370 DATA -1.000000000E+00,-0.999999499E+00\n3380 DATA -0.120000000E+01,-0.932039086E+00\n3390 DATA -0.932043210E+00,-0.932034962E+00\n3400 DATA -0.100000000E+01,-0.841470985E+00\n3410 DATA -0.841476888E+00,-0.841465081E+00\n3420 DATA -0.987654000E+00,-0.834736453E+00\n3430 DATA -0.834737504E+00,-0.834735402E+00\n3440 DATA -0.765432000E+00,-0.692848571E+00\n3450 DATA -0.692849793E+00,-0.692847350E+00\n3460 DATA -0.987654000E-01,-0.986049087E-01\n3470 DATA -0.986050583E-01,-0.986047592E-01\n3480 DATA -0.765432000E-01,-0.764684792E-01\n3490 DATA -0.764686290E-01,-0.764683295E-01\n3500 DATA -0.975319000E-02,-0.975303537E-02\n3510 DATA -0.975305038E-02,-0.975302037E-02\n3520 DATA -0.345678000E-02,-0.345677312E-02\n3530 DATA -0.345678812E-02,-0.345675811E-02\n3540 DATA -0.100001000E-02,-0.100000983E-02\n3550 DATA -0.100002484E-02,-0.999999333E-03\n3560 DATA -0.100000000E-02,-0.999999833E-03\n3570 DATA -0.100001484E-02,-0.999989333E-03\n3580 DATA -0.999999000E-03,-0.999998833E-03\n3590 DATA -1.000000334E-03,-0.999997333E-03\n3600 DATA -0.987654000E-04,-0.987653998E-04\n3610 DATA -0.987655499E-04,-0.987652498E-04\n3620 DATA -0.917359000E-05,-0.917359000E-05\n3630 DATA -0.917360500E-05,-0.917357499E-05\n3640 DATA -0.900000000E-06,-0.900000000E-06\n3650 DATA -0.900001500E-06,-0.899998499E-06\n3660 DATA -0.900000000E-09,-0.900000000E-09\n3670 DATA -0.900001500E-09,-0.899998500E-09\n3680 DATA -0.900000000E-19,-0.900000000E-19\n3690 DATA -0.900001500E-19,-0.899998500E-19\n3700 DATA -0.900000000E-29,-0.900000000E-29\n3710 DATA -0.900001500E-29,-0.899998500E-29\n3720 DATA -0.900000000E-37,-0.900000000E-37\n3730 DATA -0.900001500E-37,-0.899998500E-37\n3740 DATA 0,0,0,0\n3760 DATA  0.200000000E-37, 0.200000000E-37\n3770 DATA  0.199998500E-37, 0.200001500E-37\n3780 DATA  0.900000000E-29, 0.900000000E-29\n3790 DATA  0.899998500E-29, 0.900001500E-29\n3800 DATA  0.900000000E-19, 0.900000000E-19\n3810 DATA  0.899998500E-19, 0.900001500E-19\n3820 DATA  0.900000000E-09, 0.900000000E-09\n3830 DATA  0.899998500E-09, 0.900001500E-09\n3840 DATA  0.900000000E-06, 0.900000000E-06\n3850 DATA  0.899998499E-06, 0.900001500E-06\n3860 DATA  0.917359000E-05, 0.917359000E-05\n3870 DATA  0.917357499E-05, 0.917360500E-05\n3880 DATA  0.987654000E-04, 0.987653998E-04\n3890 DATA  0.987652498E-04, 0.987655499E-04\n3900 DATA  0.999999000E-03, 0.999998833E-03\n3910 DATA  0.999997333E-03, 1.000000334E-03\n3920 DATA  0.100000000E-02, 0.999999833E-03\n3930 DATA  0.999989333E-03, 0.100001484E-02\n3940 DATA  0.100001000E-02, 0.100000983E-02\n3950 DATA  0.999999333E-03, 0.100002484E-02\n3960 DATA  0.345678000E-02, 0.345677312E-02\n3970 DATA  0.345675811E-02, 0.345678812E-02\n3980 DATA  0.975319000E-02, 0.975303537E-02\n3990 DATA  0.975302037E-02, 0.975305038E-02\n4000 DATA  0.765432000E-01, 0.764684792E-01\n4010 DATA  0.764683295E-01, 0.764686290E-01\n4020 DATA  0.987654000E-01, 0.986049087E-01\n4030 DATA  0.986047592E-01, 0.986050583E-01\n4040 DATA  0.765432000E+00, 0.692848571E+00\n4050 DATA  0.692847350E+00, 0.692849793E+00\n4060 DATA  0.987654000E+00, 0.834736453E+00\n4070 DATA  0.834735402E+00, 0.834737504E+00\n4080 DATA  0.100000000E+01, 0.841470985E+00\n4090 DATA  0.841465081E+00, 08.41476888E+00\n4100 DATA  0.120000000E+01, 0.932039086E+00\n4110 DATA  0.932034962E+00, 0.932043210E+00\n4120 DATA  0.157080000E+01, 1.000000000E+00\n4130 DATA  0.999999499E+00, 1.000000000E+00\n4140 DATA  0.230000000E+01, 0.745705212E+00\n4150 DATA  0.745698049E+00, 0.745712375E+00\n4160 DATA  0.314159000E+01, 0.265358979E-05\n4170 DATA -0.734651521E-05, 0.126536398E-04\n4180 DATA  0.390000000E+01,-0.687766159E+00\n4190 DATA -0.687773919E+00,-0.687758399E+00\n4200 DATA  0.471239000E+01,-1.000000000E+00\n4210 DATA -1.000000000E+00,-0.999999499E+00\n4220 DATA  0.590000000E+01,-0.373876665E+00\n4230 DATA -0.373886440E+00,-0.373866890E+00\n4240 DATA  0.200000000E+02, 0.912945251E+00\n4250 DATA  0.912903937E+00, 0.912986555E+00\n4260 DATA  0.500000000E+02,-0.262374854E+00\n4270 DATA -0.262471849E+00,-0.262277855E+00\n4280 DATA  0.895354000E+02, 1.000000000E+00\n4290 DATA  0.999999494E+00, 1.000000000E+00\n4300 DATA  0.990000000E+02,-0.999206834E+00\n4310 DATA -0.999211312E+00,-0.999202347E+00\n4320 DATA  0.879646000E+02, 0.569948578E-05\n4330 DATA -0.943005641E-04, 0.105699986E-03\n4360 DATA  0.994314000E+03, 0.999999997E+00\n4370 DATA  0.999998922E+00, 1.000000000E+00\n4380 DATA  0.999100000E+03, 0.734699011E-01\n4390 DATA  0.724725170E-01, 0.744672117E-01\n4400 DATA  0.986460000E+03,-0.932271951E-04\n4410 DATA -0.109323198E-02, 0.906773181E-03\n4420 DATA  0.942949000E+04,-0.999999939E+00\n4430 DATA -1.000000000E+00,-0.999945941E+00\n4440 DATA  0.942592000E+04, 0.909483178E+00\n4450 DATA  0.905279866E+00, 0.913595542E+00\n4460 DATA  0.942792000E+04,-0.446577015E-03\n4470 DATA -0.104464371E-01, 0.955328265E-02\n4480 DATA  0.942682000E+05, 0.999999999E+00\n4490 DATA  0.994999665E+00, 1.000000000E+00\n4500 DATA  0.987644000E+05,-0.835940129E+00\n4510 DATA -0.886555051E+00,-0.776972770E+00\n4520 DATA  0.987654000E+05, 0.101562695E-01\n4530 DATA -0.897227872E-01, 0.109934299E+00\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=SIN(A)
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK  - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 127"
+ 3000 DATA -0.987654000E+05,-0.101562695E-01
+ 3010 DATA -0.109934299E+00, 0.897227872E-01
+ 3020 DATA -0.987644000E+05, 0.835940129E+00
+ 3030 DATA  0.776972770E+00, 0.886555051E+00
+ 3040 DATA -0.942682000E+05,-0.999999999E+00
+ 3050 DATA -1.000000000E+00,-0.994999665E+00
+ 3060 DATA -0.942792000E+04, 0.446577015E-03
+ 3070 DATA -0.955328265E-02, 0.104464371E-01
+ 3080 DATA -0.942592000E+04,-0.909483178E+00
+ 3090 DATA -0.913595542E+00,-0.905279866E+00
+ 3100 DATA -0.942949000E+04, 0.999999939E+00
+ 3110 DATA  0.999945941E+00, 1.000000000E+00
+ 3120 DATA -0.986460000E+03, 0.932271951E-04
+ 3130 DATA -0.906773181E-03, 0.109323198E-02
+ 3140 DATA -0.999000000E+03, 0.264607527E-01
+ 3150 DATA  0.254610398E-01, 0.274604392E-01
+ 3160 DATA -0.994314000E+03,-0.999999997E+00
+ 3170 DATA -1.000000000E+00,-0.999998922E+00
+ 3180 DATA -0.879646000E+02,-0.569948578E-05
+ 3190 DATA -0.105699986E-03, 0.943005641E-04
+ 3200 DATA -0.990000000E+02, 0.999206834E+00
+ 3210 DATA  0.999202347E+00, 0.999211312E+00
+ 3220 DATA -0.895354000E+02,-1.000000000E+00
+ 3230 DATA -1.000000000E+00,-0.999999494E+00
+ 3240 DATA -0.500000000E+02, 0.262374854E+00
+ 3250 DATA  0.262277855E+00, 0.262471849E+00
+ 3260 DATA -0.200000000E+02,-0.912945251E+00
+ 3270 DATA -0.912986555E+00,-0.912903937E+00
+ 3280 DATA -0.590000000E+01, 0.373876665E+00
+ 3290 DATA  0.373866890E+00, 0.373886440E+00
+ 3300 DATA -0.471239000E+01, 1.000000000E+00
+ 3310 DATA  0.999999499E+00, 1.000000000E+00
+ 3320 DATA -0.314159000E+01,-0.265358979E-05
+ 3330 DATA -0.126536398E-04, 0.734641421E-05
+ 3340 DATA -0.230000000E+01,-0.745705212E+00
+ 3350 DATA -0.745712375E+00,-0.745698049E+00
+ 3360 DATA -0.157080000E+01,-1.000000000E+00
+ 3370 DATA -1.000000000E+00,-0.999999499E+00
+ 3380 DATA -0.120000000E+01,-0.932039086E+00
+ 3390 DATA -0.932043210E+00,-0.932034962E+00
+ 3400 DATA -0.100000000E+01,-0.841470985E+00
+ 3410 DATA -0.841476888E+00,-0.841465081E+00
+ 3420 DATA -0.987654000E+00,-0.834736453E+00
+ 3430 DATA -0.834737504E+00,-0.834735402E+00
+ 3440 DATA -0.765432000E+00,-0.692848571E+00
+ 3450 DATA -0.692849793E+00,-0.692847350E+00
+ 3460 DATA -0.987654000E-01,-0.986049087E-01
+ 3470 DATA -0.986050583E-01,-0.986047592E-01
+ 3480 DATA -0.765432000E-01,-0.764684792E-01
+ 3490 DATA -0.764686290E-01,-0.764683295E-01
+ 3500 DATA -0.975319000E-02,-0.975303537E-02
+ 3510 DATA -0.975305038E-02,-0.975302037E-02
+ 3520 DATA -0.345678000E-02,-0.345677312E-02
+ 3530 DATA -0.345678812E-02,-0.345675811E-02
+ 3540 DATA -0.100001000E-02,-0.100000983E-02
+ 3550 DATA -0.100002484E-02,-0.999999333E-03
+ 3560 DATA -0.100000000E-02,-0.999999833E-03
+ 3570 DATA -0.100001484E-02,-0.999989333E-03
+ 3580 DATA -0.999999000E-03,-0.999998833E-03
+ 3590 DATA -1.000000334E-03,-0.999997333E-03
+ 3600 DATA -0.987654000E-04,-0.987653998E-04
+ 3610 DATA -0.987655499E-04,-0.987652498E-04
+ 3620 DATA -0.917359000E-05,-0.917359000E-05
+ 3630 DATA -0.917360500E-05,-0.917357499E-05
+ 3640 DATA -0.900000000E-06,-0.900000000E-06
+ 3650 DATA -0.900001500E-06,-0.899998499E-06
+ 3660 DATA -0.900000000E-09,-0.900000000E-09
+ 3670 DATA -0.900001500E-09,-0.899998500E-09
+ 3680 DATA -0.900000000E-19,-0.900000000E-19
+ 3690 DATA -0.900001500E-19,-0.899998500E-19
+ 3700 DATA -0.900000000E-29,-0.900000000E-29
+ 3710 DATA -0.900001500E-29,-0.899998500E-29
+ 3720 DATA -0.900000000E-37,-0.900000000E-37
+ 3730 DATA -0.900001500E-37,-0.899998500E-37
+ 3740 DATA 0,0,0,0
+ 3760 DATA  0.200000000E-37, 0.200000000E-37
+ 3770 DATA  0.199998500E-37, 0.200001500E-37
+ 3780 DATA  0.900000000E-29, 0.900000000E-29
+ 3790 DATA  0.899998500E-29, 0.900001500E-29
+ 3800 DATA  0.900000000E-19, 0.900000000E-19
+ 3810 DATA  0.899998500E-19, 0.900001500E-19
+ 3820 DATA  0.900000000E-09, 0.900000000E-09
+ 3830 DATA  0.899998500E-09, 0.900001500E-09
+ 3840 DATA  0.900000000E-06, 0.900000000E-06
+ 3850 DATA  0.899998499E-06, 0.900001500E-06
+ 3860 DATA  0.917359000E-05, 0.917359000E-05
+ 3870 DATA  0.917357499E-05, 0.917360500E-05
+ 3880 DATA  0.987654000E-04, 0.987653998E-04
+ 3890 DATA  0.987652498E-04, 0.987655499E-04
+ 3900 DATA  0.999999000E-03, 0.999998833E-03
+ 3910 DATA  0.999997333E-03, 1.000000334E-03
+ 3920 DATA  0.100000000E-02, 0.999999833E-03
+ 3930 DATA  0.999989333E-03, 0.100001484E-02
+ 3940 DATA  0.100001000E-02, 0.100000983E-02
+ 3950 DATA  0.999999333E-03, 0.100002484E-02
+ 3960 DATA  0.345678000E-02, 0.345677312E-02
+ 3970 DATA  0.345675811E-02, 0.345678812E-02
+ 3980 DATA  0.975319000E-02, 0.975303537E-02
+ 3990 DATA  0.975302037E-02, 0.975305038E-02
+ 4000 DATA  0.765432000E-01, 0.764684792E-01
+ 4010 DATA  0.764683295E-01, 0.764686290E-01
+ 4020 DATA  0.987654000E-01, 0.986049087E-01
+ 4030 DATA  0.986047592E-01, 0.986050583E-01
+ 4040 DATA  0.765432000E+00, 0.692848571E+00
+ 4050 DATA  0.692847350E+00, 0.692849793E+00
+ 4060 DATA  0.987654000E+00, 0.834736453E+00
+ 4070 DATA  0.834735402E+00, 0.834737504E+00
+ 4080 DATA  0.100000000E+01, 0.841470985E+00
+ 4090 DATA  0.841465081E+00, 08.41476888E+00
+ 4100 DATA  0.120000000E+01, 0.932039086E+00
+ 4110 DATA  0.932034962E+00, 0.932043210E+00
+ 4120 DATA  0.157080000E+01, 1.000000000E+00
+ 4130 DATA  0.999999499E+00, 1.000000000E+00
+ 4140 DATA  0.230000000E+01, 0.745705212E+00
+ 4150 DATA  0.745698049E+00, 0.745712375E+00
+ 4160 DATA  0.314159000E+01, 0.265358979E-05
+ 4170 DATA -0.734651521E-05, 0.126536398E-04
+ 4180 DATA  0.390000000E+01,-0.687766159E+00
+ 4190 DATA -0.687773919E+00,-0.687758399E+00
+ 4200 DATA  0.471239000E+01,-1.000000000E+00
+ 4210 DATA -1.000000000E+00,-0.999999499E+00
+ 4220 DATA  0.590000000E+01,-0.373876665E+00
+ 4230 DATA -0.373886440E+00,-0.373866890E+00
+ 4240 DATA  0.200000000E+02, 0.912945251E+00
+ 4250 DATA  0.912903937E+00, 0.912986555E+00
+ 4260 DATA  0.500000000E+02,-0.262374854E+00
+ 4270 DATA -0.262471849E+00,-0.262277855E+00
+ 4280 DATA  0.895354000E+02, 1.000000000E+00
+ 4290 DATA  0.999999494E+00, 1.000000000E+00
+ 4300 DATA  0.990000000E+02,-0.999206834E+00
+ 4310 DATA -0.999211312E+00,-0.999202347E+00
+ 4320 DATA  0.879646000E+02, 0.569948578E-05
+ 4330 DATA -0.943005641E-04, 0.105699986E-03
+ 4360 DATA  0.994314000E+03, 0.999999997E+00
+ 4370 DATA  0.999998922E+00, 1.000000000E+00
+ 4380 DATA  0.999100000E+03, 0.734699011E-01
+ 4390 DATA  0.724725170E-01, 0.744672117E-01
+ 4400 DATA  0.986460000E+03,-0.932271951E-04
+ 4410 DATA -0.109323198E-02, 0.906773181E-03
+ 4420 DATA  0.942949000E+04,-0.999999939E+00
+ 4430 DATA -1.000000000E+00,-0.999945941E+00
+ 4440 DATA  0.942592000E+04, 0.909483178E+00
+ 4450 DATA  0.905279866E+00, 0.913595542E+00
+ 4460 DATA  0.942792000E+04,-0.446577015E-03
+ 4470 DATA -0.104464371E-01, 0.955328265E-02
+ 4480 DATA  0.942682000E+05, 0.999999999E+00
+ 4490 DATA  0.994999665E+00, 1.000000000E+00
+ 4500 DATA  0.987644000E+05,-0.835940129E+00
+ 4510 DATA -0.886555051E+00,-0.776972770E+00
+ 4520 DATA  0.987654000E+05, 0.101562695E-01
+ 4530 DATA -0.897227872E-01, 0.109934299E+00
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P129 stdout ----
thread 'P129' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 LET M=(A+B)/2\n330 LET R=TAN(M)\n340 PRINT M,R\n350 IF M<=A THEN 420\n360 IF M>=B THEN 420\n370 IF R<0 THEN 400\n380 LET A=M\n390 GOTO 320\n400 LET B=M\n410 GOTO 320\n420 PRINT\n430 PRINT \"ARGUMENTS HAVE CONVERGED. IF OVERFLOW HAS OCCURRED,\"\n440 PRINT \"PROCESSOR MUST HAVE REPORTED EXCEPTION AND SUPPLIED\"\n450 PRINT \"MACHINE INFINITY, OTHERWISE,\"\n455 PRINT \"***  TEST FAILED  ***\"\n460 PRINT\n470 PRINT \"                                 END TEST\"\n480 PRINT\n490 PRINT \"END PROGRAM 129\"\n500 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 LET M=(A+B)/2
+ 330 LET R=TAN(M)
+ 340 PRINT M,R
+ 350 IF M<=A THEN 420
+ 360 IF M>=B THEN 420
+ 370 IF R<0 THEN 400
+ 380 LET A=M
+ 390 GOTO 320
+ 400 LET B=M
+ 410 GOTO 320
+ 420 PRINT
+ 430 PRINT "ARGUMENTS HAVE CONVERGED. IF OVERFLOW HAS OCCURRED,"
+ 440 PRINT "PROCESSOR MUST HAVE REPORTED EXCEPTION AND SUPPLIED"
+ 450 PRINT "MACHINE INFINITY, OTHERWISE,"
+ 455 PRINT "***  TEST FAILED  ***"
+ 460 PRINT
+ 470 PRINT "                                 END TEST"
+ 480 PRINT
+ 490 PRINT "END PROGRAM 129"
+ 500 END
+ 
', tests/integration.rs:37:13

---- P132 stdout ----
thread 'P132' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 FOR I=1 TO N\n220   LET X=RND\n230   IF X<0 THEN 490\n240   IF X>=1 THEN 510\n250   LET S1=S1+X\n260   LET S2=S2+(X*X)\n270 NEXT I\n280 LET S = SQR((N*S2) - (S1*S1)) / N\n290 LET X1=S1/N\n300 PRINT ,\"AVERAGE\",\"STD. DEV.\"\n310 PRINT \"THEORETICAL:\",.5,1/(2*SQR(3))\n320 PRINT \"ACTUAL:\",X1,S\n330 LET A1=ABS(X1-0.5)\n340 REM 1.96 BASED ON SIGNIFICANCE LEVEL OF .05 AND INFINITE D.F\n350 LET A2=(1.96*S)/SQR(N)\n360 PRINT\n370 PRINT \"ALLOWABLE DEVIATION: \";A2\n380 PRINT \"ACTUAL DEVIATION:    \";A1\n390 PRINT\n400 IF A1>A2 THEN 430\n410 PRINT \"*** TEST PASSED ***\"\n420 GOTO 440\n430 PRINT \"*** TEST FAILED ***\"\n440 PRINT\n450 PRINT \"                END TEST\"\n460 PRINT\n470 PRINT \"END PROGRAM 132\"\n480 STOP\n490 PRINT \"RND#\";I;\" < 0: \";X\n500 GOTO 430\n510 PRINT \"RND#\";I;\" >= 1: \";X\n520 GOTO 430\n530 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 FOR I=1 TO N
+ 220   LET X=RND
+ 230   IF X<0 THEN 490
+ 240   IF X>=1 THEN 510
+ 250   LET S1=S1+X
+ 260   LET S2=S2+(X*X)
+ 270 NEXT I
+ 280 LET S = SQR((N*S2) - (S1*S1)) / N
+ 290 LET X1=S1/N
+ 300 PRINT ,"AVERAGE","STD. DEV."
+ 310 PRINT "THEORETICAL:",.5,1/(2*SQR(3))
+ 320 PRINT "ACTUAL:",X1,S
+ 330 LET A1=ABS(X1-0.5)
+ 340 REM 1.96 BASED ON SIGNIFICANCE LEVEL OF .05 AND INFINITE D.F
+ 350 LET A2=(1.96*S)/SQR(N)
+ 360 PRINT
+ 370 PRINT "ALLOWABLE DEVIATION: ";A2
+ 380 PRINT "ACTUAL DEVIATION:    ";A1
+ 390 PRINT
+ 400 IF A1>A2 THEN 430
+ 410 PRINT "*** TEST PASSED ***"
+ 420 GOTO 440
+ 430 PRINT "*** TEST FAILED ***"
+ 440 PRINT
+ 450 PRINT "                END TEST"
+ 460 PRINT
+ 470 PRINT "END PROGRAM 132"
+ 480 STOP
+ 490 PRINT "RND#";I;" < 0: ";X
+ 500 GOTO 430
+ 510 PRINT "RND#";I;" >= 1: ";X
+ 520 GOTO 430
+ 530 END
+ 
', tests/integration.rs:37:13

---- P136 stdout ----
thread 'P136' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n150 DIM C(121)\n160 REM SET BOUNDS FOR GAP TEST\n170 REM CONSOLIDATE ALL GAPS >= 10\n180 LET T=10\n190 REM SET LOW END OF HIT INTERVAL\n200 LET A1=.03\n210 REM SET HIGH END OF HIT INTERVAL\n220 LET A2=.13\n230 REM SET SIZE OF HIT INTERVAL\n240 LET A3=A2-A1\n250 REM PROB. THAT GAP >= T\n260 LET P1=(1-A3)^T\n270 REM PROB. THAT GAP = T-1\n280 LET P2=A3*((1-A3)^(T-1))\n290 IF P1<P2 THEN 330\n300 LET P1=P2\n310 REM P1 IS PROBABILITY OF LEAST PROBABLE CATEGORY\n320 REM WANT EXPECTED NUMBER >= 10\n330 LET N=INT(10/P1)+1\n340 PRINT\n350 PRINT \"WILL RUN \";N;\" TRIALS, SO THAT EACH POSSIBILITY HAS\"\n360 PRINT \"EXPECTED VALUE >= 10.\"\n370 FOR I=0 TO T\n380 LET C(I)=0\n390 NEXT I\n400 PRINT\n410 PRINT\n420 PRINT \"GAP SIZE\",\"ACTUAL COUNT\",\"EXPECTED COUNT\"\n430 PRINT\n440 FOR N1=1 TO N\n450 LET R=0\n460 LET X=RND\n470 IF X<A1 THEN 500\n480 IF X<A2 THEN 530\n490 REM MISSED - KEEP TRYING\n500 LET R=R+1\n510 GOTO 460\n520 REM HIT DESIGNATED INTERVAL\n530 IF R<=T THEN 550\n540 LET R=T\n550 LET C(R)=C(R)+1\n560 NEXT N1\n565 REM      MR. HAM HAD TO ADD LINE 566 TO INITIALIZE S TO AVOID CRASH\n566 LET S=0\n570 FOR I=0 TO T\n580 LET P9=(1-A3)^I\n590 IF I=T THEN 630\n600 LET P9=P9*A3\n610 PRINT I,C(I),P9*N\n620 GOTO 650\n630 REM P9=PROB OF GAP OF SIZE I\n640 PRINT \">=\";I,C(I),P9*N\n650 LET S=S+(C(I)*C(I)/P9)\n660 NEXT I\n670 LET V=(S/N)-N\n680 PRINT\n690 PRINT \"FOR 10 D.F., SHOULD HAVE 3.9403 <= CHI-SQ <= 18.307\"\n700 PRINT \"(5% TAIL AT EACH END.)\"\n710 PRINT\n720 PRINT \"ACTUAL CHI-SQ = \";V\n730 PRINT\n740 IF V<3.9403 THEN 780\n750 IF V>18.307 THEN 780\n760 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n770 GOTO 790\n780 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n790 PRINT\n800 PRINT \"                 END TEST\"\n810 PRINT\n820 PRINT \"END PROGRAM 136\"\n830 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 150 DIM C(121)
+ 160 REM SET BOUNDS FOR GAP TEST
+ 170 REM CONSOLIDATE ALL GAPS >= 10
+ 180 LET T=10
+ 190 REM SET LOW END OF HIT INTERVAL
+ 200 LET A1=.03
+ 210 REM SET HIGH END OF HIT INTERVAL
+ 220 LET A2=.13
+ 230 REM SET SIZE OF HIT INTERVAL
+ 240 LET A3=A2-A1
+ 250 REM PROB. THAT GAP >= T
+ 260 LET P1=(1-A3)^T
+ 270 REM PROB. THAT GAP = T-1
+ 280 LET P2=A3*((1-A3)^(T-1))
+ 290 IF P1<P2 THEN 330
+ 300 LET P1=P2
+ 310 REM P1 IS PROBABILITY OF LEAST PROBABLE CATEGORY
+ 320 REM WANT EXPECTED NUMBER >= 10
+ 330 LET N=INT(10/P1)+1
+ 340 PRINT
+ 350 PRINT "WILL RUN ";N;" TRIALS, SO THAT EACH POSSIBILITY HAS"
+ 360 PRINT "EXPECTED VALUE >= 10."
+ 370 FOR I=0 TO T
+ 380 LET C(I)=0
+ 390 NEXT I
+ 400 PRINT
+ 410 PRINT
+ 420 PRINT "GAP SIZE","ACTUAL COUNT","EXPECTED COUNT"
+ 430 PRINT
+ 440 FOR N1=1 TO N
+ 450 LET R=0
+ 460 LET X=RND
+ 470 IF X<A1 THEN 500
+ 480 IF X<A2 THEN 530
+ 490 REM MISSED - KEEP TRYING
+ 500 LET R=R+1
+ 510 GOTO 460
+ 520 REM HIT DESIGNATED INTERVAL
+ 530 IF R<=T THEN 550
+ 540 LET R=T
+ 550 LET C(R)=C(R)+1
+ 560 NEXT N1
+ 565 REM      MR. HAM HAD TO ADD LINE 566 TO INITIALIZE S TO AVOID CRASH
+ 566 LET S=0
+ 570 FOR I=0 TO T
+ 580 LET P9=(1-A3)^I
+ 590 IF I=T THEN 630
+ 600 LET P9=P9*A3
+ 610 PRINT I,C(I),P9*N
+ 620 GOTO 650
+ 630 REM P9=PROB OF GAP OF SIZE I
+ 640 PRINT ">=";I,C(I),P9*N
+ 650 LET S=S+(C(I)*C(I)/P9)
+ 660 NEXT I
+ 670 LET V=(S/N)-N
+ 680 PRINT
+ 690 PRINT "FOR 10 D.F., SHOULD HAVE 3.9403 <= CHI-SQ <= 18.307"
+ 700 PRINT "(5% TAIL AT EACH END.)"
+ 710 PRINT
+ 720 PRINT "ACTUAL CHI-SQ = ";V
+ 730 PRINT
+ 740 IF V<3.9403 THEN 780
+ 750 IF V>18.307 THEN 780
+ 760 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 770 GOTO 790
+ 780 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 790 PRINT
+ 800 PRINT "                 END TEST"
+ 810 PRINT
+ 820 PRINT "END PROGRAM 136"
+ 830 END
+ 
', tests/integration.rs:37:13

---- P134 stdout ----
thread 'P134' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 DIM P(1200),Q(30),R(30)\n240 REM SET #TRIALS PER EXPERIMENT\n250 LET N=1000\n260 REM SET #SLOTS USED IN ARRAY\n270 LET N8=INT(1.1*N)\n280 REM SET #EXPERIMENTS\n290 LET N9=30\n300 PRINT\n310 REM BEGIN TEST LOOP\n320 PRINT \"TEST\",\"K+\",\"K-\"\n330 FOR L=1 TO N9\n340 REM MARK SLOTS AS EMPTY\n350 FOR I=1 TO N8\n360 LET P(I)=3\n370 NEXT I\n380 REM FILL SLOTS WITH RANDOM VALUES, APPROXIMATELY IN ORDER\n390 FOR I=1 TO N\n400 LET X=RND\n410 LET X1=INT(N8*X)\n411 REM    MR. HAM ADDED NEXT 2 LINES TO FIX TEST\n412 IF X1>0 THEN 420\n413 LET X1=X1+1\n420 IF P(X1)<>3 THEN 460\n430 LET P(X1)=X\n440 GOTO 590\n450 REM IF PRIMARY SLOT FILLED, SEARCH FOR NEAREST EMPTY SLOT\n460 FOR J=1 TO N8\n470 IF X1-J<1 THEN 510\n480 IF P(X1-J)<>3 THEN 510\n490 LET P(X1-J)=X\n500 GOTO 590\n510 IF X1+J>N8 THEN 550\n520 IF P(X1+J)<>3 THEN 550\n530 LET P(X1+J)=X\n540 GOTO 590\n550 NEXT J\n560 PRINT \"RED ALERT - NO SLOT FOUND\",I,X\n570 PRINT \"FATAL ERROR IN PROGRAM ALGORITHM\"\n580 STOP\n590 NEXT I\n600 REM FIND GROUPS SEPARATED BY EMPTY SLOTS\n605 REM ASSERT ALL ELEMENTS OF ONE GROUP < ALL ELEMENTS OF NEXT GROUP\n607 REM THEREFORE, NEED SORT ONLY WITHIN GROUPS\n610 LET I=1\n620 FOR I8=I TO N8\n630 IF P(I8)<>3 THEN 660\n640 NEXT I8\n650 GOTO 930\n660 FOR I9=I8 TO N8\n670 IF P(I9)=3 THEN 700\n680 NEXT I9\n690 LET I9=N8+1\n700 IF I8>=I9-1 THEN 720\n710 GOSUB 750\n720 LET I=I9\n730 GOTO 620\n740 REM BUBBLE-SORT A GROUP\n750 LET I5=I8\n760 LET I6=I9-2\n770 LET I7=1\n780 LET A3=0\n790 FOR J1=I5 TO I6 STEP I7\n800 IF P(J1)<=P(J1+1) THEN 850\n810 LET A3=9\n820 LET W=P(J1)\n830 LET P(J1)=P(J1+1)\n840 LET P(J1+1)=W\n850 NEXT J1\n860 REM REVERSE DIRECTION OF SCAN\n870 LET W=I5\n880 LET I5=I6\n890 LET I6=W\n900 LET I7=0-I7\n910 IF A3<>0 THEN 780\n920 RETURN\n930 REM GROUPS SORTED, DO COMPRESS\n940 LET S1=0\n950 FOR R1=1 TO N\n960 LET S1=S1+1\n970 IF P(S1)=3 THEN 960\n980 LET P(R1)=P(S1)\n990 NEXT R1\n1000 LET M1=-1E38\n1010 LET M2=-1E38\n1020 REM FIND K+ AND K- ON PRIMARY DATA\n1030 FOR I=1 TO N\n1040 LET N1=(I/N)-P(I)\n1050 LET N2=P(I)-((I-1)/N)\n1060 IF N1<M1 THEN 1080\n1070 LET M1=N1\n1080 IF N2<M2 THEN 1100\n1090 LET M2=N2\n1100 NEXT I\n1110 LET N5=SQR(N)\n1120 LET M1=M1*N5\n1130 LET M2=M2*N5\n1140 LET Q(L)=M1\n1150 LET R(L)=M2\n1160 PRINT L,M1,M2\n1170 NEXT L\n1180 LET F=0\n1190 PRINT\n1200 PRINT \"SUMMARY K-S STATISTICS FOR THE K+ VALUES\"\n1210 GOSUB 1430\n1220 PRINT\n1230 PRINT \"SUMMARY K-S STATISTICS FOR THE K- VALUES\"\n1240 REM SET UP Q-ARRAY FOR SUBROUTINE\n1250 FOR L=1 TO N9\n1260 LET Q(L)=R(L)\n1270 NEXT L\n1280 GOSUB 1430\n1290 PRINT\n1300 REM BASED ON 30 TRIALS\n1310 PRINT \"ALL RESULTS SHOULD FALL BETWEEN .04354 AND 1.4801\"\n1320 PRINT\n1330 IF F=0 THEN 1360\n1340 PRINT \"*** TEST FAILED ***\"\n1350 GOTO 1370\n1360 PRINT \"*** TEST PASSED ***\"\n1370 PRINT\n1380 PRINT\n1390 PRINT \"               END TEST\"\n1400 PRINT\n1410 PRINT \"END PROGRAM 134\"\n1420 STOP\n1430 REM FIND K+ AND K- ON KS-STATS FROM PRIMARY DATA\n1440 FOR I=1 TO N9-1\n1450 FOR J=I+1 TO N9\n1460 IF Q(I)<=Q(J) THEN 1500\n1470 LET W=Q(I)\n1480 LET Q(I)=Q(J)\n1490 LET Q(J)=W\n1500 NEXT J\n1510 NEXT I\n1520 LET M1=-1E38\n1530 LET M2=-1E38\n1550 FOR I=1 TO N9\n1560 LET F1=1-EXP(-2*Q(I)*Q(I))\n1570 LET N1=(I/N9) - F1\n1580 LET N2=F1 - ((I-1)/N9)\n1590 IF N1<M1 THEN 1610\n1600 LET M1=N1\n1610 IF N2<M2 THEN 1630\n1620 LET M2=N2\n1630 NEXT I\n1640 LET N5=SQR(N9)\n1650 LET M1=M1*N5\n1660 LET M2=M2*N5\n1670 PRINT \"K+ = \";M1;\"        K- = \";M2\n1680 PRINT\n1690 REM VALUES BASED ON 30 TRIALS\n1700 IF M1<.04354 THEN 1750\n1710 IF M1>1.4801 THEN 1750\n1720 IF M2<.04354 THEN 1750\n1730 IF M2>1.4801 THEN 1750\n1740 GOTO 1760\n1750 LET F=F+1\n1760 RETURN\n1770 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 DIM P(1200),Q(30),R(30)
+ 240 REM SET #TRIALS PER EXPERIMENT
+ 250 LET N=1000
+ 260 REM SET #SLOTS USED IN ARRAY
+ 270 LET N8=INT(1.1*N)
+ 280 REM SET #EXPERIMENTS
+ 290 LET N9=30
+ 300 PRINT
+ 310 REM BEGIN TEST LOOP
+ 320 PRINT "TEST","K+","K-"
+ 330 FOR L=1 TO N9
+ 340 REM MARK SLOTS AS EMPTY
+ 350 FOR I=1 TO N8
+ 360 LET P(I)=3
+ 370 NEXT I
+ 380 REM FILL SLOTS WITH RANDOM VALUES, APPROXIMATELY IN ORDER
+ 390 FOR I=1 TO N
+ 400 LET X=RND
+ 410 LET X1=INT(N8*X)
+ 411 REM    MR. HAM ADDED NEXT 2 LINES TO FIX TEST
+ 412 IF X1>0 THEN 420
+ 413 LET X1=X1+1
+ 420 IF P(X1)<>3 THEN 460
+ 430 LET P(X1)=X
+ 440 GOTO 590
+ 450 REM IF PRIMARY SLOT FILLED, SEARCH FOR NEAREST EMPTY SLOT
+ 460 FOR J=1 TO N8
+ 470 IF X1-J<1 THEN 510
+ 480 IF P(X1-J)<>3 THEN 510
+ 490 LET P(X1-J)=X
+ 500 GOTO 590
+ 510 IF X1+J>N8 THEN 550
+ 520 IF P(X1+J)<>3 THEN 550
+ 530 LET P(X1+J)=X
+ 540 GOTO 590
+ 550 NEXT J
+ 560 PRINT "RED ALERT - NO SLOT FOUND",I,X
+ 570 PRINT "FATAL ERROR IN PROGRAM ALGORITHM"
+ 580 STOP
+ 590 NEXT I
+ 600 REM FIND GROUPS SEPARATED BY EMPTY SLOTS
+ 605 REM ASSERT ALL ELEMENTS OF ONE GROUP < ALL ELEMENTS OF NEXT GROUP
+ 607 REM THEREFORE, NEED SORT ONLY WITHIN GROUPS
+ 610 LET I=1
+ 620 FOR I8=I TO N8
+ 630 IF P(I8)<>3 THEN 660
+ 640 NEXT I8
+ 650 GOTO 930
+ 660 FOR I9=I8 TO N8
+ 670 IF P(I9)=3 THEN 700
+ 680 NEXT I9
+ 690 LET I9=N8+1
+ 700 IF I8>=I9-1 THEN 720
+ 710 GOSUB 750
+ 720 LET I=I9
+ 730 GOTO 620
+ 740 REM BUBBLE-SORT A GROUP
+ 750 LET I5=I8
+ 760 LET I6=I9-2
+ 770 LET I7=1
+ 780 LET A3=0
+ 790 FOR J1=I5 TO I6 STEP I7
+ 800 IF P(J1)<=P(J1+1) THEN 850
+ 810 LET A3=9
+ 820 LET W=P(J1)
+ 830 LET P(J1)=P(J1+1)
+ 840 LET P(J1+1)=W
+ 850 NEXT J1
+ 860 REM REVERSE DIRECTION OF SCAN
+ 870 LET W=I5
+ 880 LET I5=I6
+ 890 LET I6=W
+ 900 LET I7=0-I7
+ 910 IF A3<>0 THEN 780
+ 920 RETURN
+ 930 REM GROUPS SORTED, DO COMPRESS
+ 940 LET S1=0
+ 950 FOR R1=1 TO N
+ 960 LET S1=S1+1
+ 970 IF P(S1)=3 THEN 960
+ 980 LET P(R1)=P(S1)
+ 990 NEXT R1
+ 1000 LET M1=-1E38
+ 1010 LET M2=-1E38
+ 1020 REM FIND K+ AND K- ON PRIMARY DATA
+ 1030 FOR I=1 TO N
+ 1040 LET N1=(I/N)-P(I)
+ 1050 LET N2=P(I)-((I-1)/N)
+ 1060 IF N1<M1 THEN 1080
+ 1070 LET M1=N1
+ 1080 IF N2<M2 THEN 1100
+ 1090 LET M2=N2
+ 1100 NEXT I
+ 1110 LET N5=SQR(N)
+ 1120 LET M1=M1*N5
+ 1130 LET M2=M2*N5
+ 1140 LET Q(L)=M1
+ 1150 LET R(L)=M2
+ 1160 PRINT L,M1,M2
+ 1170 NEXT L
+ 1180 LET F=0
+ 1190 PRINT
+ 1200 PRINT "SUMMARY K-S STATISTICS FOR THE K+ VALUES"
+ 1210 GOSUB 1430
+ 1220 PRINT
+ 1230 PRINT "SUMMARY K-S STATISTICS FOR THE K- VALUES"
+ 1240 REM SET UP Q-ARRAY FOR SUBROUTINE
+ 1250 FOR L=1 TO N9
+ 1260 LET Q(L)=R(L)
+ 1270 NEXT L
+ 1280 GOSUB 1430
+ 1290 PRINT
+ 1300 REM BASED ON 30 TRIALS
+ 1310 PRINT "ALL RESULTS SHOULD FALL BETWEEN .04354 AND 1.4801"
+ 1320 PRINT
+ 1330 IF F=0 THEN 1360
+ 1340 PRINT "*** TEST FAILED ***"
+ 1350 GOTO 1370
+ 1360 PRINT "*** TEST PASSED ***"
+ 1370 PRINT
+ 1380 PRINT
+ 1390 PRINT "               END TEST"
+ 1400 PRINT
+ 1410 PRINT "END PROGRAM 134"
+ 1420 STOP
+ 1430 REM FIND K+ AND K- ON KS-STATS FROM PRIMARY DATA
+ 1440 FOR I=1 TO N9-1
+ 1450 FOR J=I+1 TO N9
+ 1460 IF Q(I)<=Q(J) THEN 1500
+ 1470 LET W=Q(I)
+ 1480 LET Q(I)=Q(J)
+ 1490 LET Q(J)=W
+ 1500 NEXT J
+ 1510 NEXT I
+ 1520 LET M1=-1E38
+ 1530 LET M2=-1E38
+ 1550 FOR I=1 TO N9
+ 1560 LET F1=1-EXP(-2*Q(I)*Q(I))
+ 1570 LET N1=(I/N9) - F1
+ 1580 LET N2=F1 - ((I-1)/N9)
+ 1590 IF N1<M1 THEN 1610
+ 1600 LET M1=N1
+ 1610 IF N2<M2 THEN 1630
+ 1620 LET M2=N2
+ 1630 NEXT I
+ 1640 LET N5=SQR(N9)
+ 1650 LET M1=M1*N5
+ 1660 LET M2=M2*N5
+ 1670 PRINT "K+ = ";M1;"        K- = ";M2
+ 1680 PRINT
+ 1690 REM VALUES BASED ON 30 TRIALS
+ 1700 IF M1<.04354 THEN 1750
+ 1710 IF M1>1.4801 THEN 1750
+ 1720 IF M2<.04354 THEN 1750
+ 1730 IF M2>1.4801 THEN 1750
+ 1740 GOTO 1760
+ 1750 LET F=F+1
+ 1760 RETURN
+ 1770 END
+ 
', tests/integration.rs:37:13

---- P133 stdout ----
thread 'P133' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n300 DIM Y(21)\n310 PRINT \"EXPERIMENT\",\"CHI-SQUARE\",\"CATEGORY\"\n320 PRINT\n330 REM PERFORM 60 EXPERIMENTS OF 1050 SAMPLES EACH\n340 REM OF PSEUDO-RANDOM NUMBERS THEN COMPUTE\n350 REM AND TEST CHI-SQ STATISTIC FOR EACH EXPERIMENT.\n360 REM BELOW ARE CHI-SQ VALUES FOR 20 DEGREES OF FREEDOM FOR\n370 REM PERCENTAGES 1,5,10,25,50,75,90,95,99, AND 100\n380 LET L(1)=8.26040\n390 LET L(2)=10.8508\n400 LET L(3)=12.4426\n410 LET L(4)=15.4518\n420 LET L(5)=19.3374\n430 LET L(6)=23.8277\n440 LET L(7)=28.4120\n450 LET L(8)=31.4104\n460 LET L(9)=37.5662\n470 LET L(10)=1E38\n480 REM ZERO OUT CATEGORY COUNTS\n490 FOR C=1 TO 10\n500 LET Z(C)=0\n510 NEXT C\n520 REM DO 60 EXPERIMENTS, SO EXPECTED NUMBER FOR EACH GLOBAL\n530 REM CATEGORY IS >= 5\n540 FOR E=1 TO 60\n550 REM INITIALIZE OBSERVED COUNTS AT 0 FOR A PARTITION OF THE\n560 REM UNIT INTERVAL INTO 21 CELLS\n570 FOR I = 1 TO 21\n580 LET Y(I) = 0\n590 NEXT I\n600 REM OBTAIN FREQUENCY COUNTS FOR 1050 RANDOM NUMBERS\n610 FOR I=1 TO P1\n620 LET X = RND\n630 LET R = INT(21*X) + 1\n640 LET Y(R) = Y(R) + 1\n650 NEXT I\n660 REM COMPUTE CHI-SQ STATISTIC FOR EACH EXPERIMENT\n670 LET S = 0\n680 FOR I = 1 TO 21\n690 LET S = S + (21*Y(I)*Y(I))\n700 NEXT I\n710 LET V1=(S/P1) - P1\n720 REM TEST CHI-SQ STATISTIC FOR EACH EXPERIMENT\n730 FOR C=1 TO 10\n740 IF V1<L(C) THEN 760\n750 NEXT C\n760 LET Z(C)=Z(C)+1\n770 REM PRINT EVALUATION\n780 PRINT E,V1,C\n790 NEXT E\n800 PRINT\n810 PRINT\n820 PRINT\n830 PRINT \"SUMMARY EVALUATION STATISTICS\"\n840 PRINT\n850 PRINT ,\"ACTUAL\",\"EXPECTED\"\n860 PRINT \"CATEGORY\",\"COUNT\",\"COUNT\"\n870 LET T5=60\n880 LET T(1)=.01*T5\n890 LET T(2)=.04*T5\n900 LET T(3)=.05*T5\n910 LET T(4)=.15*T5\n920 LET T(5)=.25*T5\n930 LET T(6)=.25*T5\n940 LET T(7)=.15*T5\n950 LET T(8)=.05*T5\n960 LET T(9)=.04*T5\n970 LET T(10)=.01*T5\n980 FOR C=1 TO 10\n990 PRINT C,Z(C),T(C)\n1000 NEXT C\n1010 PRINT\n1020 LET Y(1)=Z(1)+Z(2)+Z(3)\n1030 LET Y(2)=Z(4)\n1040 LET Y(3)=Z(5)\n1050 LET Y(4)=Z(6)\n1060 LET Y(5)=Z(7)\n1070 LET Y(6)=Z(8)+Z(9)+Z(10)\n1080 REM DO CHI-SQ ON CHI-SQ STATS FROM PRIMARY DATA - EXPECT\n1090 REM DISTRIBUTION OF:\n1100 REM  6 = 60*(.01+.04+.05)\n1110 REM  9 = 60*.15\n1120 REM 15 = 60*.25\n1130 REM 15 = 60*.25\n1140 REM  9 = 60*.15\n1150 REM  6 = 60*(.05+.04+.01)\n1160 LET F(1)=.1\n1170 LET F(2)=.15\n1180 LET F(3)=.25\n1190 LET F(4)=.25\n1200 LET F(5)=.15\n1210 LET F(6)=.1\n1220 LET S=0\n1230 FOR I=1 TO 6\n1240 LET W=(Y(I)*Y(I))/F(I)\n1250 LET S=S+W\n1260 NEXT I\n1270 LET V1=(S/60)-60\n1280 REM FOR 5 D.F., CHI-SQ CUTOFFS FOR EXTREMES OF 5% ARE 1.145476\n1290 REM AND 11.0705\n1300 PRINT\n1310 PRINT \"WILL CONSOLIDATE CATEGORIES 1-3 AND 8-10, SO THAT\"\n1320 PRINT \"EXPECTED VALUE IN EACH IS >= 5, AS REQUIRED BY\"\n1330 PRINT \"CHI-SQUARE TEST.\"\n1340 PRINT\n1350 PRINT \"FOR FIVE D.F., SHOULD HAVE 1.145476 <= CHI-SQ <= 11.0705\"\n1360 PRINT \"(5% TAIL AT EACH END.)\"\n1370 PRINT\n1380 PRINT \"ACTUAL CHI-SQ = \";V1\n1390 PRINT\n1400 IF V1<1.145476 THEN 1440\n1410 IF V1>11.0705 THEN 1440\n1420 PRINT \" ***  TEST PASSED  *** \"\n1430 GOTO 1450\n1440 PRINT \" ***  TEST FAILED  *** \"\n1450 PRINT\n1460 PRINT \"                    END TEST\"\n1470 PRINT\n1480 PRINT \"END PROGRAM 133\"\n1490 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 300 DIM Y(21)
+ 310 PRINT "EXPERIMENT","CHI-SQUARE","CATEGORY"
+ 320 PRINT
+ 330 REM PERFORM 60 EXPERIMENTS OF 1050 SAMPLES EACH
+ 340 REM OF PSEUDO-RANDOM NUMBERS THEN COMPUTE
+ 350 REM AND TEST CHI-SQ STATISTIC FOR EACH EXPERIMENT.
+ 360 REM BELOW ARE CHI-SQ VALUES FOR 20 DEGREES OF FREEDOM FOR
+ 370 REM PERCENTAGES 1,5,10,25,50,75,90,95,99, AND 100
+ 380 LET L(1)=8.26040
+ 390 LET L(2)=10.8508
+ 400 LET L(3)=12.4426
+ 410 LET L(4)=15.4518
+ 420 LET L(5)=19.3374
+ 430 LET L(6)=23.8277
+ 440 LET L(7)=28.4120
+ 450 LET L(8)=31.4104
+ 460 LET L(9)=37.5662
+ 470 LET L(10)=1E38
+ 480 REM ZERO OUT CATEGORY COUNTS
+ 490 FOR C=1 TO 10
+ 500 LET Z(C)=0
+ 510 NEXT C
+ 520 REM DO 60 EXPERIMENTS, SO EXPECTED NUMBER FOR EACH GLOBAL
+ 530 REM CATEGORY IS >= 5
+ 540 FOR E=1 TO 60
+ 550 REM INITIALIZE OBSERVED COUNTS AT 0 FOR A PARTITION OF THE
+ 560 REM UNIT INTERVAL INTO 21 CELLS
+ 570 FOR I = 1 TO 21
+ 580 LET Y(I) = 0
+ 590 NEXT I
+ 600 REM OBTAIN FREQUENCY COUNTS FOR 1050 RANDOM NUMBERS
+ 610 FOR I=1 TO P1
+ 620 LET X = RND
+ 630 LET R = INT(21*X) + 1
+ 640 LET Y(R) = Y(R) + 1
+ 650 NEXT I
+ 660 REM COMPUTE CHI-SQ STATISTIC FOR EACH EXPERIMENT
+ 670 LET S = 0
+ 680 FOR I = 1 TO 21
+ 690 LET S = S + (21*Y(I)*Y(I))
+ 700 NEXT I
+ 710 LET V1=(S/P1) - P1
+ 720 REM TEST CHI-SQ STATISTIC FOR EACH EXPERIMENT
+ 730 FOR C=1 TO 10
+ 740 IF V1<L(C) THEN 760
+ 750 NEXT C
+ 760 LET Z(C)=Z(C)+1
+ 770 REM PRINT EVALUATION
+ 780 PRINT E,V1,C
+ 790 NEXT E
+ 800 PRINT
+ 810 PRINT
+ 820 PRINT
+ 830 PRINT "SUMMARY EVALUATION STATISTICS"
+ 840 PRINT
+ 850 PRINT ,"ACTUAL","EXPECTED"
+ 860 PRINT "CATEGORY","COUNT","COUNT"
+ 870 LET T5=60
+ 880 LET T(1)=.01*T5
+ 890 LET T(2)=.04*T5
+ 900 LET T(3)=.05*T5
+ 910 LET T(4)=.15*T5
+ 920 LET T(5)=.25*T5
+ 930 LET T(6)=.25*T5
+ 940 LET T(7)=.15*T5
+ 950 LET T(8)=.05*T5
+ 960 LET T(9)=.04*T5
+ 970 LET T(10)=.01*T5
+ 980 FOR C=1 TO 10
+ 990 PRINT C,Z(C),T(C)
+ 1000 NEXT C
+ 1010 PRINT
+ 1020 LET Y(1)=Z(1)+Z(2)+Z(3)
+ 1030 LET Y(2)=Z(4)
+ 1040 LET Y(3)=Z(5)
+ 1050 LET Y(4)=Z(6)
+ 1060 LET Y(5)=Z(7)
+ 1070 LET Y(6)=Z(8)+Z(9)+Z(10)
+ 1080 REM DO CHI-SQ ON CHI-SQ STATS FROM PRIMARY DATA - EXPECT
+ 1090 REM DISTRIBUTION OF:
+ 1100 REM  6 = 60*(.01+.04+.05)
+ 1110 REM  9 = 60*.15
+ 1120 REM 15 = 60*.25
+ 1130 REM 15 = 60*.25
+ 1140 REM  9 = 60*.15
+ 1150 REM  6 = 60*(.05+.04+.01)
+ 1160 LET F(1)=.1
+ 1170 LET F(2)=.15
+ 1180 LET F(3)=.25
+ 1190 LET F(4)=.25
+ 1200 LET F(5)=.15
+ 1210 LET F(6)=.1
+ 1220 LET S=0
+ 1230 FOR I=1 TO 6
+ 1240 LET W=(Y(I)*Y(I))/F(I)
+ 1250 LET S=S+W
+ 1260 NEXT I
+ 1270 LET V1=(S/60)-60
+ 1280 REM FOR 5 D.F., CHI-SQ CUTOFFS FOR EXTREMES OF 5% ARE 1.145476
+ 1290 REM AND 11.0705
+ 1300 PRINT
+ 1310 PRINT "WILL CONSOLIDATE CATEGORIES 1-3 AND 8-10, SO THAT"
+ 1320 PRINT "EXPECTED VALUE IN EACH IS >= 5, AS REQUIRED BY"
+ 1330 PRINT "CHI-SQUARE TEST."
+ 1340 PRINT
+ 1350 PRINT "FOR FIVE D.F., SHOULD HAVE 1.145476 <= CHI-SQ <= 11.0705"
+ 1360 PRINT "(5% TAIL AT EACH END.)"
+ 1370 PRINT
+ 1380 PRINT "ACTUAL CHI-SQ = ";V1
+ 1390 PRINT
+ 1400 IF V1<1.145476 THEN 1440
+ 1410 IF V1>11.0705 THEN 1440
+ 1420 PRINT " ***  TEST PASSED  *** "
+ 1430 GOTO 1450
+ 1440 PRINT " ***  TEST FAILED  *** "
+ 1450 PRINT
+ 1460 PRINT "                    END TEST"
+ 1470 PRINT
+ 1480 PRINT "END PROGRAM 133"
+ 1490 END
+ 
', tests/integration.rs:37:13

---- P135 stdout ----
thread 'P135' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n160 DIM C(121)\n170 REM SET PARTITION OF 0-1 SEGMENT\n180 LET D=11\n190 REM FOR PAIRS OF NUMBERS, ARE #PARTITIONS^2 CATEGORIES\n200 LET D2=D*D\n210 FOR I=1 TO D2\n220 LET C(I)=0\n230 NEXT I\n240 REM EXPECT 20 IN EACH CATEGORY\n250 LET N=20*D2\n260 FOR N1=1 TO N\n270 LET X=RND\n280 LET Y=RND\n290 LET I=(D*INT(D*X))+INT(D*Y)+1\n300 LET C(I)=C(I)+1\n310 NEXT N1\n320 LET S=0\n330 PRINT\n340 PRINT \"1ST OF PAIR\",\"2ND OF PAIR\",\"ACTUAL COUNT\"\n350 PRINT \"(EXPECTED COUNT = 20)\"\n360 PRINT\n370 FOR I=1 TO D2\n380 LET I9=I-1\n390 LET I1=INT(I9/D)\n400 LET I2=I9 - (D*I1) + 1\n410 LET I1=I1+1\n420 PRINT I1,I2,C(I)\n430 LET S=S + (D2*C(I)*C(I))\n440 NEXT I\n450 LET V=(S/N) - N\n460 PRINT\n470 PRINT \"FOR 120 D.F., SHOULD HAVE 95.70 <= CHI-SQ <= 146.57\"\n480 PRINT \"(5% TAIL AT EACH END).\"\n490 PRINT\n500 PRINT \"ACTUAL CHI-SQ = \";V\n510 PRINT\n520 IF V<95.70 THEN 560\n530 IF V>146.57 THEN 560\n540 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n550 GOTO 570\n560 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n570 REM DONE\n580 PRINT\n590 PRINT \"                  END TEST\"\n600 PRINT\n610 PRINT \"END PROGRAM 135\"\n620 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 160 DIM C(121)
+ 170 REM SET PARTITION OF 0-1 SEGMENT
+ 180 LET D=11
+ 190 REM FOR PAIRS OF NUMBERS, ARE #PARTITIONS^2 CATEGORIES
+ 200 LET D2=D*D
+ 210 FOR I=1 TO D2
+ 220 LET C(I)=0
+ 230 NEXT I
+ 240 REM EXPECT 20 IN EACH CATEGORY
+ 250 LET N=20*D2
+ 260 FOR N1=1 TO N
+ 270 LET X=RND
+ 280 LET Y=RND
+ 290 LET I=(D*INT(D*X))+INT(D*Y)+1
+ 300 LET C(I)=C(I)+1
+ 310 NEXT N1
+ 320 LET S=0
+ 330 PRINT
+ 340 PRINT "1ST OF PAIR","2ND OF PAIR","ACTUAL COUNT"
+ 350 PRINT "(EXPECTED COUNT = 20)"
+ 360 PRINT
+ 370 FOR I=1 TO D2
+ 380 LET I9=I-1
+ 390 LET I1=INT(I9/D)
+ 400 LET I2=I9 - (D*I1) + 1
+ 410 LET I1=I1+1
+ 420 PRINT I1,I2,C(I)
+ 430 LET S=S + (D2*C(I)*C(I))
+ 440 NEXT I
+ 450 LET V=(S/N) - N
+ 460 PRINT
+ 470 PRINT "FOR 120 D.F., SHOULD HAVE 95.70 <= CHI-SQ <= 146.57"
+ 480 PRINT "(5% TAIL AT EACH END)."
+ 490 PRINT
+ 500 PRINT "ACTUAL CHI-SQ = ";V
+ 510 PRINT
+ 520 IF V<95.70 THEN 560
+ 530 IF V>146.57 THEN 560
+ 540 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 550 GOTO 570
+ 560 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 570 REM DONE
+ 580 PRINT
+ 590 PRINT "                  END TEST"
+ 600 PRINT
+ 610 PRINT "END PROGRAM 135"
+ 620 END
+ 
', tests/integration.rs:37:13

---- P128 stdout ----
thread 'P128' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 READ A,T,L,H\n270 IF A=999 THEN 2000\n280 LET C=TAN(A)\n285 IF L>H THEN 1000\n290 IF C=T THEN 333\n300 IF C<L THEN 444\n310 IF C>H THEN 444\n320 LET O$=\" OK \"\n330 GOTO 500\n333 LET O$=\" OK - EXACT\"\n340 GOTO 500\n444 LET O$=\"FAIL\"\n445 LET F=F+1\n450 GOTO 500\n500 LET R=H-L\n510 IF R=0 THEN 700\n520 LET E=ABS((C-T)/R)\n525 LET E=E+E\n530 PRINT A,T,C,E,O$\n540 GOTO 260\n700 PRINT A,T,C,\"RANGE ZERO\",O$\n710 GOTO 260\n1000 IF C=T THEN 1333\n1010 IF C>L THEN 1444\n1020 IF C<H THEN 1444\n1030 LET O$=\"FAIL\"\n1040 LET F=F+1\n1050 GOTO 1500\n1333 LET O$=\" OK - EXACT\"\n1344 GOTO 1500\n1444 LET O$=\" OK \"\n1445 GOTO 1500\n1500 PRINT A,T,C,\"RANGE SPLIT\",O$\n1510 GOTO 260\n2000 PRINT\n2010 IF F=0 THEN 2100\n2020 PRINT \"*** INFORMATIVE TEST FAILED IN \";F;\" CASE(S) ***\"\n2030 GOTO 2110\n2100 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n2110 PRINT\n2120 PRINT \"               END TEST\"\n2130 PRINT\n2140 PRINT \"END PROGRAM 128\"\n3000 DATA -0.987789000E+05,-0.138017476E+01\n3010 DATA -0.171848904E+01,-0.112416124E+01\n3020 DATA -0.987654000E+04, 0.724991905E+00\n3030 DATA  0.709844580E+00, 0.740360468E+00\n3040 DATA -0.987654000E+03,-0.252646135E+01\n3050 DATA -0.253386806E+01,-0.251909194E+01\n3060 DATA -0.987654000E+02,-0.506921050E+01\n3070 DATA -0.507188654E+01,-0.506653715E+01\n3080 DATA -0.987654000E+01,-0.485230117E+00\n3090 DATA -0.485242972E+00,-0.485217262E+00\n3100 DATA -0.555555000E+01, 0.890667992E+00\n3110 DATA  0.890649559E+00, 0.890686424E+00\n3120 DATA -0.471239000E+01, 0.980762048E+06\n3130 DATA  0.907472194E+05,-0.111353304E+06\n3140 DATA -0.456789000E+01,-0.687223055E+01\n3150 DATA -0.687271786E+01,-0.687174330E+01\n3160 DATA -0.400000000E+01,-0.115782128E+01\n3170 DATA -0.115784969E+01,-0.115779287E+01\n3180 DATA -0.314159000E+01, 0.265358979E-05\n3190 DATA -0.734641521E-05, 0.126536398E-04\n3200 DATA -0.287654000E+01, 0.271439087E+00\n3210 DATA  0.271427849E+00, 0.271450324E+00\n3220 DATA -0.200000000E+01, 0.218503986E+01\n3230 DATA  0.218497712E+01, 0.218510261E+01\n3240 DATA -0.161616000E+01, 0.220289470E+02\n3250 DATA  0.220240353E+02, 0.220338608E+02\n3280 DATA -0.157081000E+01, 0.731357419E+05\n3290 DATA  0.422418008E+05, 0.272242309E+06\n3300 DATA -0.157080000E+01, 0.272241808E+06\n3310 DATA  0.731356919E+05,-0.158057413E+06\n3320 DATA -0.157078000E+01,-0.612490085E+05\n3330 DATA -0.158058414E+06,-0.379840648E+05\n3340 DATA -0.123456000E+01,-0.286116592E+01\n3350 DATA -0.286126279E+01,-0.286106906E+01\n3360 DATA -0.100000000E+01,-0.155740772E+01\n3370 DATA -0.155744699E+01,-0.155736847E+01\n3380 DATA -0.876540000E+00,-0.120117664E+01\n3390 DATA -0.120118408E+01,-0.120116919E+01\n3400 DATA -0.232323000E+00,-0.236595054E+00\n3410 DATA -0.236596611E+00,-0.236593498E+00\n3420 DATA -0.767676000E-01,-0.769187603E-01\n3430 DATA -0.769189109E-01,-0.769186096E-01\n3460 DATA -0.234567000E-01,-0.234610030E-01\n3470 DATA -0.234511531E-01,-0.234608529E-01\n3480 DATA -0.123456000E-01,-0.123462273E-01\n3490 DATA -0.123463773E-01,-0.123460772E-01\n3520 DATA -0.987654000E-02,-0.987686115E-02\n3530 DATA -0.987687616E-02,-0.987684615E-02\n3540 DATA -0.345678000E-02,-0.345679377E-02\n3550 DATA -0.345680877E-02,-0.345677876E-02\n3560 DATA -0.987654000E-03,-0.987654321E-03\n3570 DATA -0.987655822E-03,-0.987652821E-03\n3580 DATA -0.345678000E-03,-0.345678014E-03\n3590 DATA -0.345679514E-03,-0.345676513E-03\n3720 DATA -0.900000000E-04,-0.900000002E-04\n3730 DATA -0.900001503E-04,-0.899998502E-04\n3740 DATA -0.900000000E-06,-0.900000000E-06\n3750 DATA -0.900001501E-06,-0.899998500E-06\n3760 DATA -0.900000000E-09,-0.900000000E-09\n3770 DATA -0.900001500E-09,-0.899998500E-09\n3780 DATA -0.900000000E-19,-0.900000000E-19\n3790 DATA -0.900001500E-19,-0.899998500E-19\n3800 DATA -0.900000000E-29,-0.900000000E-29\n3810 DATA -0.900001500E-29,-0.899998500E-29\n3812 DATA -0.900000000E-37,-0.900000000E-37\n3814 DATA -0.900001500E-37,-0.899998500E-37\n3815 DATA 0,0,0,0\n3816 DATA  0.900000000E-37, 0.900000000E-37\n3818 DATA  0.899998500E-37, 0.900001500E-37\n3820 DATA  0.900000000E-29, 0.900000000E-29\n3830 DATA  0.899998500E-29, 0.900001500E-29\n3840 DATA  0.900000000E-19, 0.900000000E-19\n3850 DATA  0.899998500E-19, 0.900001500E-19\n3860 DATA  0.900000000E-09, 0.900000000E-09\n3870 DATA  0.899998500E-09, 0.900001500E-09\n3880 DATA  0.900000000E-06, 0.900000000E-06\n3890 DATA  0.899998500E-06, 0.900001501E-06\n3900 DATA  0.900000000E-04, 0.900000002E-04\n3910 DATA  0.899998502E-04, 0.900001503E-04\n3920 DATA  0.345678000E-03, 0.345678014E-03\n3930 DATA  0.345676513E-03, 0.345679514E-03\n3940 DATA  0.987654000E-03, 0.987654321E-03\n3950 DATA  0.987652821E-03, 0.987655822E-03\n3960 DATA  0.345678000E-02, 0.345679377E-02\n3970 DATA  0.345677876E-02, 0.345680877E-02\n3980 DATA  0.987654000E-02, 0.987686115E-02\n3990 DATA  0.987684615E-02, 0.987687616E-02\n4000 DATA  0.123456000E-01, 0.123462273E-01\n4010 DATA  0.123460772E-01, 0.123463773E-01\n4020 DATA  0.234567000E-01, 0.234560030E-01\n4030 DATA  0.234608529E-01, 0.234611531E-01\n4040 DATA  0.767676000E-01, 0.769187603E-01\n4050 DATA  0.769186096E-01, 0.769189109E-01\n4060 DATA  0.232323000E+00, 0.236595054E+00\n4070 DATA  0.236593498E+00, 0.236596611E+00\n4080 DATA  0.876543000E+00, 0.120118397E+01\n4090 DATA  0.120117652E+01, 0.120119141E+01\n4100 DATA  0.100000000E+01, 0.155740772E+01\n4110 DATA  0.155736847E+01, 0.155744699E+01\n4120 DATA  0.123456000E+01, 0.286116592E+01\n4130 DATA  0.286106906E+01, 0.286126279E+01\n4140 DATA  0.157078000E+01, 0.612490085E+05\n4150 DATA  0.379840648E+05, 0.158058414E+06\n4160 DATA  0.157080000E+01,-0.272241808E+06\n4170 DATA  0.158057413E+06,-0.731356919E+05\n4180 DATA  0.157081000E+01,-0.731357419E+05\n4190 DATA -0.272242309E+06,-0.422418008E+05\n4200 DATA  0.161616000E+01,-0.422418008E+05\n4210 DATA -0.220338608E+02,-0.220240353E+02\n4220 DATA  0.200000000E+01,-0.218503986E+01\n4230 DATA -0.218510261E+01,-0.218497712E+01\n4240 DATA  0.287654000E+01,-0.271439087E+00\n4250 DATA -0.271450324E+00,-0.271427849E+00\n4260 DATA  0.314159000E+01,-0.265358979E-05\n4270 DATA -0.126536398E-04, 0.734641521E-05\n4280 DATA  0.400000000E+01, 0.115782128E+01\n4290 DATA  0.115779287E+01, 0.115784969E+01\n4300 DATA  0.456789000E+01, 0.687223055E+01\n4310 DATA  0.687174330E+01, 0.687271786E+01\n4320 DATA  0.471239000E+01,-0.980762049E+06\n4330 DATA  0.111353304E+06,-0.907472194E+05\n4340 DATA  0.555555000E+01,-0.890667992E+00\n4350 DATA -0.890686426E+00,-0.890649559E+00\n4360 DATA  0.987654000E+01, 0.485230117E+00\n4370 DATA  0.485217262E+00, 0.485242972E+00\n4380 DATA  0.987654000E+02, 0.506921050E+01\n4390 DATA  0.506653715E+01, 0.507188654E+01\n4400 DATA  0.987654000E+03, 0.253386806E+01\n4410 DATA  0.251909194E+01, 0.253386806E+01\n4420 DATA  0.987654000E+04,-0.724991905E+00\n4430 DATA -0.740360468E+00,-0.709844580E+00\n4440 DATA  0.987789000E+05, 0.138017476E+01\n4450 DATA  0.112416124E+01, 0.171848904E+01\n9000 DATA 999,0,0,0\n9400 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 READ A,T,L,H
+ 270 IF A=999 THEN 2000
+ 280 LET C=TAN(A)
+ 285 IF L>H THEN 1000
+ 290 IF C=T THEN 333
+ 300 IF C<L THEN 444
+ 310 IF C>H THEN 444
+ 320 LET O$=" OK "
+ 330 GOTO 500
+ 333 LET O$=" OK - EXACT"
+ 340 GOTO 500
+ 444 LET O$="FAIL"
+ 445 LET F=F+1
+ 450 GOTO 500
+ 500 LET R=H-L
+ 510 IF R=0 THEN 700
+ 520 LET E=ABS((C-T)/R)
+ 525 LET E=E+E
+ 530 PRINT A,T,C,E,O$
+ 540 GOTO 260
+ 700 PRINT A,T,C,"RANGE ZERO",O$
+ 710 GOTO 260
+ 1000 IF C=T THEN 1333
+ 1010 IF C>L THEN 1444
+ 1020 IF C<H THEN 1444
+ 1030 LET O$="FAIL"
+ 1040 LET F=F+1
+ 1050 GOTO 1500
+ 1333 LET O$=" OK - EXACT"
+ 1344 GOTO 1500
+ 1444 LET O$=" OK "
+ 1445 GOTO 1500
+ 1500 PRINT A,T,C,"RANGE SPLIT",O$
+ 1510 GOTO 260
+ 2000 PRINT
+ 2010 IF F=0 THEN 2100
+ 2020 PRINT "*** INFORMATIVE TEST FAILED IN ";F;" CASE(S) ***"
+ 2030 GOTO 2110
+ 2100 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 2110 PRINT
+ 2120 PRINT "               END TEST"
+ 2130 PRINT
+ 2140 PRINT "END PROGRAM 128"
+ 3000 DATA -0.987789000E+05,-0.138017476E+01
+ 3010 DATA -0.171848904E+01,-0.112416124E+01
+ 3020 DATA -0.987654000E+04, 0.724991905E+00
+ 3030 DATA  0.709844580E+00, 0.740360468E+00
+ 3040 DATA -0.987654000E+03,-0.252646135E+01
+ 3050 DATA -0.253386806E+01,-0.251909194E+01
+ 3060 DATA -0.987654000E+02,-0.506921050E+01
+ 3070 DATA -0.507188654E+01,-0.506653715E+01
+ 3080 DATA -0.987654000E+01,-0.485230117E+00
+ 3090 DATA -0.485242972E+00,-0.485217262E+00
+ 3100 DATA -0.555555000E+01, 0.890667992E+00
+ 3110 DATA  0.890649559E+00, 0.890686424E+00
+ 3120 DATA -0.471239000E+01, 0.980762048E+06
+ 3130 DATA  0.907472194E+05,-0.111353304E+06
+ 3140 DATA -0.456789000E+01,-0.687223055E+01
+ 3150 DATA -0.687271786E+01,-0.687174330E+01
+ 3160 DATA -0.400000000E+01,-0.115782128E+01
+ 3170 DATA -0.115784969E+01,-0.115779287E+01
+ 3180 DATA -0.314159000E+01, 0.265358979E-05
+ 3190 DATA -0.734641521E-05, 0.126536398E-04
+ 3200 DATA -0.287654000E+01, 0.271439087E+00
+ 3210 DATA  0.271427849E+00, 0.271450324E+00
+ 3220 DATA -0.200000000E+01, 0.218503986E+01
+ 3230 DATA  0.218497712E+01, 0.218510261E+01
+ 3240 DATA -0.161616000E+01, 0.220289470E+02
+ 3250 DATA  0.220240353E+02, 0.220338608E+02
+ 3280 DATA -0.157081000E+01, 0.731357419E+05
+ 3290 DATA  0.422418008E+05, 0.272242309E+06
+ 3300 DATA -0.157080000E+01, 0.272241808E+06
+ 3310 DATA  0.731356919E+05,-0.158057413E+06
+ 3320 DATA -0.157078000E+01,-0.612490085E+05
+ 3330 DATA -0.158058414E+06,-0.379840648E+05
+ 3340 DATA -0.123456000E+01,-0.286116592E+01
+ 3350 DATA -0.286126279E+01,-0.286106906E+01
+ 3360 DATA -0.100000000E+01,-0.155740772E+01
+ 3370 DATA -0.155744699E+01,-0.155736847E+01
+ 3380 DATA -0.876540000E+00,-0.120117664E+01
+ 3390 DATA -0.120118408E+01,-0.120116919E+01
+ 3400 DATA -0.232323000E+00,-0.236595054E+00
+ 3410 DATA -0.236596611E+00,-0.236593498E+00
+ 3420 DATA -0.767676000E-01,-0.769187603E-01
+ 3430 DATA -0.769189109E-01,-0.769186096E-01
+ 3460 DATA -0.234567000E-01,-0.234610030E-01
+ 3470 DATA -0.234511531E-01,-0.234608529E-01
+ 3480 DATA -0.123456000E-01,-0.123462273E-01
+ 3490 DATA -0.123463773E-01,-0.123460772E-01
+ 3520 DATA -0.987654000E-02,-0.987686115E-02
+ 3530 DATA -0.987687616E-02,-0.987684615E-02
+ 3540 DATA -0.345678000E-02,-0.345679377E-02
+ 3550 DATA -0.345680877E-02,-0.345677876E-02
+ 3560 DATA -0.987654000E-03,-0.987654321E-03
+ 3570 DATA -0.987655822E-03,-0.987652821E-03
+ 3580 DATA -0.345678000E-03,-0.345678014E-03
+ 3590 DATA -0.345679514E-03,-0.345676513E-03
+ 3720 DATA -0.900000000E-04,-0.900000002E-04
+ 3730 DATA -0.900001503E-04,-0.899998502E-04
+ 3740 DATA -0.900000000E-06,-0.900000000E-06
+ 3750 DATA -0.900001501E-06,-0.899998500E-06
+ 3760 DATA -0.900000000E-09,-0.900000000E-09
+ 3770 DATA -0.900001500E-09,-0.899998500E-09
+ 3780 DATA -0.900000000E-19,-0.900000000E-19
+ 3790 DATA -0.900001500E-19,-0.899998500E-19
+ 3800 DATA -0.900000000E-29,-0.900000000E-29
+ 3810 DATA -0.900001500E-29,-0.899998500E-29
+ 3812 DATA -0.900000000E-37,-0.900000000E-37
+ 3814 DATA -0.900001500E-37,-0.899998500E-37
+ 3815 DATA 0,0,0,0
+ 3816 DATA  0.900000000E-37, 0.900000000E-37
+ 3818 DATA  0.899998500E-37, 0.900001500E-37
+ 3820 DATA  0.900000000E-29, 0.900000000E-29
+ 3830 DATA  0.899998500E-29, 0.900001500E-29
+ 3840 DATA  0.900000000E-19, 0.900000000E-19
+ 3850 DATA  0.899998500E-19, 0.900001500E-19
+ 3860 DATA  0.900000000E-09, 0.900000000E-09
+ 3870 DATA  0.899998500E-09, 0.900001500E-09
+ 3880 DATA  0.900000000E-06, 0.900000000E-06
+ 3890 DATA  0.899998500E-06, 0.900001501E-06
+ 3900 DATA  0.900000000E-04, 0.900000002E-04
+ 3910 DATA  0.899998502E-04, 0.900001503E-04
+ 3920 DATA  0.345678000E-03, 0.345678014E-03
+ 3930 DATA  0.345676513E-03, 0.345679514E-03
+ 3940 DATA  0.987654000E-03, 0.987654321E-03
+ 3950 DATA  0.987652821E-03, 0.987655822E-03
+ 3960 DATA  0.345678000E-02, 0.345679377E-02
+ 3970 DATA  0.345677876E-02, 0.345680877E-02
+ 3980 DATA  0.987654000E-02, 0.987686115E-02
+ 3990 DATA  0.987684615E-02, 0.987687616E-02
+ 4000 DATA  0.123456000E-01, 0.123462273E-01
+ 4010 DATA  0.123460772E-01, 0.123463773E-01
+ 4020 DATA  0.234567000E-01, 0.234560030E-01
+ 4030 DATA  0.234608529E-01, 0.234611531E-01
+ 4040 DATA  0.767676000E-01, 0.769187603E-01
+ 4050 DATA  0.769186096E-01, 0.769189109E-01
+ 4060 DATA  0.232323000E+00, 0.236595054E+00
+ 4070 DATA  0.236593498E+00, 0.236596611E+00
+ 4080 DATA  0.876543000E+00, 0.120118397E+01
+ 4090 DATA  0.120117652E+01, 0.120119141E+01
+ 4100 DATA  0.100000000E+01, 0.155740772E+01
+ 4110 DATA  0.155736847E+01, 0.155744699E+01
+ 4120 DATA  0.123456000E+01, 0.286116592E+01
+ 4130 DATA  0.286106906E+01, 0.286126279E+01
+ 4140 DATA  0.157078000E+01, 0.612490085E+05
+ 4150 DATA  0.379840648E+05, 0.158058414E+06
+ 4160 DATA  0.157080000E+01,-0.272241808E+06
+ 4170 DATA  0.158057413E+06,-0.731356919E+05
+ 4180 DATA  0.157081000E+01,-0.731357419E+05
+ 4190 DATA -0.272242309E+06,-0.422418008E+05
+ 4200 DATA  0.161616000E+01,-0.422418008E+05
+ 4210 DATA -0.220338608E+02,-0.220240353E+02
+ 4220 DATA  0.200000000E+01,-0.218503986E+01
+ 4230 DATA -0.218510261E+01,-0.218497712E+01
+ 4240 DATA  0.287654000E+01,-0.271439087E+00
+ 4250 DATA -0.271450324E+00,-0.271427849E+00
+ 4260 DATA  0.314159000E+01,-0.265358979E-05
+ 4270 DATA -0.126536398E-04, 0.734641521E-05
+ 4280 DATA  0.400000000E+01, 0.115782128E+01
+ 4290 DATA  0.115779287E+01, 0.115784969E+01
+ 4300 DATA  0.456789000E+01, 0.687223055E+01
+ 4310 DATA  0.687174330E+01, 0.687271786E+01
+ 4320 DATA  0.471239000E+01,-0.980762049E+06
+ 4330 DATA  0.111353304E+06,-0.907472194E+05
+ 4340 DATA  0.555555000E+01,-0.890667992E+00
+ 4350 DATA -0.890686426E+00,-0.890649559E+00
+ 4360 DATA  0.987654000E+01, 0.485230117E+00
+ 4370 DATA  0.485217262E+00, 0.485242972E+00
+ 4380 DATA  0.987654000E+02, 0.506921050E+01
+ 4390 DATA  0.506653715E+01, 0.507188654E+01
+ 4400 DATA  0.987654000E+03, 0.253386806E+01
+ 4410 DATA  0.251909194E+01, 0.253386806E+01
+ 4420 DATA  0.987654000E+04,-0.724991905E+00
+ 4430 DATA -0.740360468E+00,-0.709844580E+00
+ 4440 DATA  0.987789000E+05, 0.138017476E+01
+ 4450 DATA  0.112416124E+01, 0.171848904E+01
+ 9000 DATA 999,0,0,0
+ 9400 END
+ 
', tests/integration.rs:37:13

---- P139 stdout ----
thread 'P139' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n160 DIM C(25)\n170 REM SET SIZE OF GROUP:\n180 LET T=4\n190 LET T1=1\n200 REM T1=T1\n210 FOR I=2 TO T\n220 LET T1=T1*I\n230 NEXT I\n240 REM SET #TRIALS\n250 LET N=10*T1\n260 FOR I=0 TO T1\n270 LET C(I)=0\n280 NEXT I\n290 FOR N1=1 TO N\n300 LET A=0\n310 LET K=1\n320 FOR I=1 TO T\n330 LET B(I)=RND\n340 NEXT I\n350 FOR R=T TO 1 STEP -1\n360 LET M1=-1\n370 REM FIND MAX OF REMAINDER OF THIS GROUP\n380 FOR I=1 TO R\n390 IF B(I)<M1 THEN 420\n400 LET M1=B(I)\n410 LET S=I\n420 NEXT I\n430 LET A=A+((S-1)*K)\n440 LET K=K*R\n450 LET B(S)=B(R)\n460 NEXT R\n470 REM VARIABLE A IS AN INTEGER, 0<=A<=T1, UNIQUELY SPECIFYING\n480 REM THE ORDERING OF THIS GROUP.\n490 LET C(A)=C(A)+1\n500 NEXT N1\n510 LET S=0\n520 PRINT\n530 PRINT \"ORDER ID\",\"ACTUAL COUNT\"\n540 PRINT \"(EXPECTED COUNT = 10 FOR ALL CASES.)\"\n550 PRINT\n560 FOR I=0 TO T1-1\n570 LET S=S+(C(I)*C(I)*T1)\n580 PRINT I,C(I)\n590 NEXT I\n600 LET V=(S/N) - N\n605 PRINT\n610 PRINT \"FOR 23 D.F., SHOULD HAVE 13.0905 <= CHI-SQ <= 35.1725\"\n620 PRINT \"(5% TAIL AT EACH END.)\"\n630 PRINT\n640 PRINT \"ACTUAL CHI-SQ = \";V\n650 PRINT\n660 IF V<13.0905 THEN 700\n670 IF V>35.1725 THEN 700\n680 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n690 GOTO 710\n700 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n710 PRINT\n720 PRINT \"                   END TEST\"\n730 PRINT\n740 PRINT \"END PROGRAM 139\"\n750 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 160 DIM C(25)
+ 170 REM SET SIZE OF GROUP:
+ 180 LET T=4
+ 190 LET T1=1
+ 200 REM T1=T1
+ 210 FOR I=2 TO T
+ 220 LET T1=T1*I
+ 230 NEXT I
+ 240 REM SET #TRIALS
+ 250 LET N=10*T1
+ 260 FOR I=0 TO T1
+ 270 LET C(I)=0
+ 280 NEXT I
+ 290 FOR N1=1 TO N
+ 300 LET A=0
+ 310 LET K=1
+ 320 FOR I=1 TO T
+ 330 LET B(I)=RND
+ 340 NEXT I
+ 350 FOR R=T TO 1 STEP -1
+ 360 LET M1=-1
+ 370 REM FIND MAX OF REMAINDER OF THIS GROUP
+ 380 FOR I=1 TO R
+ 390 IF B(I)<M1 THEN 420
+ 400 LET M1=B(I)
+ 410 LET S=I
+ 420 NEXT I
+ 430 LET A=A+((S-1)*K)
+ 440 LET K=K*R
+ 450 LET B(S)=B(R)
+ 460 NEXT R
+ 470 REM VARIABLE A IS AN INTEGER, 0<=A<=T1, UNIQUELY SPECIFYING
+ 480 REM THE ORDERING OF THIS GROUP.
+ 490 LET C(A)=C(A)+1
+ 500 NEXT N1
+ 510 LET S=0
+ 520 PRINT
+ 530 PRINT "ORDER ID","ACTUAL COUNT"
+ 540 PRINT "(EXPECTED COUNT = 10 FOR ALL CASES.)"
+ 550 PRINT
+ 560 FOR I=0 TO T1-1
+ 570 LET S=S+(C(I)*C(I)*T1)
+ 580 PRINT I,C(I)
+ 590 NEXT I
+ 600 LET V=(S/N) - N
+ 605 PRINT
+ 610 PRINT "FOR 23 D.F., SHOULD HAVE 13.0905 <= CHI-SQ <= 35.1725"
+ 620 PRINT "(5% TAIL AT EACH END.)"
+ 630 PRINT
+ 640 PRINT "ACTUAL CHI-SQ = ";V
+ 650 PRINT
+ 660 IF V<13.0905 THEN 700
+ 670 IF V>35.1725 THEN 700
+ 680 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 690 GOTO 710
+ 700 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 710 PRINT
+ 720 PRINT "                   END TEST"
+ 730 PRINT
+ 740 PRINT "END PROGRAM 139"
+ 750 END
+ 
', tests/integration.rs:37:13

---- P137 stdout ----
thread 'P137' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 DIM B(20)\n190 REM SET SIZE OF GROUPS\n200 LET K=5\n210 REM SET #TYPES\n220 LET D=7\n230 IF D>=K THEN 260\n240 PRINT \"ALGORITHM INVALID FOR D<K. PROGRAM TERMINATING.\"\n250 GOTO 820\n260 LET N=INT(5*(D^(K-1)))\n270 PRINT \"RUNNING \";N;\" TRIALS, SO THAT EACH POSSIBILITY HAS\"\n280 PRINT \"EXPECTED VALUE >= 5, AS NEEDED FOR CHI-SQUARE TEST.\"\n290 PRINT\n300 FOR I=1 TO K\n310 LET C(I)=0\n320 NEXT I\n330 FOR N1=1 TO N\n340 LET R=0\n350 REM MARK B-ARRAY AS NO TYPE S HIT SO FAR\n360 FOR I=1 TO D\n370 LET B(I)=0\n380 NEXT I\n390 FOR I=1 TO K\n400 LET J=INT(D*RND)+1\n410 IF B(J)=1 THEN 450\n420 REM GOT A NEW TYPE, MARK AND COUNT\n430 LET R=R+1\n440 LET B(J)=1\n450 NEXT I\n460 LET C(R)=C(R)+1\n470 NEXT N1\n480 LET S=0\n490 REM SET TOTAL #POSSIBILITIES\n500 LET D1=D^K\n510 PRINT \"#TYPES\",\"ACTUAL COUNT\",\"EXPECTED COUNT\"\n520 FOR I=1 TO K\n530 LET F=1\n540 FOR J=(D-I)+1 TO D\n550 LET F=F*J\n560 NEXT J\n570 LET R=I\n580 REM GET STIRLING NUMBER FOR K,R\n590 REM RESULT IN A9\n600 GOSUB 840\n610 REM F=PROB OF I DIFFERENT TYPES\n620 LET F=(F*A9)/D1\n630 PRINT I,C(I),F*N\n640 LET S=S+(C(I)*C(I))/F\n650 NEXT I\n660 LET V=(S/N) - N\n670 REM CHI-SQ FOR 4 D.F.\n680 PRINT\n690 PRINT \"FOR FOUR D.F., SHOULD HAVE .710721 <= CHI-SQ <= 9.48773\"\n700 PRINT \"(5% TAIL AT EACH END.)\"\n710 PRINT\n720 PRINT \"ACTUAL CHI-SQ = \";V\n730 PRINT\n740 IF V<.710721 THEN 780\n750 IF V>9.48773 THEN 780\n760 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n770 GOTO 790\n780 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n790 PRINT\n800 PRINT \"                   END TEST\"\n810 PRINT\n820 PRINT \"END PROGRAM 137\"\n830 STOP\n840 REM GIVEN K,R, WHAT IS STIRLING NUMBER?\n850 REM ANSWER RETURNED IN A9\n860 IF R>K THEN 910\n870 IF R=K THEN 930\n880 IF R=1 THEN 930\n890 IF R=0 THEN 910\n900 GOTO 950\n910 LET A9=0\n920 GOTO 1130\n930 LET A9=1\n940 GOTO 1130\n950 DIM A(20)\n960 REM THIS LIMITS RANGE OF ROUTINE TO R<=20 (K UNCONSTRAINED)\n970 FOR I8=1 TO 20\n980 LET A(I8)=1\n990 NEXT I8\n1000 LET K9=K-R\n1010 FOR K1=3 TO K\n1020 LET M1=R\n1030 IF R<K1-1 THEN 1050\n1040 LET M1=K1-1\n1050 LET M2=2\n1060 IF 2>K1-K9 THEN 1080\n1070 LET M2=K1-K9\n1080 FOR R1=M1 TO M2 STEP -1\n1090 LET A(R1)=R1*A(R1)+A(R1-1)\n1100 NEXT R1\n1110 NEXT K1\n1120 LET A9=A(R)\n1130 RETURN\n1140 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 DIM B(20)
+ 190 REM SET SIZE OF GROUPS
+ 200 LET K=5
+ 210 REM SET #TYPES
+ 220 LET D=7
+ 230 IF D>=K THEN 260
+ 240 PRINT "ALGORITHM INVALID FOR D<K. PROGRAM TERMINATING."
+ 250 GOTO 820
+ 260 LET N=INT(5*(D^(K-1)))
+ 270 PRINT "RUNNING ";N;" TRIALS, SO THAT EACH POSSIBILITY HAS"
+ 280 PRINT "EXPECTED VALUE >= 5, AS NEEDED FOR CHI-SQUARE TEST."
+ 290 PRINT
+ 300 FOR I=1 TO K
+ 310 LET C(I)=0
+ 320 NEXT I
+ 330 FOR N1=1 TO N
+ 340 LET R=0
+ 350 REM MARK B-ARRAY AS NO TYPE S HIT SO FAR
+ 360 FOR I=1 TO D
+ 370 LET B(I)=0
+ 380 NEXT I
+ 390 FOR I=1 TO K
+ 400 LET J=INT(D*RND)+1
+ 410 IF B(J)=1 THEN 450
+ 420 REM GOT A NEW TYPE, MARK AND COUNT
+ 430 LET R=R+1
+ 440 LET B(J)=1
+ 450 NEXT I
+ 460 LET C(R)=C(R)+1
+ 470 NEXT N1
+ 480 LET S=0
+ 490 REM SET TOTAL #POSSIBILITIES
+ 500 LET D1=D^K
+ 510 PRINT "#TYPES","ACTUAL COUNT","EXPECTED COUNT"
+ 520 FOR I=1 TO K
+ 530 LET F=1
+ 540 FOR J=(D-I)+1 TO D
+ 550 LET F=F*J
+ 560 NEXT J
+ 570 LET R=I
+ 580 REM GET STIRLING NUMBER FOR K,R
+ 590 REM RESULT IN A9
+ 600 GOSUB 840
+ 610 REM F=PROB OF I DIFFERENT TYPES
+ 620 LET F=(F*A9)/D1
+ 630 PRINT I,C(I),F*N
+ 640 LET S=S+(C(I)*C(I))/F
+ 650 NEXT I
+ 660 LET V=(S/N) - N
+ 670 REM CHI-SQ FOR 4 D.F.
+ 680 PRINT
+ 690 PRINT "FOR FOUR D.F., SHOULD HAVE .710721 <= CHI-SQ <= 9.48773"
+ 700 PRINT "(5% TAIL AT EACH END.)"
+ 710 PRINT
+ 720 PRINT "ACTUAL CHI-SQ = ";V
+ 730 PRINT
+ 740 IF V<.710721 THEN 780
+ 750 IF V>9.48773 THEN 780
+ 760 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 770 GOTO 790
+ 780 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 790 PRINT
+ 800 PRINT "                   END TEST"
+ 810 PRINT
+ 820 PRINT "END PROGRAM 137"
+ 830 STOP
+ 840 REM GIVEN K,R, WHAT IS STIRLING NUMBER?
+ 850 REM ANSWER RETURNED IN A9
+ 860 IF R>K THEN 910
+ 870 IF R=K THEN 930
+ 880 IF R=1 THEN 930
+ 890 IF R=0 THEN 910
+ 900 GOTO 950
+ 910 LET A9=0
+ 920 GOTO 1130
+ 930 LET A9=1
+ 940 GOTO 1130
+ 950 DIM A(20)
+ 960 REM THIS LIMITS RANGE OF ROUTINE TO R<=20 (K UNCONSTRAINED)
+ 970 FOR I8=1 TO 20
+ 980 LET A(I8)=1
+ 990 NEXT I8
+ 1000 LET K9=K-R
+ 1010 FOR K1=3 TO K
+ 1020 LET M1=R
+ 1030 IF R<K1-1 THEN 1050
+ 1040 LET M1=K1-1
+ 1050 LET M2=2
+ 1060 IF 2>K1-K9 THEN 1080
+ 1070 LET M2=K1-K9
+ 1080 FOR R1=M1 TO M2 STEP -1
+ 1090 LET A(R1)=R1*A(R1)+A(R1-1)
+ 1100 NEXT R1
+ 1110 NEXT K1
+ 1120 LET A9=A(R)
+ 1130 RETURN
+ 1140 END
+ 
', tests/integration.rs:37:13

---- P138 stdout ----
thread 'P138' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n170 DIM C(30)\n180 DIM O(20)\n190 REM SET #TRIALS\n200 LET N=2000\n210 REM SET #TYPES\n220 LET D=5\n230 REM SET MAX LENGTH\n240 LET T=25\n250 REM C-ARRAY COUNTS HOW MANY SEARCHES OF EACH LENGTH WERE DONE\n260 FOR I=1 TO T\n270 LET C(I)=0\n280 NEXT I\n290 FOR N1=1 TO N\n300 REM R COUNTS LENGTH OF SEARCH\n310 LET R=0\n320 REM Q COUNTS NUMBER OF DISTINCT TYPES SO FAR\n330 LET Q=0\n340 REM O-ARRAY KEEPS TRACK OF WHICH TYPES HAVE BEEN HIT SO FAR\n350 FOR I=0 TO D-1\n360 LET O(I)=0\n370 NEXT I\n380 LET R=R+1\n390 LET X=INT(RND*D)\n400 IF O(X)=1 THEN 380\n410 LET O(X)=1\n420 LET Q=Q+1\n430 IF Q<D THEN 380\n440 IF R<=T THEN 460\n450 LET R=T\n460 LET C(R)=C(R)+1\n470 NEXT N1\n480 LET D1=1\n490 FOR I=1 TO D\n500 LET D1=D1*I\n510 NEXT I\n520 LET S=0\n530 PRINT\n540 PRINT \"SEARCH LENGTH\",\"ACTUAL COUNT\",\"EXPECTED COUNT\"\n550 PRINT\n560 FOR I=D TO T-1\n570 LET K9=I-1\n580 LET R9=D-1\n590 REM GET STIRLING NUMBER FOR K9,R9 - RETURN RESULT IN A9\n600 GOSUB 890\n610 REM P=PROB OF SEARCH LENGTH I\n620 LET P=(D1*A9)/(D^I)\n630 PRINT I,C(I),N*P\n640 LET S=S+(C(I)*C(I))/P\n650 NEXT I\n660 LET K9=T-1\n670 LET R9=D\n680 REM STIRLING NUMBER\n690 GOSUB 890\n700 LET P=1-((D1*A9)/(D^(T-1)))\n710 PRINT \">=\";T,C(T),N*P\n720 LET S=S+(C(T)*C(T))/P\n730 LET V=(S/N) - N\n735 PRINT\n740 PRINT \"FOR 20 D.F., SHOULD HAVE 10.8508 <= CHI-SQ <= 31.4104\"\n750 PRINT \"(5% TAIL AT EACH END.)\"\n760 PRINT\n770 PRINT \"ACTUAL CHI-SQ = \";V\n780 PRINT\n790 IF V<10.8508 THEN 830\n800 IF V>31.4104 THEN 830\n810 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n820 GOTO 840\n830 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n840 PRINT\n850 PRINT \"                 END TEST\"\n860 PRINT\n870 PRINT \"END PROGRAM 138\"\n880 STOP\n890 REM GIVEN K9,R9, COMPUTE STIRLING NUMBER AND RETURN IN A9\n900 IF R9>K9 THEN 950\n910 IF R9=K9 THEN 970\n920 IF R9=1 THEN 970\n930 IF R9=0 THEN 950\n940 GOTO 990\n950 LET A9=0\n960 GOTO 1170\n970 LET A9=1\n980 GOTO 1170\n990 DIM A(20)\n1000 REM THIS LIMITS RANGE OF ROUTINE TO R9<=20 (K9 UNCONSTRAINED)\n1010 FOR I8=1 TO 20\n1020 LET A(I8)=1\n1030 NEXT I8\n1040 LET K8=K9-R9\n1050 FOR K1=3 TO K9\n1060 LET M1=R9\n1070 IF R9<K1-1 THEN 1090\n1080 LET M1=K1-1\n1090 LET M2=2\n1100 IF 2>K1-K8 THEN 1120\n1110 LET M2=K1-K8\n1120 FOR R1=M1 TO M2 STEP -1\n1130 LET A(R1)=R1*A(R1)+A(R1-1)\n1140 NEXT R1\n1150 NEXT K1\n1160 LET A9=A(R9)\n1170 RETURN\n1180 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 170 DIM C(30)
+ 180 DIM O(20)
+ 190 REM SET #TRIALS
+ 200 LET N=2000
+ 210 REM SET #TYPES
+ 220 LET D=5
+ 230 REM SET MAX LENGTH
+ 240 LET T=25
+ 250 REM C-ARRAY COUNTS HOW MANY SEARCHES OF EACH LENGTH WERE DONE
+ 260 FOR I=1 TO T
+ 270 LET C(I)=0
+ 280 NEXT I
+ 290 FOR N1=1 TO N
+ 300 REM R COUNTS LENGTH OF SEARCH
+ 310 LET R=0
+ 320 REM Q COUNTS NUMBER OF DISTINCT TYPES SO FAR
+ 330 LET Q=0
+ 340 REM O-ARRAY KEEPS TRACK OF WHICH TYPES HAVE BEEN HIT SO FAR
+ 350 FOR I=0 TO D-1
+ 360 LET O(I)=0
+ 370 NEXT I
+ 380 LET R=R+1
+ 390 LET X=INT(RND*D)
+ 400 IF O(X)=1 THEN 380
+ 410 LET O(X)=1
+ 420 LET Q=Q+1
+ 430 IF Q<D THEN 380
+ 440 IF R<=T THEN 460
+ 450 LET R=T
+ 460 LET C(R)=C(R)+1
+ 470 NEXT N1
+ 480 LET D1=1
+ 490 FOR I=1 TO D
+ 500 LET D1=D1*I
+ 510 NEXT I
+ 520 LET S=0
+ 530 PRINT
+ 540 PRINT "SEARCH LENGTH","ACTUAL COUNT","EXPECTED COUNT"
+ 550 PRINT
+ 560 FOR I=D TO T-1
+ 570 LET K9=I-1
+ 580 LET R9=D-1
+ 590 REM GET STIRLING NUMBER FOR K9,R9 - RETURN RESULT IN A9
+ 600 GOSUB 890
+ 610 REM P=PROB OF SEARCH LENGTH I
+ 620 LET P=(D1*A9)/(D^I)
+ 630 PRINT I,C(I),N*P
+ 640 LET S=S+(C(I)*C(I))/P
+ 650 NEXT I
+ 660 LET K9=T-1
+ 670 LET R9=D
+ 680 REM STIRLING NUMBER
+ 690 GOSUB 890
+ 700 LET P=1-((D1*A9)/(D^(T-1)))
+ 710 PRINT ">=";T,C(T),N*P
+ 720 LET S=S+(C(T)*C(T))/P
+ 730 LET V=(S/N) - N
+ 735 PRINT
+ 740 PRINT "FOR 20 D.F., SHOULD HAVE 10.8508 <= CHI-SQ <= 31.4104"
+ 750 PRINT "(5% TAIL AT EACH END.)"
+ 760 PRINT
+ 770 PRINT "ACTUAL CHI-SQ = ";V
+ 780 PRINT
+ 790 IF V<10.8508 THEN 830
+ 800 IF V>31.4104 THEN 830
+ 810 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 820 GOTO 840
+ 830 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 840 PRINT
+ 850 PRINT "                 END TEST"
+ 860 PRINT
+ 870 PRINT "END PROGRAM 138"
+ 880 STOP
+ 890 REM GIVEN K9,R9, COMPUTE STIRLING NUMBER AND RETURN IN A9
+ 900 IF R9>K9 THEN 950
+ 910 IF R9=K9 THEN 970
+ 920 IF R9=1 THEN 970
+ 930 IF R9=0 THEN 950
+ 940 GOTO 990
+ 950 LET A9=0
+ 960 GOTO 1170
+ 970 LET A9=1
+ 980 GOTO 1170
+ 990 DIM A(20)
+ 1000 REM THIS LIMITS RANGE OF ROUTINE TO R9<=20 (K9 UNCONSTRAINED)
+ 1010 FOR I8=1 TO 20
+ 1020 LET A(I8)=1
+ 1030 NEXT I8
+ 1040 LET K8=K9-R9
+ 1050 FOR K1=3 TO K9
+ 1060 LET M1=R9
+ 1070 IF R9<K1-1 THEN 1090
+ 1080 LET M1=K1-1
+ 1090 LET M2=2
+ 1100 IF 2>K1-K8 THEN 1120
+ 1110 LET M2=K1-K8
+ 1120 FOR R1=M1 TO M2 STEP -1
+ 1130 LET A(R1)=R1*A(R1)+A(R1-1)
+ 1140 NEXT R1
+ 1150 NEXT K1
+ 1160 LET A9=A(R9)
+ 1170 RETURN
+ 1180 END
+ 
', tests/integration.rs:37:13

---- P141 stdout ----
thread 'P141' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n170 DIM P(1000)\n180 REM SET SIZE OF GROUP\n190 LET T=3\n200 REM SET NUMBER OF TRIALS\n210 LET N=1000\n220 FOR I=1 TO N\n230 REM MARK AS EMPTY\n240 LET P(I)=3\n250 NEXT I\n260 FOR I=1 TO N\n270 LET M=0\n280 FOR J=1 TO T\n290 LET X=RND\n300 IF X<M THEN 320\n310 LET M=X\n320 NEXT J\n330 REM M IS MAX OF GROUP\n340 REM X1 IS BEST GUESS FOR LOCATION OF M, BASED ON\n350 REM EXPECTED DISTRIBUTION OF F(X) = M^T\n360 LET X1=INT((M^T)*N) + 1\n370 IF P(X1)<>3 THEN 420\n380 REM PRIMARY SLOT EMPTY - FILL IN WITH M\n390 LET P(X1)=M\n400 GOTO 550\n410 REM IF PRIMARY SLOT FILLED, SEARCH FOR NEAREST EMPTY SLOT\n420 FOR J=1 TO N\n430 IF X1-J<1 THEN 470\n440 IF P(X1-J)<>3 THEN 470\n450 LET P(X1-J)=M\n460 GOTO 550\n470 IF X1+J>N THEN 510\n480 IF P(X1+J)<>3 THEN 510\n490 LET P(X1+J)=M\n500 GOTO 550\n510 NEXT J\n520 PRINT \"RED ALERT - NO SLOT FOUND\",I,M\n530 PRINT \"ERROR IN SORT ALGORITHM - PROGRAM TERMINATES.\"\n540 GOTO 1050\n550 NEXT I\n560 REM BUBBLE-SORT TABLE VALUES\n570 LET B1=1\n580 LET B3=1\n590 REM A3=0 IMPLIES NO SWAPPING DONE YET\n600 LET A3=0\n610 FOR I=B1 TO N-B1 STEP B3\n620 IF P(I)<=P(I+1) THEN 670\n630 LET W=P(I)\n640 LET P(I)=P(I+1)\n650 LET P(I+1)=W\n660 LET A3=3\n670 NEXT I\n680 REM B1 AND B3 CAUSE THE BUBBLE-SORT TO ALTERNATELY SCAN THE ARRAY\n690 REM FORWARDS AND BACKWARDS\n700 LET B1=N-B1\n710 LET B3=-B3\n720 IF A3<>0 THEN 600\n730 LET M1=-1E38\n740 LET M2=-1E38\n750 REM FIND K+ AND K- ON PRIMARY DATA\n760 FOR I=1 TO N\n770 LET P1=P(I)^T\n780 LET N1=(I/N) - P1\n790 LET N2=P1 - ((I-1)/N)\n800 IF N1<M1 THEN 820\n810 LET M1=N1\n820 IF N2<M2 THEN 840\n830 LET M2=N2\n840 NEXT I\n850 LET N5=SQR(N)\n860 LET M1=M1*N5\n870 LET M2=M2*N5\n880 PRINT\n890 REM EXPECTED DISTRIBUTION FOR K+ AND K- WHEN N IS LARGE.\n900 LET P1=1 - (EXP(-2*M1*M1))\n910 LET P2=1 - (EXP(-2*M2*M2))\n920 PRINT \"    K+ = \";M1,\"   PERCENTILE FOR K+ = \";P1\n930 PRINT \"    K- = \";M2,\"   PERCENTILE FOR K- = \";P2\n940 PRINT\n950 PRINT \"PERCENTILES SHOULD BE BETWEEN .05 AND .95\"\n960 PRINT\n970 IF P1<.05 THEN 1030\n980 IF P1>.95 THEN 1030\n990 IF P2<.05 THEN 1030\n1000 IF P2>.95 THEN 1030\n1010 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n1020 GOTO 1040\n1030 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n1040 PRINT\n1050 PRINT \"                END TEST\"\n1060 PRINT\n1070 PRINT \"END PROGRAM 141\"\n1080 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 170 DIM P(1000)
+ 180 REM SET SIZE OF GROUP
+ 190 LET T=3
+ 200 REM SET NUMBER OF TRIALS
+ 210 LET N=1000
+ 220 FOR I=1 TO N
+ 230 REM MARK AS EMPTY
+ 240 LET P(I)=3
+ 250 NEXT I
+ 260 FOR I=1 TO N
+ 270 LET M=0
+ 280 FOR J=1 TO T
+ 290 LET X=RND
+ 300 IF X<M THEN 320
+ 310 LET M=X
+ 320 NEXT J
+ 330 REM M IS MAX OF GROUP
+ 340 REM X1 IS BEST GUESS FOR LOCATION OF M, BASED ON
+ 350 REM EXPECTED DISTRIBUTION OF F(X) = M^T
+ 360 LET X1=INT((M^T)*N) + 1
+ 370 IF P(X1)<>3 THEN 420
+ 380 REM PRIMARY SLOT EMPTY - FILL IN WITH M
+ 390 LET P(X1)=M
+ 400 GOTO 550
+ 410 REM IF PRIMARY SLOT FILLED, SEARCH FOR NEAREST EMPTY SLOT
+ 420 FOR J=1 TO N
+ 430 IF X1-J<1 THEN 470
+ 440 IF P(X1-J)<>3 THEN 470
+ 450 LET P(X1-J)=M
+ 460 GOTO 550
+ 470 IF X1+J>N THEN 510
+ 480 IF P(X1+J)<>3 THEN 510
+ 490 LET P(X1+J)=M
+ 500 GOTO 550
+ 510 NEXT J
+ 520 PRINT "RED ALERT - NO SLOT FOUND",I,M
+ 530 PRINT "ERROR IN SORT ALGORITHM - PROGRAM TERMINATES."
+ 540 GOTO 1050
+ 550 NEXT I
+ 560 REM BUBBLE-SORT TABLE VALUES
+ 570 LET B1=1
+ 580 LET B3=1
+ 590 REM A3=0 IMPLIES NO SWAPPING DONE YET
+ 600 LET A3=0
+ 610 FOR I=B1 TO N-B1 STEP B3
+ 620 IF P(I)<=P(I+1) THEN 670
+ 630 LET W=P(I)
+ 640 LET P(I)=P(I+1)
+ 650 LET P(I+1)=W
+ 660 LET A3=3
+ 670 NEXT I
+ 680 REM B1 AND B3 CAUSE THE BUBBLE-SORT TO ALTERNATELY SCAN THE ARRAY
+ 690 REM FORWARDS AND BACKWARDS
+ 700 LET B1=N-B1
+ 710 LET B3=-B3
+ 720 IF A3<>0 THEN 600
+ 730 LET M1=-1E38
+ 740 LET M2=-1E38
+ 750 REM FIND K+ AND K- ON PRIMARY DATA
+ 760 FOR I=1 TO N
+ 770 LET P1=P(I)^T
+ 780 LET N1=(I/N) - P1
+ 790 LET N2=P1 - ((I-1)/N)
+ 800 IF N1<M1 THEN 820
+ 810 LET M1=N1
+ 820 IF N2<M2 THEN 840
+ 830 LET M2=N2
+ 840 NEXT I
+ 850 LET N5=SQR(N)
+ 860 LET M1=M1*N5
+ 870 LET M2=M2*N5
+ 880 PRINT
+ 890 REM EXPECTED DISTRIBUTION FOR K+ AND K- WHEN N IS LARGE.
+ 900 LET P1=1 - (EXP(-2*M1*M1))
+ 910 LET P2=1 - (EXP(-2*M2*M2))
+ 920 PRINT "    K+ = ";M1,"   PERCENTILE FOR K+ = ";P1
+ 930 PRINT "    K- = ";M2,"   PERCENTILE FOR K- = ";P2
+ 940 PRINT
+ 950 PRINT "PERCENTILES SHOULD BE BETWEEN .05 AND .95"
+ 960 PRINT
+ 970 IF P1<.05 THEN 1030
+ 980 IF P1>.95 THEN 1030
+ 990 IF P2<.05 THEN 1030
+ 1000 IF P2>.95 THEN 1030
+ 1010 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 1020 GOTO 1040
+ 1030 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 1040 PRINT
+ 1050 PRINT "                END TEST"
+ 1060 PRINT
+ 1070 PRINT "END PROGRAM 141"
+ 1080 END
+ 
', tests/integration.rs:37:13

---- P142 stdout ----
thread 'P142' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n180 LET Y=RND\n190 LET S1=Y\n200 LET S2=Y*Y\n210 LET S3=0\n220 LET Z=Y\n230 REM IN LOOP, X IS CURRENT RND, Y IS PREVIOUS RND.\n240 FOR N1=1 TO N\n250 LET X=RND\n260 LET S1=S1+X\n270 LET S2=S2+(X*X)\n280 LET S3=S3+(X*Y)\n290 LET Y=X\n300 NEXT N1\n310 LET S3=S3+(X*Z)\n320 LET S4=S1*S1\n330 LET C=((N*S3) - S4) / ((N*S2) - S4)\n340 LET U=1/(1-N)\n350 LET D=SQR((N*(N-3)) / (N+1)) / (N-1)\n360 LET D=D+D\n370 PRINT \"WITH ABOUT 95% PROBABILITY, WE EXPECT CORRELATION TO\"\n380 PRINT \"EQUAL \";U;\" + OR - \";D\n390 PRINT\n400 PRINT \"THAT IS, WE EXPECT \";U-D;\" <= CORRELATION <= \";U+D\n410 PRINT\n420 PRINT \"ACTUAL CORRELATION = \";C\n430 LET E1=ABS(C-U)\n440 PRINT\n450 IF E1<=D THEN 480\n460 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n470 GOTO 490\n480 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n490 PRINT\n500 PRINT \"                  END TEST\"\n510 PRINT\n520 PRINT \"END PROGRAM 142\"\n530 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 180 LET Y=RND
+ 190 LET S1=Y
+ 200 LET S2=Y*Y
+ 210 LET S3=0
+ 220 LET Z=Y
+ 230 REM IN LOOP, X IS CURRENT RND, Y IS PREVIOUS RND.
+ 240 FOR N1=1 TO N
+ 250 LET X=RND
+ 260 LET S1=S1+X
+ 270 LET S2=S2+(X*X)
+ 280 LET S3=S3+(X*Y)
+ 290 LET Y=X
+ 300 NEXT N1
+ 310 LET S3=S3+(X*Z)
+ 320 LET S4=S1*S1
+ 330 LET C=((N*S3) - S4) / ((N*S2) - S4)
+ 340 LET U=1/(1-N)
+ 350 LET D=SQR((N*(N-3)) / (N+1)) / (N-1)
+ 360 LET D=D+D
+ 370 PRINT "WITH ABOUT 95% PROBABILITY, WE EXPECT CORRELATION TO"
+ 380 PRINT "EQUAL ";U;" + OR - ";D
+ 390 PRINT
+ 400 PRINT "THAT IS, WE EXPECT ";U-D;" <= CORRELATION <= ";U+D
+ 410 PRINT
+ 420 PRINT "ACTUAL CORRELATION = ";C
+ 430 LET E1=ABS(C-U)
+ 440 PRINT
+ 450 IF E1<=D THEN 480
+ 460 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 470 GOTO 490
+ 480 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 490 PRINT
+ 500 PRINT "                  END TEST"
+ 510 PRINT
+ 520 PRINT "END PROGRAM 142"
+ 530 END
+ 
', tests/integration.rs:37:13

---- P140 stdout ----
thread 'P140' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 FOR I=1 TO T\n220 LET C(I)=0\n230 NEXT I\n240 LET Y=RND\n250 REM GATHER STATS ON N TRIALS\n260 LET N1=1\n270 REM COUNT LENGTH OF NEW RUN\n280 LET K=1\n290 LET X=RND\n300 LET N1=N1+1\n310 IF N1>N THEN 390\n320 REM TO TEST RUNS DOWN, SIMPLY CHANGE \"<\" TO \">\" IN NEXT LINE\n330 IF X<Y THEN 390\n340 REM RUN CONTINUES\n350 LET K=K+1\n360 LET Y=X\n370 GOTO 290\n380 REM END OF THIS RUN\n390 LET Y=X\n400 IF K<=T THEN 420\n410 LET K=T\n420 LET C(K)=C(K)+1\n430 IF N1<=N THEN 280\n440 PRINT \"RUN LENGTH\",\"ACTUAL COUNT\",\"EXPECTED COUNT\"\n450 REM INITIALIZE FOR CALCULATION\n460 REM CHI-SQUARE NOT COMPUTED SIMILARLY TO OTHER TESTS\n470 FOR I=1 TO T\n480 REM READ B-ARRAY VALUES\n490 READ F\n500 LET W(I)=C(I) - N*F\n510 IF I<T THEN 530\n520 PRINT \">=\";\n530 PRINT I,C(I),N*F\n540 NEXT I\n550 LET S=0\n560 REM COMPUTE MATRIX SUM\n570 FOR I=1 TO T\n580 FOR J=1 TO T\n590 REM READ A-MATRIX VALUES\n600 READ F\n610 LET S=S+(W(I)*W(J)*F)\n620 NEXT J\n630 NEXT I\n640 LET V=S/N\n650 PRINT\n660 PRINT \"FOR 6 D.F., SHOULD HAVE 1.63539 <= CHI-SQ <= 12.5916\"\n670 PRINT \"(5% TAIL ON EACH END.)\"\n680 PRINT\n690 PRINT \"ACTUAL CHI-SQ = \";V\n700 REM V SHOULD BE DISTRIBUTED AS CHI-SQ WITH 6 D.F\n710 PRINT\n720 IF V<1.63539 THEN 760\n730 IF V>12.5916 THEN 760\n740 PRINT \"*** INFORMATIVE TEST PASSED ***\"\n750 GOTO 770\n760 PRINT \"*** INFORMATIVE TEST FAILED ***\"\n770 PRINT\n780 PRINT \"                 END TEST\"\n790 PRINT\n800 PRINT \"END PROGRAM 140\"\n810 REM DATA FOR B-ARRAY:\n820 DATA .166667,.208333,9.16667E-2,2.63889E-2,5.75397E-3,1.19048E-3\n830 REM DATA FOR (CONCEPTUAL) A-MATRIX:\n840 DATA 4529.4, 9044.9, 13568, 18091, 22615, 27892\n850 DATA 9044.9, 18097,  27139, 36187, 45234, 55789\n860 DATA 13568,  27139,  40721, 54281, 67852, 83685\n870 DATA 18091,  36187,  54281, 72414, 90470, 111580\n880 DATA 22615,  45234,  67852, 90470, 113262,139476\n890 DATA 27892,  55789,  83685, 111580,139476,172860\n900 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 FOR I=1 TO T
+ 220 LET C(I)=0
+ 230 NEXT I
+ 240 LET Y=RND
+ 250 REM GATHER STATS ON N TRIALS
+ 260 LET N1=1
+ 270 REM COUNT LENGTH OF NEW RUN
+ 280 LET K=1
+ 290 LET X=RND
+ 300 LET N1=N1+1
+ 310 IF N1>N THEN 390
+ 320 REM TO TEST RUNS DOWN, SIMPLY CHANGE "<" TO ">" IN NEXT LINE
+ 330 IF X<Y THEN 390
+ 340 REM RUN CONTINUES
+ 350 LET K=K+1
+ 360 LET Y=X
+ 370 GOTO 290
+ 380 REM END OF THIS RUN
+ 390 LET Y=X
+ 400 IF K<=T THEN 420
+ 410 LET K=T
+ 420 LET C(K)=C(K)+1
+ 430 IF N1<=N THEN 280
+ 440 PRINT "RUN LENGTH","ACTUAL COUNT","EXPECTED COUNT"
+ 450 REM INITIALIZE FOR CALCULATION
+ 460 REM CHI-SQUARE NOT COMPUTED SIMILARLY TO OTHER TESTS
+ 470 FOR I=1 TO T
+ 480 REM READ B-ARRAY VALUES
+ 490 READ F
+ 500 LET W(I)=C(I) - N*F
+ 510 IF I<T THEN 530
+ 520 PRINT ">=";
+ 530 PRINT I,C(I),N*F
+ 540 NEXT I
+ 550 LET S=0
+ 560 REM COMPUTE MATRIX SUM
+ 570 FOR I=1 TO T
+ 580 FOR J=1 TO T
+ 590 REM READ A-MATRIX VALUES
+ 600 READ F
+ 610 LET S=S+(W(I)*W(J)*F)
+ 620 NEXT J
+ 630 NEXT I
+ 640 LET V=S/N
+ 650 PRINT
+ 660 PRINT "FOR 6 D.F., SHOULD HAVE 1.63539 <= CHI-SQ <= 12.5916"
+ 670 PRINT "(5% TAIL ON EACH END.)"
+ 680 PRINT
+ 690 PRINT "ACTUAL CHI-SQ = ";V
+ 700 REM V SHOULD BE DISTRIBUTED AS CHI-SQ WITH 6 D.F
+ 710 PRINT
+ 720 IF V<1.63539 THEN 760
+ 730 IF V>12.5916 THEN 760
+ 740 PRINT "*** INFORMATIVE TEST PASSED ***"
+ 750 GOTO 770
+ 760 PRINT "*** INFORMATIVE TEST FAILED ***"
+ 770 PRINT
+ 780 PRINT "                 END TEST"
+ 790 PRINT
+ 800 PRINT "END PROGRAM 140"
+ 810 REM DATA FOR B-ARRAY:
+ 820 DATA .166667,.208333,9.16667E-2,2.63889E-2,5.75397E-3,1.19048E-3
+ 830 REM DATA FOR (CONCEPTUAL) A-MATRIX:
+ 840 DATA 4529.4, 9044.9, 13568, 18091, 22615, 27892
+ 850 DATA 9044.9, 18097,  27139, 36187, 45234, 55789
+ 860 DATA 13568,  27139,  40721, 54281, 67852, 83685
+ 870 DATA 18091,  36187,  54281, 72414, 90470, 111580
+ 880 DATA 22615,  45234,  67852, 90470, 113262,139476
+ 890 DATA 27892,  55789,  83685, 111580,139476,172860
+ 900 END
+ 
', tests/integration.rs:37:13

---- P144 stdout ----
thread 'P144' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=ATN(1,1)\n260 PRINT \"PROCESSOR HAS EVALUATED ATN(1,1) = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 144\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A=ATN(1,1)\n            ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=ATN(1,1)
+ 260 PRINT "PROCESSOR HAS EVALUATED ATN(1,1) = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 144"
+ 310 END
- 250: error: syntax error 
-  LET A=ATN(1,1)
-             ^
', tests/integration.rs:37:13

---- P143 stdout ----
thread 'P143' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=SIN(1,1)\n260 PRINT \"PROCESSOR HAS EVALUATED SIN(1,1) = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 143\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A=SIN(1,1)\n            ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=SIN(1,1)
+ 260 PRINT "PROCESSOR HAS EVALUATED SIN(1,1) = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 143"
+ 310 END
- 250: error: syntax error 
-  LET A=SIN(1,1)
-             ^
', tests/integration.rs:37:13

---- P145 stdout ----
thread 'P145' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=RND(1,1)\n260 PRINT \"PROCESSOR HAS EVALUATED RND(1,1) = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 145\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A=RND(1,1)\n            ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=RND(1,1)
+ 260 PRINT "PROCESSOR HAS EVALUATED RND(1,1) = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 145"
+ 310 END
- 250: error: syntax error 
-  LET A=RND(1,1)
-             ^
', tests/integration.rs:37:13

---- P148 stdout ----
thread 'P148' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=TAN\n260 PRINT \"PROCESSOR HAS EVALUATED TAN = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 148\"\n310 END\n"`,
 right: `"250: error: invalid number of arguments for function TAN\n LET A=TAN\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=TAN
+ 260 PRINT "PROCESSOR HAS EVALUATED TAN = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 148"
+ 310 END
- 250: error: invalid number of arguments for function TAN
-  LET A=TAN
-        ^
', tests/integration.rs:37:13

---- P146 stdout ----
thread 'P146' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=RND(0)\n260 PRINT \"PROCESSOR HAS EVALUATED RND(0) = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 146\"\n310 END\n"`,
 right: `"250: error: invalid number of arguments for function RND\n LET A=RND(0)\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=RND(0)
+ 260 PRINT "PROCESSOR HAS EVALUATED RND(0) = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 146"
+ 310 END
- 250: error: invalid number of arguments for function RND
-  LET A=RND(0)
-        ^
', tests/integration.rs:37:13

---- P147 stdout ----
thread 'P147' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=INT()\n260 PRINT \"PROCESSOR HAS EVALUATED INT() = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 147\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A=INT()\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=INT()
+ 260 PRINT "PROCESSOR HAS EVALUATED INT() = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 147"
+ 310 END
- 250: error: syntax error 
-  LET A=INT()
-            ^
', tests/integration.rs:37:13

---- P150 stdout ----
thread 'P150' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n340 LET A=ATN(X$)\n350 PRINT \"PROCESSOR HAS EVALUATED ATN(X$) = \";A\n360 PRINT\n370 PRINT \"              END TEST\"\n380 PRINT\n390 PRINT \"END PROGRAM 150\"\n400 END\n"`,
 right: `"340: error: numeric expression expected \n LET A=ATN(X$)\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 340 LET A=ATN(X$)
+ 350 PRINT "PROCESSOR HAS EVALUATED ATN(X$) = ";A
+ 360 PRINT
+ 370 PRINT "              END TEST"
+ 380 PRINT
+ 390 PRINT "END PROGRAM 150"
+ 400 END
- 340: error: numeric expression expected 
-  LET A=ATN(X$)
-            ^
', tests/integration.rs:37:13

---- P151 stdout ----
thread 'P151' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n120 DEF FNA(X)=X*X\n130 DEF FNB(Y)=Y*Y*Y\n140 LET A=5\n150 LET B=4\n160 LET C=3\n170 LET E=0\n180 LET X=FNA(12)\n190 LET Y=FNA(A)\n200 LET Z=FNA(2*A^3+4*B+C)\n210 LET W=FNA(FNB(2)+B^3)\n220 LET F=1\n230 IF X=144 THEN 250\n240 GOSUB 350\n250 LET F=2\n260 IF Y=25 THEN 280\n270 GOSUB 350\n280 LET F=3\n285 LET C9=Z-72361\n290 IF ABS(C9) < .1 THEN 310\n300 GOSUB 350\n310 LET F=4\n315 LET C9=W-5184\n320 IF ABS(C9) < .1 THEN 490\n330 GOSUB 350\n340 GOTO 490\n350 REM SUBROUTINE TO PRINT ERROR MESSAGE\n355 LET E=1\n357 LET B$=\"\"\n360 ON F GOTO 370,390,410,430\n370 LET A$=\"A CONSTANT\"\n380 GOTO 440\n390 LET A$=\"A VARIABLE\"\n400 GOTO 440\n410 LET A$=\"CONSTANTS AND\"\n415 LET B$=\" VARIABLES\"\n420 GOTO 440\n430 LET A$=\"ANOTHER FUNCTION\"\n440 PRINT \"FUNCTION FAILED TO EXECUTE PROPERLY WHEN THE EXPRESSION\"\n450 PRINT \"IN THE ARGUMENT-LIST FOR THE FUNCTION REFERENCE USED\"\n460 PRINT A$;B$;\".\"\n470 PRINT\n480 RETURN\n490 IF E=0 THEN 520\n500 PRINT \"*** TEST FAILED. NOTE THE ABOVE REASONS  ***\"\n510 GOTO 530\n520 PRINT \"***  TEST PASSED  ***\"\n530 PRINT\n540 PRINT \"                                END TEST.\"\n550 PRINT\n560 PRINT \"SECTION 151.2: THE EXPRESSION IN THE DEFINITION USING THE\"\n570 PRINT \"        PARAMETER OF THE PARAMETER-LIST AND OTHER VARIABLES.\"\n590 PRINT\n600 PRINT \"                               BEGIN TEST.\"\n610 PRINT\n620 DEF FNC(A)=A*A-B+C\n630 LET B=-15\n640 LET C=-35\n650 LET X=FNC(13)\n660 IF X=149 THEN 690\n670 PRINT \"***  TEST FAILED  ***\"\n680 GOTO 700\n690 PRINT \"***  TEST PASSED  ***\"\n700 PRINT\n710 PRINT \"                                END TEST.\"\n720 PRINT\n730 PRINT \"SECTION 151.3: THE EXPRESSION IN THE DEFINITION USING THE\"\n740 PRINT \"        PARAMETER OF THE PARAMETER-LIST AND CONSTANTS.\"\n760 PRINT\n770 PRINT \"                              BEGIN TEST.\"\n780 PRINT\n790 DEF FND(Y)=Y^4-16\n800 LET A=4\n810 LET B=2\n820 LET Y=FND(A^3-3*A^2*B+3*A*B^2-B^3)\n825 LET C9=Y-4080\n830 IF ABS(C9) < .1 THEN 860\n840 PRINT \"***  TEST FAILED  ***\"\n850 GOTO 870\n860 PRINT \"***  TEST PASSED  ***\"\n870 PRINT\n880 PRINT \"                                END TEST.\"\n890 PRINT\n900 PRINT \"SECTION 151.4: THE EXPRESSION IN THE DEFINITION USING THE\"\n910 PRINT \"        PARAMETER OF THE PARAMETER-LIST AND A REFERENCE\"\n920 PRINT \"        TO ANOTHER FUNCTION.\"\n930 PRINT\n940 PRINT \"                               BEGIN TEST.\"\n950 PRINT\n960 DEF FNE(Z)=Z^2-4\n970 DEF FNF(Z)=Z*X+FNE(A^2+B)\n980 LET A=9\n990 LET B=19\n1000 LET X=3\n1010 LET Y=2\n1020 LET Z=FNF(X^3-3*X^2*Y+3*X*Y^2-Y^3)\n1025 LET C9=Z-9999\n1030 IF ABS(C9) < .1 THEN 1060\n1040 PRINT \"***  TEST FAILED  ***\"\n1050 GOTO 1070\n1060 PRINT \"***  TEST PASSED  ***\"\n1070 PRINT\n1080 PRINT \"                                END TEST.\"\n1090 PRINT\n1100 PRINT \"SECTION 151.5: THE EXPRESSION IN THE DEFINITION HAS A\"\n1110 PRINT \"        CONSTANT VALUE.\"\n1120 PRINT\n1130 PRINT \"                               BEGIN TEST.\"\n1140 PRINT\n1150 DEF FNM=123\n1160 DEF FNN(D)=3*37\n1170 LET A=FNM\n1180 LET B=FNN(FNM+A)\n1190 IF A<>123 THEN 1300\n1200 IF B<>111 THEN 1300\n1210 PRINT \"***  TEST PASSED  ***\"\n1220 GOTO 1310\n1300 PRINT \"***  TEST FAILED  ***\"\n1310 PRINT\n1320 PRINT \"                                END TEST.\"\n1330 PRINT\n1500 PRINT \"SECTION 151.6: THE PARAMETER OF A USER-DEFINED\"\n1510 PRINT \"        FUNCTION IS LOCAL TO THE EXPRESSION OF THE\"\n1520 PRINT \"        DEFINITION AND OTHER VARIABLES ARE GLOBAL.\"\n1530 PRINT\n1540 PRINT \"                               BEGIN TEST.\"\n1550 PRINT\n1560 LET X=1\n1570 LET Y=2\n1580 LET Z=3\n1590 LET P1=-100\n1600 LET Q1=-100\n1610 DEF FNG(P1)=3+P1+X\n1620 DEF FNH(P1)=7+X+Y+P1+FNG(30.E-1+P1)+FNG(P1)+FNG(Y)\n1630 LET X=4\n1640 LET Y=5\n1650 LET Z=6\n1660 LET P1=7\n1670 LET Q1=8\n1680 DEF FNI(Q1)=Z+Q1*10.\n1690 LET A=FNH(Q1+3)+FNG(10)+FNI(Q1+4)\n1700 IF X<>4 THEN 1790\n1710 IF Y<>5 THEN 1790\n1720 IF Z<>6 THEN 1790\n1730 IF P1<>7 THEN 1790\n1740 IF Q1<>8 THEN 1790\n1750 LET C=221-A\n1760 IF ABS(C)>.01 THEN 1790\n1770 PRINT \"***  TEST PASSED  ***\"\n1780 GOTO 1800\n1790 PRINT \"***  TEST FAILED  ***\"\n1800 PRINT\n1810 PRINT \"                                END TEST.\"\n1820 PRINT\n1830 PRINT \"SECTION 151.7: FULL GENERAL USE OF USER-DEFINED FUNCTIONS\"\n1840 PRINT \"        IN NUMERIC EXPRESSIONS.\"\n1850 PRINT\n1860 PRINT \"                               BEGIN TEST.\"\n1870 PRINT\n1880 DEF FNT=3\n1890 DEF FNU(D)=100\n1900 LET X=4\n1910 LET Y=5\n1920 LET Z=6\n1930 LET Q1=8\n1940 LET A=FNI(FNT)\n1950 LET A=A/(FNG(FNH(Q1+FNT)/(FNI(Q1+4)-FNU(1E38))+FNG(FNG(-10)))-2)\n1960 LET C9=A-3\n1970 IF ABS(C9) < .01 THEN 2000\n1980 PRINT \"***  TEST FAILED  ***\"\n1990 GOTO 2010\n2000 PRINT \"***  TEST PASSED  ***\"\n2010 PRINT\n2020 PRINT \"                                 END TEST.\"\n2030 PRINT\n2040 PRINT \"END PROGRAM 151.\"\n2050 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 120 DEF FNA(X)=X*X
+ 130 DEF FNB(Y)=Y*Y*Y
+ 140 LET A=5
+ 150 LET B=4
+ 160 LET C=3
+ 170 LET E=0
+ 180 LET X=FNA(12)
+ 190 LET Y=FNA(A)
+ 200 LET Z=FNA(2*A^3+4*B+C)
+ 210 LET W=FNA(FNB(2)+B^3)
+ 220 LET F=1
+ 230 IF X=144 THEN 250
+ 240 GOSUB 350
+ 250 LET F=2
+ 260 IF Y=25 THEN 280
+ 270 GOSUB 350
+ 280 LET F=3
+ 285 LET C9=Z-72361
+ 290 IF ABS(C9) < .1 THEN 310
+ 300 GOSUB 350
+ 310 LET F=4
+ 315 LET C9=W-5184
+ 320 IF ABS(C9) < .1 THEN 490
+ 330 GOSUB 350
+ 340 GOTO 490
+ 350 REM SUBROUTINE TO PRINT ERROR MESSAGE
+ 355 LET E=1
+ 357 LET B$=""
+ 360 ON F GOTO 370,390,410,430
+ 370 LET A$="A CONSTANT"
+ 380 GOTO 440
+ 390 LET A$="A VARIABLE"
+ 400 GOTO 440
+ 410 LET A$="CONSTANTS AND"
+ 415 LET B$=" VARIABLES"
+ 420 GOTO 440
+ 430 LET A$="ANOTHER FUNCTION"
+ 440 PRINT "FUNCTION FAILED TO EXECUTE PROPERLY WHEN THE EXPRESSION"
+ 450 PRINT "IN THE ARGUMENT-LIST FOR THE FUNCTION REFERENCE USED"
+ 460 PRINT A$;B$;"."
+ 470 PRINT
+ 480 RETURN
+ 490 IF E=0 THEN 520
+ 500 PRINT "*** TEST FAILED. NOTE THE ABOVE REASONS  ***"
+ 510 GOTO 530
+ 520 PRINT "***  TEST PASSED  ***"
+ 530 PRINT
+ 540 PRINT "                                END TEST."
+ 550 PRINT
+ 560 PRINT "SECTION 151.2: THE EXPRESSION IN THE DEFINITION USING THE"
+ 570 PRINT "        PARAMETER OF THE PARAMETER-LIST AND OTHER VARIABLES."
+ 590 PRINT
+ 600 PRINT "                               BEGIN TEST."
+ 610 PRINT
+ 620 DEF FNC(A)=A*A-B+C
+ 630 LET B=-15
+ 640 LET C=-35
+ 650 LET X=FNC(13)
+ 660 IF X=149 THEN 690
+ 670 PRINT "***  TEST FAILED  ***"
+ 680 GOTO 700
+ 690 PRINT "***  TEST PASSED  ***"
+ 700 PRINT
+ 710 PRINT "                                END TEST."
+ 720 PRINT
+ 730 PRINT "SECTION 151.3: THE EXPRESSION IN THE DEFINITION USING THE"
+ 740 PRINT "        PARAMETER OF THE PARAMETER-LIST AND CONSTANTS."
+ 760 PRINT
+ 770 PRINT "                              BEGIN TEST."
+ 780 PRINT
+ 790 DEF FND(Y)=Y^4-16
+ 800 LET A=4
+ 810 LET B=2
+ 820 LET Y=FND(A^3-3*A^2*B+3*A*B^2-B^3)
+ 825 LET C9=Y-4080
+ 830 IF ABS(C9) < .1 THEN 860
+ 840 PRINT "***  TEST FAILED  ***"
+ 850 GOTO 870
+ 860 PRINT "***  TEST PASSED  ***"
+ 870 PRINT
+ 880 PRINT "                                END TEST."
+ 890 PRINT
+ 900 PRINT "SECTION 151.4: THE EXPRESSION IN THE DEFINITION USING THE"
+ 910 PRINT "        PARAMETER OF THE PARAMETER-LIST AND A REFERENCE"
+ 920 PRINT "        TO ANOTHER FUNCTION."
+ 930 PRINT
+ 940 PRINT "                               BEGIN TEST."
+ 950 PRINT
+ 960 DEF FNE(Z)=Z^2-4
+ 970 DEF FNF(Z)=Z*X+FNE(A^2+B)
+ 980 LET A=9
+ 990 LET B=19
+ 1000 LET X=3
+ 1010 LET Y=2
+ 1020 LET Z=FNF(X^3-3*X^2*Y+3*X*Y^2-Y^3)
+ 1025 LET C9=Z-9999
+ 1030 IF ABS(C9) < .1 THEN 1060
+ 1040 PRINT "***  TEST FAILED  ***"
+ 1050 GOTO 1070
+ 1060 PRINT "***  TEST PASSED  ***"
+ 1070 PRINT
+ 1080 PRINT "                                END TEST."
+ 1090 PRINT
+ 1100 PRINT "SECTION 151.5: THE EXPRESSION IN THE DEFINITION HAS A"
+ 1110 PRINT "        CONSTANT VALUE."
+ 1120 PRINT
+ 1130 PRINT "                               BEGIN TEST."
+ 1140 PRINT
+ 1150 DEF FNM=123
+ 1160 DEF FNN(D)=3*37
+ 1170 LET A=FNM
+ 1180 LET B=FNN(FNM+A)
+ 1190 IF A<>123 THEN 1300
+ 1200 IF B<>111 THEN 1300
+ 1210 PRINT "***  TEST PASSED  ***"
+ 1220 GOTO 1310
+ 1300 PRINT "***  TEST FAILED  ***"
+ 1310 PRINT
+ 1320 PRINT "                                END TEST."
+ 1330 PRINT
+ 1500 PRINT "SECTION 151.6: THE PARAMETER OF A USER-DEFINED"
+ 1510 PRINT "        FUNCTION IS LOCAL TO THE EXPRESSION OF THE"
+ 1520 PRINT "        DEFINITION AND OTHER VARIABLES ARE GLOBAL."
+ 1530 PRINT
+ 1540 PRINT "                               BEGIN TEST."
+ 1550 PRINT
+ 1560 LET X=1
+ 1570 LET Y=2
+ 1580 LET Z=3
+ 1590 LET P1=-100
+ 1600 LET Q1=-100
+ 1610 DEF FNG(P1)=3+P1+X
+ 1620 DEF FNH(P1)=7+X+Y+P1+FNG(30.E-1+P1)+FNG(P1)+FNG(Y)
+ 1630 LET X=4
+ 1640 LET Y=5
+ 1650 LET Z=6
+ 1660 LET P1=7
+ 1670 LET Q1=8
+ 1680 DEF FNI(Q1)=Z+Q1*10.
+ 1690 LET A=FNH(Q1+3)+FNG(10)+FNI(Q1+4)
+ 1700 IF X<>4 THEN 1790
+ 1710 IF Y<>5 THEN 1790
+ 1720 IF Z<>6 THEN 1790
+ 1730 IF P1<>7 THEN 1790
+ 1740 IF Q1<>8 THEN 1790
+ 1750 LET C=221-A
+ 1760 IF ABS(C)>.01 THEN 1790
+ 1770 PRINT "***  TEST PASSED  ***"
+ 1780 GOTO 1800
+ 1790 PRINT "***  TEST FAILED  ***"
+ 1800 PRINT
+ 1810 PRINT "                                END TEST."
+ 1820 PRINT
+ 1830 PRINT "SECTION 151.7: FULL GENERAL USE OF USER-DEFINED FUNCTIONS"
+ 1840 PRINT "        IN NUMERIC EXPRESSIONS."
+ 1850 PRINT
+ 1860 PRINT "                               BEGIN TEST."
+ 1870 PRINT
+ 1880 DEF FNT=3
+ 1890 DEF FNU(D)=100
+ 1900 LET X=4
+ 1910 LET Y=5
+ 1920 LET Z=6
+ 1930 LET Q1=8
+ 1940 LET A=FNI(FNT)
+ 1950 LET A=A/(FNG(FNH(Q1+FNT)/(FNI(Q1+4)-FNU(1E38))+FNG(FNG(-10)))-2)
+ 1960 LET C9=A-3
+ 1970 IF ABS(C9) < .01 THEN 2000
+ 1980 PRINT "***  TEST FAILED  ***"
+ 1990 GOTO 2010
+ 2000 PRINT "***  TEST PASSED  ***"
+ 2010 PRINT
+ 2020 PRINT "                                 END TEST."
+ 2030 PRINT
+ 2040 PRINT "END PROGRAM 151."
+ 2050 END
+ 
', tests/integration.rs:37:13

---- P153 stdout ----
thread 'P153' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n225 DEF FNP=3.14159\n228 PRINT\n229 PRINT \"DEFINITION OF FNP=3.14159\"\n230 PRINT\n240 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FNP.\"\n250 LET A=FNP(0)\n260 PRINT \"PROCESSOR HAS EVALUATED FNP(0) = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 153\"\n310 END\n"`,
 right: `"250: error: invalid number of arguments for function FNP\n LET A=FNP(0)\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 225 DEF FNP=3.14159
+ 228 PRINT
+ 229 PRINT "DEFINITION OF FNP=3.14159"
+ 230 PRINT
+ 240 PRINT "ABOUT TO ATTEMPT INVOCATION OF FNP."
+ 250 LET A=FNP(0)
+ 260 PRINT "PROCESSOR HAS EVALUATED FNP(0) = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 153"
+ 310 END
- 250: error: invalid number of arguments for function FNP
-  LET A=FNP(0)
-        ^
', tests/integration.rs:37:13

---- P149 stdout ----
thread 'P149' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LET A=RND()\n260 PRINT \"PROCESSOR HAS EVALUATED RND() = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 149\"\n310 END\n"`,
 right: `"250: error: syntax error \n LET A=RND()\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LET A=RND()
+ 260 PRINT "PROCESSOR HAS EVALUATED RND() = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 149"
+ 310 END
- 250: error: syntax error 
-  LET A=RND()
-            ^
', tests/integration.rs:37:13

---- P152 stdout ----
thread 'P152' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n110 DEF FNA(X)=X/7-7\n120 DEF FNB(X)=X/8-8\n130 DEF FNC(X)=X/9-9\n140 DEF FND(X)=X/10-10\n150 DEF FNE(X)=X/11-11\n160 DEF FNF(X)=X/12-12\n170 DEF FNG(X)=X/13-13\n180 DEF FNH(X)=X/14-14\n190 DEF FNI(X)=X/15-15\n200 DEF FNJ(X)=X/16-16\n210 DEF FNK(X)=X/17-17\n220 DEF FNL(X)=X/18-18\n230 DEF FNM(X)=X/19-19\n240 DEF FNN(X)=X/20-20\n250 DEF FNO(X)=X/21-21\n260 DEF FNP(X)=X/22-22\n270 DEF FNQ(X)=X/23-23\n280 DEF FNR(X)=X/24-24\n290 DEF FNS(X)=X/25-25\n300 DEF FNT(X)=X/26-26\n310 DEF FNU(X)=X/27-27\n320 DEF FNV(X)=X/28-28\n330 DEF FNW(X)=X/29-29\n340 DEF FNX(X)=X/30-30\n350 DEF FNY(X)=X/31-31\n360 DEF FNZ(X)=X/32-32\n370 DIM A(26)\n380 LET A(1)=FNA(77)\n390 LET A(2)=FNB(88)\n400 LET A(3)=FNC(99)\n410 LET A(4)=FND(110)\n420 LET A(5)=FNE(121)\n430 LET A(6)=FNF(132)\n440 LET A(7)=FNG(143)\n450 LET A(8)=FNH(154)\n460 LET A(9)=FNI(165)\n470 LET A(10)=FNJ(176)\n480 LET A(11)=FNK(187)\n490 LET A(12)=FNL(198)\n500 LET A(13)=FNM(209)\n510 LET A(14)=FNN(220)\n520 LET A(15)=FNO(231)\n530 LET A(16)=FNP(242)\n540 LET A(17)=FNQ(253)\n550 LET A(18)=FNR(264)\n560 LET A(19)=FNS(275)\n570 LET A(20)=FNT(286)\n580 LET A(21)=FNU(297)\n590 LET A(22)=FNV(308)\n600 LET A(23)=FNW(319)\n610 LET A(24)=FNX(330)\n620 LET A(25)=FNY(341)\n630 LET A(26)=FNZ(352)\n640 LET S=0\n650 FOR I=1 TO 26\n660 LET S=S+A(I)\n670 NEXT I\n680 IF S=-221 THEN 710\n690 PRINT \"***  TEST FAILED  ***\"\n700 GOTO 720\n710 PRINT \"***  TEST PASSED  ***\"\n720 PRINT\n730 PRINT \"                                END TEST.\"\n740 PRINT\n750 PRINT \"END PROGRAM 152.\"\n760 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 110 DEF FNA(X)=X/7-7
+ 120 DEF FNB(X)=X/8-8
+ 130 DEF FNC(X)=X/9-9
+ 140 DEF FND(X)=X/10-10
+ 150 DEF FNE(X)=X/11-11
+ 160 DEF FNF(X)=X/12-12
+ 170 DEF FNG(X)=X/13-13
+ 180 DEF FNH(X)=X/14-14
+ 190 DEF FNI(X)=X/15-15
+ 200 DEF FNJ(X)=X/16-16
+ 210 DEF FNK(X)=X/17-17
+ 220 DEF FNL(X)=X/18-18
+ 230 DEF FNM(X)=X/19-19
+ 240 DEF FNN(X)=X/20-20
+ 250 DEF FNO(X)=X/21-21
+ 260 DEF FNP(X)=X/22-22
+ 270 DEF FNQ(X)=X/23-23
+ 280 DEF FNR(X)=X/24-24
+ 290 DEF FNS(X)=X/25-25
+ 300 DEF FNT(X)=X/26-26
+ 310 DEF FNU(X)=X/27-27
+ 320 DEF FNV(X)=X/28-28
+ 330 DEF FNW(X)=X/29-29
+ 340 DEF FNX(X)=X/30-30
+ 350 DEF FNY(X)=X/31-31
+ 360 DEF FNZ(X)=X/32-32
+ 370 DIM A(26)
+ 380 LET A(1)=FNA(77)
+ 390 LET A(2)=FNB(88)
+ 400 LET A(3)=FNC(99)
+ 410 LET A(4)=FND(110)
+ 420 LET A(5)=FNE(121)
+ 430 LET A(6)=FNF(132)
+ 440 LET A(7)=FNG(143)
+ 450 LET A(8)=FNH(154)
+ 460 LET A(9)=FNI(165)
+ 470 LET A(10)=FNJ(176)
+ 480 LET A(11)=FNK(187)
+ 490 LET A(12)=FNL(198)
+ 500 LET A(13)=FNM(209)
+ 510 LET A(14)=FNN(220)
+ 520 LET A(15)=FNO(231)
+ 530 LET A(16)=FNP(242)
+ 540 LET A(17)=FNQ(253)
+ 550 LET A(18)=FNR(264)
+ 560 LET A(19)=FNS(275)
+ 570 LET A(20)=FNT(286)
+ 580 LET A(21)=FNU(297)
+ 590 LET A(22)=FNV(308)
+ 600 LET A(23)=FNW(319)
+ 610 LET A(24)=FNX(330)
+ 620 LET A(25)=FNY(341)
+ 630 LET A(26)=FNZ(352)
+ 640 LET S=0
+ 650 FOR I=1 TO 26
+ 660 LET S=S+A(I)
+ 670 NEXT I
+ 680 IF S=-221 THEN 710
+ 690 PRINT "***  TEST FAILED  ***"
+ 700 GOTO 720
+ 710 PRINT "***  TEST PASSED  ***"
+ 720 PRINT
+ 730 PRINT "                                END TEST."
+ 740 PRINT
+ 750 PRINT "END PROGRAM 152."
+ 760 END
+ 
', tests/integration.rs:37:13

---- P155 stdout ----
thread 'P155' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 DEF FNP=3.14159\n260 PRINT \"DEFINITION OF FNP=3.14159\"\n270 PRINT\n280 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FNP.\"\n290 LET A=FNP()\n300 PRINT \"PROCESSOR HAS EVALUATED FNP() = \";A\n310 PRINT\n320 PRINT \"              END TEST\"\n330 PRINT\n340 PRINT \"END PROGRAM 155\"\n350 END\n"`,
 right: `"290: error: syntax error \n LET A=FNP()\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 DEF FNP=3.14159
+ 260 PRINT "DEFINITION OF FNP=3.14159"
+ 270 PRINT
+ 280 PRINT "ABOUT TO ATTEMPT INVOCATION OF FNP."
+ 290 LET A=FNP()
+ 300 PRINT "PROCESSOR HAS EVALUATED FNP() = ";A
+ 310 PRINT
+ 320 PRINT "              END TEST"
+ 330 PRINT
+ 340 PRINT "END PROGRAM 155"
+ 350 END
- 290: error: syntax error 
-  LET A=FNP()
-            ^
', tests/integration.rs:37:13

---- P157 stdout ----
thread 'P157' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 DEF FNA(X,Y)=X+Y\n270 PRINT \"DEFINITION OF FNA(X,Y)=X+Y\"\n280 PRINT \"SETTING X=1 AND Y=10\"\n290 PRINT\n300 LET X=1\n310 LET Y=10\n320 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FNA(100,1000).\"\n330 LET A=FNA(100,1000)\n340 PRINT \"PROCESSOR HAS EVALUATED FNA(100,1000) = \";A\n350 PRINT\n360 PRINT \"                                END TEST.\"\n370 PRINT\n380 PRINT \"END PROGRAM 157.\"\n390 END\n"`,
 right: `"260: error: syntax error \n DEF FNA(X,Y)=X+Y\n          ^\n330: error: syntax error \n LET A=FNA(100,1000)\n              ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 DEF FNA(X,Y)=X+Y
+ 270 PRINT "DEFINITION OF FNA(X,Y)=X+Y"
+ 280 PRINT "SETTING X=1 AND Y=10"
+ 290 PRINT
+ 300 LET X=1
+ 310 LET Y=10
+ 320 PRINT "ABOUT TO ATTEMPT INVOCATION OF FNA(100,1000)."
+ 330 LET A=FNA(100,1000)
+ 340 PRINT "PROCESSOR HAS EVALUATED FNA(100,1000) = ";A
+ 350 PRINT
+ 360 PRINT "                                END TEST."
+ 370 PRINT
+ 380 PRINT "END PROGRAM 157."
+ 390 END
- 260: error: syntax error 
-  DEF FNA(X,Y)=X+Y
-           ^
- 330: error: syntax error 
-  LET A=FNA(100,1000)
-               ^
', tests/integration.rs:37:13

---- P156 stdout ----
thread 'P156' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 DEF FNA(X)=X*10\n260 PRINT \"DEFINITION OF FNA(X)=X*10\"\n270 PRINT\n280 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FNA.\"\n290 LET A=FNA(5,6)\n300 PRINT \"PROCESSOR HAS EVALUATED FNA(5,6) = \";A\n310 PRINT\n320 PRINT\n330 PRINT \"                                END TEST.\"\n340 PRINT\n350 PRINT \"END PROGRAM 156.\"\n360 END\n"`,
 right: `"290: error: syntax error \n LET A=FNA(5,6)\n            ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 DEF FNA(X)=X*10
+ 260 PRINT "DEFINITION OF FNA(X)=X*10"
+ 270 PRINT
+ 280 PRINT "ABOUT TO ATTEMPT INVOCATION OF FNA."
+ 290 LET A=FNA(5,6)
+ 300 PRINT "PROCESSOR HAS EVALUATED FNA(5,6) = ";A
+ 310 PRINT
+ 320 PRINT
+ 330 PRINT "                                END TEST."
+ 340 PRINT
+ 350 PRINT "END PROGRAM 156."
+ 360 END
- 290: error: syntax error 
-  LET A=FNA(5,6)
-             ^
', tests/integration.rs:37:13

---- P130 stdout ----
thread 'P130' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n130 FOR I=1 TO 20\n140 PRINT I,RND\n150 NEXT I\n160 PRINT\n170 PRINT \"TO DETERMINE WHETHER THIS TEST PASSES OR FAILS, THE USER\"\n180 PRINT \"MUST RUN THE TEST THREE TIMES, NOTHING THE SEQUENCE OF\"\n190 PRINT \"NUMBERS PRODUCED EACH TIME. IF ALL THREE ARE IDENTICAL, \"\n200 PRINT \"***  TEST PASSED  ***\"\n210 PRINT\n220 PRINT \"             END TEST\"\n230 PRINT\n240 PRINT \"END PROGRAM 130\"\n250 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 130 FOR I=1 TO 20
+ 140 PRINT I,RND
+ 150 NEXT I
+ 160 PRINT
+ 170 PRINT "TO DETERMINE WHETHER THIS TEST PASSES OR FAILS, THE USER"
+ 180 PRINT "MUST RUN THE TEST THREE TIMES, NOTHING THE SEQUENCE OF"
+ 190 PRINT "NUMBERS PRODUCED EACH TIME. IF ALL THREE ARE IDENTICAL, "
+ 200 PRINT "***  TEST PASSED  ***"
+ 210 PRINT
+ 220 PRINT "             END TEST"
+ 230 PRINT
+ 240 PRINT "END PROGRAM 130"
+ 250 END
+ 
', tests/integration.rs:37:13

---- P160 stdout ----
thread 'P160' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 DEF FND(R)=R+10\n230 PRINT\n240 PRINT \"1ST DEFINITION OF FND(R)=R+10\"\n250 PRINT \"2ND DEFINITION OF FND(R)=R+100\"\n260 PRINT\n270 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FND(5).\"\n280 LET A=FND(5)\n290 PRINT \"PROCESSOR HAS EVALUATED FND(5) = \";A\n300 PRINT\n310 PRINT \"              END TEST\"\n320 PRINT\n330 PRINT \"END PROGRAM 160\"\n340 DEF FND(R)=R+100\n350 END\n"`,
 right: `"340: error: function redeclared \n DEF FND(R)=R+100\n     ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 DEF FND(R)=R+10
+ 230 PRINT
+ 240 PRINT "1ST DEFINITION OF FND(R)=R+10"
+ 250 PRINT "2ND DEFINITION OF FND(R)=R+100"
+ 260 PRINT
+ 270 PRINT "ABOUT TO ATTEMPT INVOCATION OF FND(5)."
+ 280 LET A=FND(5)
+ 290 PRINT "PROCESSOR HAS EVALUATED FND(5) = ";A
+ 300 PRINT
+ 310 PRINT "              END TEST"
+ 320 PRINT
+ 330 PRINT "END PROGRAM 160"
+ 340 DEF FND(R)=R+100
+ 350 END
- 340: error: function redeclared 
-  DEF FND(R)=R+100
-      ^
', tests/integration.rs:37:13

---- P154 stdout ----
thread 'P154' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n225 DEF FND(R)=(R*180)/3.14159\n228 PRINT\n229 PRINT \"DEFINITION OF FND(R)=(R*180)/3.14159\"\n230 PRINT\n240 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FND.\"\n250 LET A=FND\n260 PRINT \"PROCESSOR HAS EVALUATED FND = \";A\n270 PRINT\n280 PRINT \"              END TEST\"\n290 PRINT\n300 PRINT \"END PROGRAM 154\"\n310 END\n"`,
 right: `"250: error: invalid number of arguments for function FND\n LET A=FND\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 225 DEF FND(R)=(R*180)/3.14159
+ 228 PRINT
+ 229 PRINT "DEFINITION OF FND(R)=(R*180)/3.14159"
+ 230 PRINT
+ 240 PRINT "ABOUT TO ATTEMPT INVOCATION OF FND."
+ 250 LET A=FND
+ 260 PRINT "PROCESSOR HAS EVALUATED FND = ";A
+ 270 PRINT
+ 280 PRINT "              END TEST"
+ 290 PRINT
+ 300 PRINT "END PROGRAM 154"
+ 310 END
- 250: error: invalid number of arguments for function FND
-  LET A=FND
-        ^
', tests/integration.rs:37:13

---- P161 stdout ----
thread 'P161' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 DEF FNA(X)=X/FNA(X-1)\n260 PRINT \"DEFINITION OF FNA(X) = X / FNA(X-1)\"\n270 PRINT\n280 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FNA.\"\n290 LET Z=FNA(5)\n300 PRINT \"PROCESSOR HAS EVALUATED FNA(5) = \";Z\n310 PRINT\n320 PRINT \"                                END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 161\"\n350 END\n"`,
 right: `"250: error: undefined function FNA\n DEF FNA(X)=X/FNA(X-1)\n              ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 DEF FNA(X)=X/FNA(X-1)
+ 260 PRINT "DEFINITION OF FNA(X) = X / FNA(X-1)"
+ 270 PRINT
+ 280 PRINT "ABOUT TO ATTEMPT INVOCATION OF FNA."
+ 290 LET Z=FNA(5)
+ 300 PRINT "PROCESSOR HAS EVALUATED FNA(5) = ";Z
+ 310 PRINT
+ 320 PRINT "                                END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 161"
+ 350 END
- 250: error: undefined function FNA
-  DEF FNA(X)=X/FNA(X-1)
-               ^
', tests/integration.rs:37:13

---- P158 stdout ----
thread 'P158' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 DEF FND(R)=R + 3\n260 PRINT\n270 PRINT \"DEFINITION OF FND(4)=R + 3\"\n280 PRINT \"SETTING X = 5\"\n290 PRINT \"SETTING X$ = \'ABC\'\"\n300 PRINT\n310 LET X=5\n320 LET X$=\"ABC\"\n330 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FND(X$).\"\n340 LET A=FND(X$)\n350 PRINT \"PROCESSOR HAS EVALUATED FND(X$) = \";A\n360 PRINT\n370 PRINT \"              END TEST\"\n380 PRINT\n390 PRINT \"END PROGRAM 158\"\n400 END\n"`,
 right: `"340: error: numeric expression expected \n LET A=FND(X$)\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 DEF FND(R)=R + 3
+ 260 PRINT
+ 270 PRINT "DEFINITION OF FND(4)=R + 3"
+ 280 PRINT "SETTING X = 5"
+ 290 PRINT "SETTING X$ = 'ABC'"
+ 300 PRINT
+ 310 LET X=5
+ 320 LET X$="ABC"
+ 330 PRINT "ABOUT TO ATTEMPT INVOCATION OF FND(X$)."
+ 340 LET A=FND(X$)
+ 350 PRINT "PROCESSOR HAS EVALUATED FND(X$) = ";A
+ 360 PRINT
+ 370 PRINT "              END TEST"
+ 380 PRINT
+ 390 PRINT "END PROGRAM 158"
+ 400 END
- 340: error: numeric expression expected 
-  LET A=FND(X$)
-            ^
', tests/integration.rs:37:13

---- P159 stdout ----
thread 'P159' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 DEF FND(R$)=R+3\n260 PRINT\n270 PRINT \"DEFINITION OF FND(R$)=R + 3\"\n280 PRINT \"SETTING R = 5\"\n290 PRINT \"SETTING R$ = \'ABC\'\"\n300 PRINT\n310 LET R=5\n320 LET R$=\"ABC\"\n330 PRINT \"ABOUT TO ATTEMPT INVOCATION OF FND(R$).\"\n340 LET A=FND(R$)\n350 PRINT \"PROCESSOR HAS EVALUATED FND(R$) = \";A\n360 PRINT\n370 PRINT \"              END TEST\"\n380 PRINT\n390 PRINT \"END PROGRAM 159\"\n400 END\n"`,
 right: `"250: error: numeric variable name expected \n DEF FND(R$)=R+3\n         ^\n340: error: numeric expression expected \n LET A=FND(R$)\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 DEF FND(R$)=R+3
+ 260 PRINT
+ 270 PRINT "DEFINITION OF FND(R$)=R + 3"
+ 280 PRINT "SETTING R = 5"
+ 290 PRINT "SETTING R$ = 'ABC'"
+ 300 PRINT
+ 310 LET R=5
+ 320 LET R$="ABC"
+ 330 PRINT "ABOUT TO ATTEMPT INVOCATION OF FND(R$)."
+ 340 LET A=FND(R$)
+ 350 PRINT "PROCESSOR HAS EVALUATED FND(R$) = ";A
+ 360 PRINT
+ 370 PRINT "              END TEST"
+ 380 PRINT
+ 390 PRINT "END PROGRAM 159"
+ 400 END
- 250: error: numeric variable name expected 
-  DEF FND(R$)=R+3
-          ^
- 340: error: numeric expression expected 
-  LET A=FND(R$)
-            ^
', tests/integration.rs:37:13

---- P165 stdout ----
thread 'P165' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n110 DEF FNA(X)=X^2+1\n120 LET A1=0.5\n130 LET B1=-.25\n140 LET C1=16.0\n150 LET D1=-4.0\n152 FOR I=1 TO 7\n153 FOR J=1 TO 7\n155 LET Q(I,J)=I/J\n156 NEXT J\n157 NEXT I\n160 PRINT \"EXPECTED\",\"CALCULATED\"\n170 PRINT \" VALUES\", \"  VALUES\"\n180 PRINT\n190 PRINT -.25 ,3*A1+7*B1\n200 PRINT  6.5 ,ABS(A1+1.0-(C1+D1)+0.5*8.0)\n210 PRINT  16.4794255,SIN(A1^2+ABS(B1))+C1\n220 PRINT  1.54192554,FNA(B1+A1)+SIN(A1)\n225 PRINT 5.24288566E-22,EXP(-Q(7,1)/Q(1,7))\n230 PRINT\n240 PRINT \"*** TEST PASSED IF THE EXPECTED VALUES AND THE CALCULATED\"\n250 PRINT \"    VALUES ARE NUMERICALLY EQUAL OR APPROXIMATELY SO  ***\"\n260 PRINT\n270 PRINT \"                                END TEST.\"\n280 PRINT\n290 PRINT \"SECTION 165.2: NUMERIC EXPRESSIONS AS ARGUMENTS\"\n295 PRINT \"        TO TAB-CALLS.\"\n300 PRINT\n310 PRINT \"                               BEGIN TEST.\"\n320 PRINT\n330 DEF FNB(X)=X^3-8\n340 LET A1=2.75\n350 LET B1=1.5\n360 LET C1=3.1\n370 PRINT \"00000000011111111112222222222333333333344444444445\";\n380 PRINT \"5555555556666666666777\"\n390 PRINT \"12345678901234567890123456789012345678901234567890\";\n400 PRINT \"1234567890123456789012\"\n410 PRINT TAB(2*C1-A1);\"A\";TAB(2*ABS(-B1)+A1-Q(1,5));\"B\";\n420 PRINT TAB(FNB(A1+B1)-.15);\"C\"\n430 PRINT\n440 PRINT \"*** TEST PASSED IF THE CHARACTERS \'A\', \'B\' AND \'C\' ARE\"\n450 PRINT \"    PRINTED IN COLUMNS 3, 6, AND 69 RESPECTIVELY  ***\"\n460 PRINT\n470 PRINT \"                                 END TEST.\"\n480 PRINT\n490 PRINT \"END PROGRAM 165\"\n500 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 110 DEF FNA(X)=X^2+1
+ 120 LET A1=0.5
+ 130 LET B1=-.25
+ 140 LET C1=16.0
+ 150 LET D1=-4.0
+ 152 FOR I=1 TO 7
+ 153 FOR J=1 TO 7
+ 155 LET Q(I,J)=I/J
+ 156 NEXT J
+ 157 NEXT I
+ 160 PRINT "EXPECTED","CALCULATED"
+ 170 PRINT " VALUES", "  VALUES"
+ 180 PRINT
+ 190 PRINT -.25 ,3*A1+7*B1
+ 200 PRINT  6.5 ,ABS(A1+1.0-(C1+D1)+0.5*8.0)
+ 210 PRINT  16.4794255,SIN(A1^2+ABS(B1))+C1
+ 220 PRINT  1.54192554,FNA(B1+A1)+SIN(A1)
+ 225 PRINT 5.24288566E-22,EXP(-Q(7,1)/Q(1,7))
+ 230 PRINT
+ 240 PRINT "*** TEST PASSED IF THE EXPECTED VALUES AND THE CALCULATED"
+ 250 PRINT "    VALUES ARE NUMERICALLY EQUAL OR APPROXIMATELY SO  ***"
+ 260 PRINT
+ 270 PRINT "                                END TEST."
+ 280 PRINT
+ 290 PRINT "SECTION 165.2: NUMERIC EXPRESSIONS AS ARGUMENTS"
+ 295 PRINT "        TO TAB-CALLS."
+ 300 PRINT
+ 310 PRINT "                               BEGIN TEST."
+ 320 PRINT
+ 330 DEF FNB(X)=X^3-8
+ 340 LET A1=2.75
+ 350 LET B1=1.5
+ 360 LET C1=3.1
+ 370 PRINT "00000000011111111112222222222333333333344444444445";
+ 380 PRINT "5555555556666666666777"
+ 390 PRINT "12345678901234567890123456789012345678901234567890";
+ 400 PRINT "1234567890123456789012"
+ 410 PRINT TAB(2*C1-A1);"A";TAB(2*ABS(-B1)+A1-Q(1,5));"B";
+ 420 PRINT TAB(FNB(A1+B1)-.15);"C"
+ 430 PRINT
+ 440 PRINT "*** TEST PASSED IF THE CHARACTERS 'A', 'B' AND 'C' ARE"
+ 450 PRINT "    PRINTED IN COLUMNS 3, 6, AND 69 RESPECTIVELY  ***"
+ 460 PRINT
+ 470 PRINT "                                 END TEST."
+ 480 PRINT
+ 490 PRINT "END PROGRAM 165"
+ 500 END
+ 
', tests/integration.rs:37:13

---- P162 stdout ----
thread 'P162' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n290 LET A=FND(5)\n300 PRINT \"PROCESSOR HAS EVALUATED FND(5) = \";A\n310 PRINT\n320 DEF FND(R)=R+10\n330 PRINT \"              END TEST\"\n340 PRINT\n350 PRINT \"END PROGRAM 162\"\n360 END\n"`,
 right: `"290: error: undefined function FND\n LET A=FND(5)\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 290 LET A=FND(5)
+ 300 PRINT "PROCESSOR HAS EVALUATED FND(5) = ";A
+ 310 PRINT
+ 320 DEF FND(R)=R+10
+ 330 PRINT "              END TEST"
+ 340 PRINT
+ 350 PRINT "END PROGRAM 162"
+ 360 END
- 290: error: undefined function FND
-  LET A=FND(5)
-        ^
', tests/integration.rs:37:13

---- P167 stdout ----
thread 'P167' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 DEF FNC(X)=LOG(X)/LOG(10)\n270 LET A=5\n280 LET B=0\n290 PRINT \"ABOUT TO EVALUATE FNC(5/0), WHERE FNC = COMMON LOG.\"\n300 PRINT \"EXCEPTION SHOULD BE REPORTED NOW:\"\n310 PRINT\n320 LET C=FNC(A/B)\n330 PRINT\n340 PRINT \"RESULT OF FNC(5/0) = \";C\n350 PRINT\n360 IF C >= 37.99 THEN 400\n370 PRINT \"*** TEST FAILED: RESULT < 38 ***\"\n380 GOTO 440\n400 PRINT \"IF EXCEPTION REPORTED, AND\"\n410 PRINT \"   RESULT = COMMON LOG OF MACHINE INFINITY, THEN\"\n420 PRINT \"*** TEST PASSED ***\"\n440 PRINT\n450 PRINT \"                    END TEST.\"\n460 PRINT\n1110 PRINT \"SECTION 167.2: ZERO RAISED TO A NEGATIVE POWER IN AN\"\n1120 PRINT \"        ARGUMENT TO AN IMPLEMENTATION-SUPPLIED FUNCTION.\"\n1130 PRINT\n1140 PRINT \"TO PASS THIS TEST:\"\n1150 PRINT\n1160 PRINT \"    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\"\n1170 PRINT \"       DISPLAYED, AND\"\n1180 PRINT\n1190 PRINT \"    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\"\n1200 PRINT \"       OF THE ARGUMENT AND EXECUTION CONTINUES.\"\n1210 PRINT\n1220 PRINT \"                   BEGIN TEST.\"\n1230 PRINT\n1250 LET A=-5\n1260 LET B=0\n1270 PRINT \"ABOUT TO EVALUATE ATN(0^(-5)).\"\n1280 PRINT \"EXCEPTION SHOULD BE REPORTED NOW:\"\n1290 PRINT\n1300 LET C=ATN(B^A)\n1310 PRINT\n1320 PRINT \"RESULT OF ATN(0^(-5)) = \";C\n1330 PRINT\n1340 IF ABS(C-1.5708) <= .001 THEN 1370\n1350 PRINT \"*** TEST FAILED: RESULT <> PI/2 ***\"\n1360 GOTO 1400\n1370 PRINT \"IF EXCEPTION REPORTED, THEN\"\n1390 PRINT \"*** TEST PASSED ***\"\n1400 PRINT\n1410 PRINT \"                    END TEST.\"\n1420 PRINT\n1440 PRINT \"END PROGRAM 167\"\n1450 END\n"`,
 right: `"320: warning: division by zero \n1300: warning: zero raised to negative value (0 ^ -5)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 DEF FNC(X)=LOG(X)/LOG(10)
+ 270 LET A=5
+ 280 LET B=0
+ 290 PRINT "ABOUT TO EVALUATE FNC(5/0), WHERE FNC = COMMON LOG."
+ 300 PRINT "EXCEPTION SHOULD BE REPORTED NOW:"
+ 310 PRINT
+ 320 LET C=FNC(A/B)
+ 330 PRINT
+ 340 PRINT "RESULT OF FNC(5/0) = ";C
+ 350 PRINT
+ 360 IF C >= 37.99 THEN 400
+ 370 PRINT "*** TEST FAILED: RESULT < 38 ***"
+ 380 GOTO 440
+ 400 PRINT "IF EXCEPTION REPORTED, AND"
+ 410 PRINT "   RESULT = COMMON LOG OF MACHINE INFINITY, THEN"
+ 420 PRINT "*** TEST PASSED ***"
+ 440 PRINT
+ 450 PRINT "                    END TEST."
+ 460 PRINT
+ 1110 PRINT "SECTION 167.2: ZERO RAISED TO A NEGATIVE POWER IN AN"
+ 1120 PRINT "        ARGUMENT TO AN IMPLEMENTATION-SUPPLIED FUNCTION."
+ 1130 PRINT
+ 1140 PRINT "TO PASS THIS TEST:"
+ 1150 PRINT
+ 1160 PRINT "    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE"
+ 1170 PRINT "       DISPLAYED, AND"
+ 1180 PRINT
+ 1190 PRINT "    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE"
+ 1200 PRINT "       OF THE ARGUMENT AND EXECUTION CONTINUES."
+ 1210 PRINT
+ 1220 PRINT "                   BEGIN TEST."
+ 1230 PRINT
+ 1250 LET A=-5
+ 1260 LET B=0
+ 1270 PRINT "ABOUT TO EVALUATE ATN(0^(-5))."
+ 1280 PRINT "EXCEPTION SHOULD BE REPORTED NOW:"
+ 1290 PRINT
+ 1300 LET C=ATN(B^A)
+ 1310 PRINT
+ 1320 PRINT "RESULT OF ATN(0^(-5)) = ";C
+ 1330 PRINT
+ 1340 IF ABS(C-1.5708) <= .001 THEN 1370
+ 1350 PRINT "*** TEST FAILED: RESULT <> PI/2 ***"
+ 1360 GOTO 1400
+ 1370 PRINT "IF EXCEPTION REPORTED, THEN"
+ 1390 PRINT "*** TEST PASSED ***"
+ 1400 PRINT
+ 1410 PRINT "                    END TEST."
+ 1420 PRINT
+ 1440 PRINT "END PROGRAM 167"
+ 1450 END
- 320: warning: division by zero 
- 1300: warning: zero raised to negative value (0 ^ -5)
', tests/integration.rs:37:13

---- P164 stdout ----
thread 'P164' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 LET X=10*RND+3/RND-TAN(-.348E-2)\n280 LET A=SIN(X)*SIN(X)+COS(X)^(-(-1.3+.5-1.2))\n290 LET Y=1\n300 GOSUB 9000\n310 DIM F(20)\n320 REM SET UP FIBONACCI SERIES IN F\n330 LET F(1)=1\n340 LET F(2)=1\n350 FOR I=3 TO 20\n360 LET J=I-1\n370 LET K=I-2\n380 LET F(I)=F(J)+F(K)\n390 NEXT I\n400 LET A=F(20)/F(19)/((1+SQR(5))/2)\n410 LET Y=1\n420 GOSUB 9000\n430 FOR I=1 TO 7\n440 FOR J=1 TO 7\n450 LET Q(I,J)=I/J\n460 NEXT J\n470 NEXT I\n480 LET X=P/10\n490 LET A=-F(19)/F(20)/(-SIN(X))/Q(2,7)\n500 LET Y=7\n510 GOSUB 9000\n520 REM DEF COMMON LOG\n530 DEF FNC(X)=LOG(X)/LOG(10)\n540 LET X=P/6\n550 LET A=SIN(X)*FNC(1E36)/((F(20)+F(20))/F(19)-1)^FNC(100)*Q(5,6)\n560 LET Y=3\n570 GOSUB 9000\n580 GOSUB 8000\n660 PRINT \"SECTION 164.2: NUMERIC EXPRESSIONS USED AS FUNCTION\"\n670 PRINT \"        ARGUMENTS AND ARRAY SUBSCRIPTS.\"\n680 PRINT\n690 PRINT \"THIS SECTION TESTS WHETHER NUMERIC EXPRESSIONS CAN BE\"\n700 PRINT \"USED AS ARGUMENTS TO BOTH IMPLEMENTATION-SUPPLIED AND\"\n710 PRINT \"USER-DEFINED FUNCTIONS AND ALSO AS SUBSCRIPTS.\"\n750 GOSUB 7000\n790 REM DEF ARCSIN OF X IN DEGREES\n800 DEF FNA(X)=ATN(1/(1/X^2-1)^.5)/P*180\n810 LET A=FNA(SQR(3/4))/2/2/3/5\n820 LET Y=1\n830 GOSUB 9000\n840 LET A=Q(1+FNA(Q(F(4),ABS(-6)))/6,INT(SQR(F(+1+2^3))))\n850 LET Y=1.2\n860 GOSUB 9000\n870 LET X=RND\n880 LET D=P/180\n890 LET F(F(F(6))*Q(2,7)-TAN(P/4))=TAN(ATN(SIN(D*FNA(LOG(EXP(X))))))\n900 LET A=F(5)\n910 LET Y=X\n920 GOSUB 9000\n930 LET F(5)=5\n1000 GOSUB 8000\n1010 PRINT \"SECTION 164.3: EXPRESSIONS USED AS SUBSCRIPTS ARE\"\n1015 PRINT \"        ROUNDED TO NEAREST INTEGER.\"\n1020 PRINT\n1030 PRINT \"THIS SECTION ENSURES THAT WHEN EXPRESSIONS ARE USED AS\"\n1040 PRINT \"SUBSCRIPTS, THEY ARE ROUNDED TO THE NEAREST INTEGER.\"\n1060 GOSUB 7000\n1080 DIM V(5,11)\n1090 FOR I=0 TO 5\n1100 FOR J=0 TO 11\n1110 LET V(I,J)=12*I+J\n1120 NEXT J\n1130 NEXT I\n1160 LET A=V(FNC(316)-.1,FNC(ABS(-316))+10E-2)\n1170 LET Y=27\n1180 GOSUB 9000\n1190 LET A=V(Q(3,7),Q(4,7))\n1200 LET Y=1\n1210 GOSUB 9000\n1220 LET A=V(FNC(1E-3)+2.51,13*7/9+1)\n1230 LET Y=11\n1240 GOSUB 9000\n1250 LET A=1+V(LOG(1.0)-.4,.6-EXP(0))\n1260 LET Y=1\n1270 GOSUB 9000\n1280 LET A=V(F(5)+.49,F(7)-Q(5,3))\n1290 LET Y=71\n1300 GOSUB 9000\n1700 GOSUB 8000\n6000 PRINT \"END PROGRAM 164\"\n6010 STOP\n7000 REM SUBROUTINE TO BEGIN SECTION\n7010 PRINT\n7020 PRINT \"                 BEGIN TEST.\"\n7030 PRINT\n7040 PRINT \"CASE #\",\"SHOULD BE\",\"ACTUAL\",\"OUTCOME\"\n7050 PRINT\n7060 LET E1=0\n7070 LET C1=0\n7080 RETURN\n8000 REM SUBROUTINE TO END SECTION\n8010 PRINT\n8020 IF E1=0 THEN 8050\n8030 PRINT \"*** TEST FAILED IN \";E1;\" CASE(S) ***\"\n8040 GOTO 8060\n8050 PRINT \"*** TEST PASSED ***\"\n8060 PRINT\n8070 PRINT \"                  END TEST.\"\n8080 PRINT\n8090 RETURN\n9000 REM HANDLE REPORT\n9010 REM THIS SUBROUTINE ADOPTS A VERY LOOSE CRITERION OF CORRECTNESS\n9020 REM (RELATIVE ERROR < .001). ITS PURPOSE ISN\'T TO MEASURE ACCURACY\n9030 REM BUT ONLY TO ASSURE THAT THE SEMANTICS OF THE EXPRESSION\n9040 REM HAVE BEEN CORRECTLY IMPLEMENTED.\n9050 LET C1=C1+1\n9060 PRINT C1,Y,A,\n9070 LET P$=\"FAIL\"\n9080 LET M=0.001\n9090 LET T=(A-Y)/Y\n9100 IF T>M THEN 9150\n9110 LET T=-T\n9120 IF T>M THEN 9150\n9130 LET P$=\" OK \"\n9140 GOTO 9160\n9150 LET E1=E1+1\n9160 PRINT P$\n9170 RETURN\n9180 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 LET X=10*RND+3/RND-TAN(-.348E-2)
+ 280 LET A=SIN(X)*SIN(X)+COS(X)^(-(-1.3+.5-1.2))
+ 290 LET Y=1
+ 300 GOSUB 9000
+ 310 DIM F(20)
+ 320 REM SET UP FIBONACCI SERIES IN F
+ 330 LET F(1)=1
+ 340 LET F(2)=1
+ 350 FOR I=3 TO 20
+ 360 LET J=I-1
+ 370 LET K=I-2
+ 380 LET F(I)=F(J)+F(K)
+ 390 NEXT I
+ 400 LET A=F(20)/F(19)/((1+SQR(5))/2)
+ 410 LET Y=1
+ 420 GOSUB 9000
+ 430 FOR I=1 TO 7
+ 440 FOR J=1 TO 7
+ 450 LET Q(I,J)=I/J
+ 460 NEXT J
+ 470 NEXT I
+ 480 LET X=P/10
+ 490 LET A=-F(19)/F(20)/(-SIN(X))/Q(2,7)
+ 500 LET Y=7
+ 510 GOSUB 9000
+ 520 REM DEF COMMON LOG
+ 530 DEF FNC(X)=LOG(X)/LOG(10)
+ 540 LET X=P/6
+ 550 LET A=SIN(X)*FNC(1E36)/((F(20)+F(20))/F(19)-1)^FNC(100)*Q(5,6)
+ 560 LET Y=3
+ 570 GOSUB 9000
+ 580 GOSUB 8000
+ 660 PRINT "SECTION 164.2: NUMERIC EXPRESSIONS USED AS FUNCTION"
+ 670 PRINT "        ARGUMENTS AND ARRAY SUBSCRIPTS."
+ 680 PRINT
+ 690 PRINT "THIS SECTION TESTS WHETHER NUMERIC EXPRESSIONS CAN BE"
+ 700 PRINT "USED AS ARGUMENTS TO BOTH IMPLEMENTATION-SUPPLIED AND"
+ 710 PRINT "USER-DEFINED FUNCTIONS AND ALSO AS SUBSCRIPTS."
+ 750 GOSUB 7000
+ 790 REM DEF ARCSIN OF X IN DEGREES
+ 800 DEF FNA(X)=ATN(1/(1/X^2-1)^.5)/P*180
+ 810 LET A=FNA(SQR(3/4))/2/2/3/5
+ 820 LET Y=1
+ 830 GOSUB 9000
+ 840 LET A=Q(1+FNA(Q(F(4),ABS(-6)))/6,INT(SQR(F(+1+2^3))))
+ 850 LET Y=1.2
+ 860 GOSUB 9000
+ 870 LET X=RND
+ 880 LET D=P/180
+ 890 LET F(F(F(6))*Q(2,7)-TAN(P/4))=TAN(ATN(SIN(D*FNA(LOG(EXP(X))))))
+ 900 LET A=F(5)
+ 910 LET Y=X
+ 920 GOSUB 9000
+ 930 LET F(5)=5
+ 1000 GOSUB 8000
+ 1010 PRINT "SECTION 164.3: EXPRESSIONS USED AS SUBSCRIPTS ARE"
+ 1015 PRINT "        ROUNDED TO NEAREST INTEGER."
+ 1020 PRINT
+ 1030 PRINT "THIS SECTION ENSURES THAT WHEN EXPRESSIONS ARE USED AS"
+ 1040 PRINT "SUBSCRIPTS, THEY ARE ROUNDED TO THE NEAREST INTEGER."
+ 1060 GOSUB 7000
+ 1080 DIM V(5,11)
+ 1090 FOR I=0 TO 5
+ 1100 FOR J=0 TO 11
+ 1110 LET V(I,J)=12*I+J
+ 1120 NEXT J
+ 1130 NEXT I
+ 1160 LET A=V(FNC(316)-.1,FNC(ABS(-316))+10E-2)
+ 1170 LET Y=27
+ 1180 GOSUB 9000
+ 1190 LET A=V(Q(3,7),Q(4,7))
+ 1200 LET Y=1
+ 1210 GOSUB 9000
+ 1220 LET A=V(FNC(1E-3)+2.51,13*7/9+1)
+ 1230 LET Y=11
+ 1240 GOSUB 9000
+ 1250 LET A=1+V(LOG(1.0)-.4,.6-EXP(0))
+ 1260 LET Y=1
+ 1270 GOSUB 9000
+ 1280 LET A=V(F(5)+.49,F(7)-Q(5,3))
+ 1290 LET Y=71
+ 1300 GOSUB 9000
+ 1700 GOSUB 8000
+ 6000 PRINT "END PROGRAM 164"
+ 6010 STOP
+ 7000 REM SUBROUTINE TO BEGIN SECTION
+ 7010 PRINT
+ 7020 PRINT "                 BEGIN TEST."
+ 7030 PRINT
+ 7040 PRINT "CASE #","SHOULD BE","ACTUAL","OUTCOME"
+ 7050 PRINT
+ 7060 LET E1=0
+ 7070 LET C1=0
+ 7080 RETURN
+ 8000 REM SUBROUTINE TO END SECTION
+ 8010 PRINT
+ 8020 IF E1=0 THEN 8050
+ 8030 PRINT "*** TEST FAILED IN ";E1;" CASE(S) ***"
+ 8040 GOTO 8060
+ 8050 PRINT "*** TEST PASSED ***"
+ 8060 PRINT
+ 8070 PRINT "                  END TEST."
+ 8080 PRINT
+ 8090 RETURN
+ 9000 REM HANDLE REPORT
+ 9010 REM THIS SUBROUTINE ADOPTS A VERY LOOSE CRITERION OF CORRECTNESS
+ 9020 REM (RELATIVE ERROR < .001). ITS PURPOSE ISN'T TO MEASURE ACCURACY
+ 9030 REM BUT ONLY TO ASSURE THAT THE SEMANTICS OF THE EXPRESSION
+ 9040 REM HAVE BEEN CORRECTLY IMPLEMENTED.
+ 9050 LET C1=C1+1
+ 9060 PRINT C1,Y,A,
+ 9070 LET P$="FAIL"
+ 9080 LET M=0.001
+ 9090 LET T=(A-Y)/Y
+ 9100 IF T>M THEN 9150
+ 9110 LET T=-T
+ 9120 IF T>M THEN 9150
+ 9130 LET P$=" OK "
+ 9140 GOTO 9160
+ 9150 LET E1=E1+1
+ 9160 PRINT P$
+ 9170 RETURN
+ 9180 END
+ 
', tests/integration.rs:37:13

---- P171 stdout ----
thread 'P171' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n170 DEF FNT(X)=X/3\n180 PRINT \"ABOUT TO EVALUATE FNT(LOG(-2)),\"\n190 PRINT \"WHERE FNT(X) = X/3\"\n200 PRINT\n260 LET A=-2\n270 LET C=FNT(LOG(A))\n280 PRINT\n290 PRINT \"RESULT OF FNT(LOG(-2)) = \";C\n300 PRINT\n310 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\"\n320 PRINT\n330 PRINT \"                END TEST\"\n340 PRINT\n350 PRINT \"END PROGRAM 171\"\n360 END\n"`,
 right: `"270: error: function domain error LOG(-2)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 170 DEF FNT(X)=X/3
+ 180 PRINT "ABOUT TO EVALUATE FNT(LOG(-2)),"
+ 190 PRINT "WHERE FNT(X) = X/3"
+ 200 PRINT
+ 260 LET A=-2
+ 270 LET C=FNT(LOG(A))
+ 280 PRINT
+ 290 PRINT "RESULT OF FNT(LOG(-2)) = ";C
+ 300 PRINT
+ 310 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***"
+ 320 PRINT
+ 330 PRINT "                END TEST"
+ 340 PRINT
+ 350 PRINT "END PROGRAM 171"
+ 360 END
- 270: error: function domain error LOG(-2)
', tests/integration.rs:37:13

---- P169 stdout ----
thread 'P169' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n320 LET C=EXP(B^A)\n330 PRINT\n340 PRINT \"RESULT OF EXP(1E-20 ^ 5000) = \";C\n350 PRINT\n360 IF ABS(C-1) <= .001 THEN 400\n370 PRINT \"*** TEST FAILED: RESULT <> 1 ***\"\n380 GOTO 440\n400 PRINT \"*** TEST PASSED ***\"\n440 PRINT\n450 PRINT \"                    END TEST.\"\n460 PRINT\n1110 PRINT \"SECTION 169.2: NUMERIC UNDERFLOW IN AN ARRAY SUBSCRIPT.\"\n1130 PRINT\n1160 PRINT \"TO PASS THIS TEST:\"\n1170 PRINT\n1180 PRINT \"    1) A MESSAGE IDENTIFYING AN EXCEPTION MAY BE\"\n1190 PRINT \"       DISPLAYED (NOT MANDATORY), AND\"\n1200 PRINT\n1210 PRINT \"    2) ZERO MUST BE SUPPLIED AS THE VALUE\"\n1220 PRINT \"       OF THE SUBSCRIPT AND EXECUTION CONTINUES.\"\n1230 PRINT\n1240 PRINT \"                   BEGIN TEST.\"\n1250 PRINT\n1270 LET A=5001\n1280 LET B=-1E-20\n1282 FOR I=0 TO 10\n1284 LET Z(I)=100+I\n1286 NEXT I\n1290 PRINT \"ABOUT TO EVALUATE Z(-1E-20 ^ 5001), WHERE Z(I) = I + 100.\"\n1310 PRINT\n1320 LET C=Z(B^A)\n1330 PRINT\n1340 PRINT \"RESULT OF Z(-1E-20 ^ 5001) = \";C\n1350 PRINT\n1360 IF ABS(C-100) <= .01 THEN 1400\n1370 PRINT \"*** TEST FAILED: RESULT <> 100 ***\"\n1380 GOTO 1440\n1400 PRINT \"*** TEST PASSED ***\"\n1440 PRINT\n1450 PRINT \"                    END TEST.\"\n1460 PRINT\n3440 PRINT \"END PROGRAM 169\"\n3450 END\n"`,
 right: `"320: warning: operation overflow \n1320: warning: operation overflow \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 320 LET C=EXP(B^A)
+ 330 PRINT
+ 340 PRINT "RESULT OF EXP(1E-20 ^ 5000) = ";C
+ 350 PRINT
+ 360 IF ABS(C-1) <= .001 THEN 400
+ 370 PRINT "*** TEST FAILED: RESULT <> 1 ***"
+ 380 GOTO 440
+ 400 PRINT "*** TEST PASSED ***"
+ 440 PRINT
+ 450 PRINT "                    END TEST."
+ 460 PRINT
+ 1110 PRINT "SECTION 169.2: NUMERIC UNDERFLOW IN AN ARRAY SUBSCRIPT."
+ 1130 PRINT
+ 1160 PRINT "TO PASS THIS TEST:"
+ 1170 PRINT
+ 1180 PRINT "    1) A MESSAGE IDENTIFYING AN EXCEPTION MAY BE"
+ 1190 PRINT "       DISPLAYED (NOT MANDATORY), AND"
+ 1200 PRINT
+ 1210 PRINT "    2) ZERO MUST BE SUPPLIED AS THE VALUE"
+ 1220 PRINT "       OF THE SUBSCRIPT AND EXECUTION CONTINUES."
+ 1230 PRINT
+ 1240 PRINT "                   BEGIN TEST."
+ 1250 PRINT
+ 1270 LET A=5001
+ 1280 LET B=-1E-20
+ 1282 FOR I=0 TO 10
+ 1284 LET Z(I)=100+I
+ 1286 NEXT I
+ 1290 PRINT "ABOUT TO EVALUATE Z(-1E-20 ^ 5001), WHERE Z(I) = I + 100."
+ 1310 PRINT
+ 1320 LET C=Z(B^A)
+ 1330 PRINT
+ 1340 PRINT "RESULT OF Z(-1E-20 ^ 5001) = ";C
+ 1350 PRINT
+ 1360 IF ABS(C-100) <= .01 THEN 1400
+ 1370 PRINT "*** TEST FAILED: RESULT <> 100 ***"
+ 1380 GOTO 1440
+ 1400 PRINT "*** TEST PASSED ***"
+ 1440 PRINT
+ 1450 PRINT "                    END TEST."
+ 1460 PRINT
+ 3440 PRINT "END PROGRAM 169"
+ 3450 END
- 320: warning: operation overflow 
- 1320: warning: operation overflow 
', tests/integration.rs:37:13

---- P166 stdout ----
thread 'P166' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n140 DEF FNA(X)=X^2+2*X+1\n150 DEF FNC(X1)=LOG(X1)/LOG(10)\n160 LET P1=3.14159265\n170 LET R(0)=0\n180 LET R(1)=1\n190 FOR I=2 TO 10\n200 LET R(I)=R(I-1)+R(I-2)\n210 NEXT I\n220 LET A1=3.5\n230 LET B1=1.625\n240 LET C1=.815\n250 LET D1=-4.5\n260 LET F=0\n270 IF A1+B1<5.13 THEN 300\n280 LET K$=\" 1ST \"\n290 GOSUB 520\n300 IF -.99>A1-ABS(D1) THEN 330\n310 LET K$=\" 2ND \"\n320 GOSUB 520\n330 IF INT(SQR(ABS(D1)))=2 THEN 360\n340 LET K$=\" 3RD \"\n350 GOSUB 520\n360 IF FNA(A1)+5<=ABS(D1)+A1^3 THEN 390\n370 LET K$=\" 4TH \"\n380 GOSUB 520\n390 IF EXP(A1)+D1>=(A1-.36)^2+D1 THEN 420\n400 LET K$=\" 5TH \"\n410 GOSUB 520\n420 IF TAN(C1)+A1<>ATN(C1)+A1 THEN 450\n430 LET K$=\" 6TH \"\n440 GOSUB 520\n450 IF -FNC(SQR(10^(SIN(P1/3)^2*R(6)))) < (R(5)-R(9))/10-.09 THEN 480\n460 LET K$=\" 7TH \"\n470 GOSUB 520\n480 IF -FNC(SQR(10^(SIN(P1/3)^2*R(6)))) > (R(5)-R(9))/10-.11 THEN 510\n490 LET K$=\" 8TH \"\n500 GOSUB 520\n510 GOTO 580\n520 REM SUBROUTINE TO HANDLE ERRORS\n530 PRINT \"EVALUATION OF THE RELATION BETWEEN THE\";K$;\"PAIR OF\"\n540 PRINT \"EXPRESSIONS FAILED.\"\n550 LET F=F+1\n560 PRINT\n570 RETURN\n580 IF F=0 THEN 610\n590 PRINT \"*** TEST FAILED IN \";F;\" CASE(S)  ***\"\n600 GOTO 620\n610 PRINT \"*** TEST PASSED ***\"\n620 PRINT\n630 PRINT \"                        END TEST.\"\n640 PRINT\n660 PRINT \"SECTION 166.2: NUMERIC EXPRESSIONS AND\"\n670 PRINT \"        THE ON-GOTO-STATEMENT.\"\n680 PRINT\n690 PRINT \"                     BEGIN TEST.\"\n700 PRINT\n710 LET F=0\n720 REM ON-GOTO SHOULD BRANCH TO 1ST, 4TH, AND 3RD BRANCH POINT FOR\n730 REM X = 1, 3, AND 5 RESPECTIVELY.\n740 FOR X=1 TO 5 STEP 2\n750 ON -(X*20*X+(R(8)-5*R(9))*X+SQR(11449))/40 GOTO 870,910,830,790\n760 PRINT \"*** TEST FAILURE: ON GOTO FELL THROUGH FOR X = \";X\n770 LET F=F+1\n780 GOTO 980\n790 REM 4TH ROUTINE\n800 IF X=3 THEN 980\n810 LET K$=\"4TH\"\n820 GOTO 940\n830 REM 3RD ROUTINE\n840 IF X=5 THEN 980\n850 LET K$=\"3RD\"\n860 GOTO 940\n870 REM 1ST ROUTINE\n880 IF X=1 THEN 980\n890 GOTO 940\n910 REM 2ND ROUTINE\n920 LET K$=\"2ND\"\n930 GOTO 940\n940 PRINT \"*** TEST FAILURE: ON-GOTO BRANCHED TO \";K$;\" ROUTINE\"\n950 PRINT \"    FOR X = \";X\n960 PRINT\n970 LET F=F+1\n980 NEXT X\n990 IF F=0 THEN 1020\n1000 PRINT \"*** TEST FAILED IN \";F;\" CASE(S) ***\"\n1010 GOTO 1030\n1020 PRINT \"*** TEST PASSED ***\"\n1030 PRINT\n1040 PRINT \"                        END TEST.\"\n1050 PRINT\n1060 PRINT \"SECTION 166.3: NUMERIC EXPRESSIONS AND\"\n1070 PRINT \"        THE FOR-NEXT-STATEMENT.\"\n1080 PRINT\n1090 PRINT \"                       BEGIN TEST.\"\n1100 PRINT\n1110 REM CORRECT EXECUTION PARAMETERS:\n1120 REM   CTL. VAR.       FROM      T0      STEP    NO. LOOPS\n1130 REM     I0              3        6        1       4\n1140 REM     I1             10        4       -1       7\n1150 REM     I2            228     1000      100       8\n1160 REM     I3              2      -20       -2      12\n1200 LET N1=3\n1210 LET M1=6\n1220 LET N(M1)=10\n1230 LET M(M1)=4\n1240 LET O=-1\n1250 LET K=0\n1260 LET J0=3\n1270 FOR I0=N1 TO M1\n1280 LET J1=10\n1290 FOR I1=N(M1) TO M(M1) STEP O\n1300 LET J2=228\n1310 FOR I2=M1^2+2*M1*M(M1)^2 TO (N(M1)^3-1)+ABS(O) STEP 20*N(M1)/2\n1320 LET J3=2\n1330 FOR I3=ABS(M(M1)-M1) TO M(M1)^2-M1^2 STEP 2*SGN(M(M1)^2-M1^2)\n1340 IF I0<>J0 THEN 1520\n1350 IF I1<>J1 THEN 1520\n1360 IF I2<>J2 THEN 1520\n1370 IF I3<>J3 THEN 1520\n1380 LET K=K+1\n1390 LET M1 = M1 + 1\n1400 LET J3=J3-2\n1410 NEXT I3\n1420 LET M1=6\n1430 LET J2=J2+100\n1440 NEXT I2\n1450 LET J1=J1-1\n1460 NEXT I1\n1470 LET J0=J0+1\n1480 NEXT I0\n1490 IF K<>2688 THEN 1600\n1500 PRINT \"*** TEST PASSED ***\"\n1510 GOTO 1640\n1520 PRINT \"*** TEST FAILED ***\"\n1530 PRINT\n1540 PRINT \"CTL. VAR.\",\"SHOULD BE\",\"ACTUAL\"\n1550 PRINT \"I0\",J0,I0\n1560 PRINT \"I1\",J1,I1\n1570 PRINT \"I2\",J2,I2\n1580 PRINT \"I3\",J3,I3\n1590 GOTO 1640\n1600 PRINT \"*** TEST FAILED ***\"\n1610 PRINT\n1620 PRINT \"INNERMOST LOOP SHOULD HAVE BEEN EXECUTED 2688 TIMES.\"\n1630 PRINT \"ACTUAL COUNT = \";K\n1640 PRINT\n1650 PRINT \"                        END TEST.\"\n1660 PRINT\n1670 PRINT \"END PROGRAM 166.\"\n1680 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 140 DEF FNA(X)=X^2+2*X+1
+ 150 DEF FNC(X1)=LOG(X1)/LOG(10)
+ 160 LET P1=3.14159265
+ 170 LET R(0)=0
+ 180 LET R(1)=1
+ 190 FOR I=2 TO 10
+ 200 LET R(I)=R(I-1)+R(I-2)
+ 210 NEXT I
+ 220 LET A1=3.5
+ 230 LET B1=1.625
+ 240 LET C1=.815
+ 250 LET D1=-4.5
+ 260 LET F=0
+ 270 IF A1+B1<5.13 THEN 300
+ 280 LET K$=" 1ST "
+ 290 GOSUB 520
+ 300 IF -.99>A1-ABS(D1) THEN 330
+ 310 LET K$=" 2ND "
+ 320 GOSUB 520
+ 330 IF INT(SQR(ABS(D1)))=2 THEN 360
+ 340 LET K$=" 3RD "
+ 350 GOSUB 520
+ 360 IF FNA(A1)+5<=ABS(D1)+A1^3 THEN 390
+ 370 LET K$=" 4TH "
+ 380 GOSUB 520
+ 390 IF EXP(A1)+D1>=(A1-.36)^2+D1 THEN 420
+ 400 LET K$=" 5TH "
+ 410 GOSUB 520
+ 420 IF TAN(C1)+A1<>ATN(C1)+A1 THEN 450
+ 430 LET K$=" 6TH "
+ 440 GOSUB 520
+ 450 IF -FNC(SQR(10^(SIN(P1/3)^2*R(6)))) < (R(5)-R(9))/10-.09 THEN 480
+ 460 LET K$=" 7TH "
+ 470 GOSUB 520
+ 480 IF -FNC(SQR(10^(SIN(P1/3)^2*R(6)))) > (R(5)-R(9))/10-.11 THEN 510
+ 490 LET K$=" 8TH "
+ 500 GOSUB 520
+ 510 GOTO 580
+ 520 REM SUBROUTINE TO HANDLE ERRORS
+ 530 PRINT "EVALUATION OF THE RELATION BETWEEN THE";K$;"PAIR OF"
+ 540 PRINT "EXPRESSIONS FAILED."
+ 550 LET F=F+1
+ 560 PRINT
+ 570 RETURN
+ 580 IF F=0 THEN 610
+ 590 PRINT "*** TEST FAILED IN ";F;" CASE(S)  ***"
+ 600 GOTO 620
+ 610 PRINT "*** TEST PASSED ***"
+ 620 PRINT
+ 630 PRINT "                        END TEST."
+ 640 PRINT
+ 660 PRINT "SECTION 166.2: NUMERIC EXPRESSIONS AND"
+ 670 PRINT "        THE ON-GOTO-STATEMENT."
+ 680 PRINT
+ 690 PRINT "                     BEGIN TEST."
+ 700 PRINT
+ 710 LET F=0
+ 720 REM ON-GOTO SHOULD BRANCH TO 1ST, 4TH, AND 3RD BRANCH POINT FOR
+ 730 REM X = 1, 3, AND 5 RESPECTIVELY.
+ 740 FOR X=1 TO 5 STEP 2
+ 750 ON -(X*20*X+(R(8)-5*R(9))*X+SQR(11449))/40 GOTO 870,910,830,790
+ 760 PRINT "*** TEST FAILURE: ON GOTO FELL THROUGH FOR X = ";X
+ 770 LET F=F+1
+ 780 GOTO 980
+ 790 REM 4TH ROUTINE
+ 800 IF X=3 THEN 980
+ 810 LET K$="4TH"
+ 820 GOTO 940
+ 830 REM 3RD ROUTINE
+ 840 IF X=5 THEN 980
+ 850 LET K$="3RD"
+ 860 GOTO 940
+ 870 REM 1ST ROUTINE
+ 880 IF X=1 THEN 980
+ 890 GOTO 940
+ 910 REM 2ND ROUTINE
+ 920 LET K$="2ND"
+ 930 GOTO 940
+ 940 PRINT "*** TEST FAILURE: ON-GOTO BRANCHED TO ";K$;" ROUTINE"
+ 950 PRINT "    FOR X = ";X
+ 960 PRINT
+ 970 LET F=F+1
+ 980 NEXT X
+ 990 IF F=0 THEN 1020
+ 1000 PRINT "*** TEST FAILED IN ";F;" CASE(S) ***"
+ 1010 GOTO 1030
+ 1020 PRINT "*** TEST PASSED ***"
+ 1030 PRINT
+ 1040 PRINT "                        END TEST."
+ 1050 PRINT
+ 1060 PRINT "SECTION 166.3: NUMERIC EXPRESSIONS AND"
+ 1070 PRINT "        THE FOR-NEXT-STATEMENT."
+ 1080 PRINT
+ 1090 PRINT "                       BEGIN TEST."
+ 1100 PRINT
+ 1110 REM CORRECT EXECUTION PARAMETERS:
+ 1120 REM   CTL. VAR.       FROM      T0      STEP    NO. LOOPS
+ 1130 REM     I0              3        6        1       4
+ 1140 REM     I1             10        4       -1       7
+ 1150 REM     I2            228     1000      100       8
+ 1160 REM     I3              2      -20       -2      12
+ 1200 LET N1=3
+ 1210 LET M1=6
+ 1220 LET N(M1)=10
+ 1230 LET M(M1)=4
+ 1240 LET O=-1
+ 1250 LET K=0
+ 1260 LET J0=3
+ 1270 FOR I0=N1 TO M1
+ 1280 LET J1=10
+ 1290 FOR I1=N(M1) TO M(M1) STEP O
+ 1300 LET J2=228
+ 1310 FOR I2=M1^2+2*M1*M(M1)^2 TO (N(M1)^3-1)+ABS(O) STEP 20*N(M1)/2
+ 1320 LET J3=2
+ 1330 FOR I3=ABS(M(M1)-M1) TO M(M1)^2-M1^2 STEP 2*SGN(M(M1)^2-M1^2)
+ 1340 IF I0<>J0 THEN 1520
+ 1350 IF I1<>J1 THEN 1520
+ 1360 IF I2<>J2 THEN 1520
+ 1370 IF I3<>J3 THEN 1520
+ 1380 LET K=K+1
+ 1390 LET M1 = M1 + 1
+ 1400 LET J3=J3-2
+ 1410 NEXT I3
+ 1420 LET M1=6
+ 1430 LET J2=J2+100
+ 1440 NEXT I2
+ 1450 LET J1=J1-1
+ 1460 NEXT I1
+ 1470 LET J0=J0+1
+ 1480 NEXT I0
+ 1490 IF K<>2688 THEN 1600
+ 1500 PRINT "*** TEST PASSED ***"
+ 1510 GOTO 1640
+ 1520 PRINT "*** TEST FAILED ***"
+ 1530 PRINT
+ 1540 PRINT "CTL. VAR.","SHOULD BE","ACTUAL"
+ 1550 PRINT "I0",J0,I0
+ 1560 PRINT "I1",J1,I1
+ 1570 PRINT "I2",J2,I2
+ 1580 PRINT "I3",J3,I3
+ 1590 GOTO 1640
+ 1600 PRINT "*** TEST FAILED ***"
+ 1610 PRINT
+ 1620 PRINT "INNERMOST LOOP SHOULD HAVE BEEN EXECUTED 2688 TIMES."
+ 1630 PRINT "ACTUAL COUNT = ";K
+ 1640 PRINT
+ 1650 PRINT "                        END TEST."
+ 1660 PRINT
+ 1670 PRINT "END PROGRAM 166."
+ 1680 END
+ 
', tests/integration.rs:37:13

---- P172 stdout ----
thread 'P172' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n200 PRINT SQR(A)\n230 PRINT\n240 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\"\n250 PRINT\n260 PRINT \"                END TEST.\"\n270 PRINT\n280 PRINT \"END PROGRAM 172.\"\n290 END\n"`,
 right: `"200: error: function domain error SQR(-2)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 200 PRINT SQR(A)
+ 230 PRINT
+ 240 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***"
+ 250 PRINT
+ 260 PRINT "                END TEST."
+ 270 PRINT
+ 280 PRINT "END PROGRAM 172."
+ 290 END
- 200: error: function domain error SQR(-2)
', tests/integration.rs:37:13

---- P168 stdout ----
thread 'P168' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n290 FOR I=0 TO 10\n300 LET Z(I)=I+100\n310 NEXT I\n320 LET A=9999\n330 PRINT \"ABOUT TO EVALUATE Z(9999^9999), WHERE Z(I) = I + 100.\"\n340 PRINT\n390 LET C=Z(A^A)\n400 PRINT\n410 PRINT \"RESULT OF Z(9999^9999) = \";C\n420 PRINT\n430 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\"\n440 PRINT\n450 PRINT \"                    END TEST.\"\n460 PRINT\n470 PRINT \"END PROGRAM 168\"\n480 END\n"`,
 right: `"390: warning: operation overflow \n390: error: index out of range Z(INF)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 290 FOR I=0 TO 10
+ 300 LET Z(I)=I+100
+ 310 NEXT I
+ 320 LET A=9999
+ 330 PRINT "ABOUT TO EVALUATE Z(9999^9999), WHERE Z(I) = I + 100."
+ 340 PRINT
+ 390 LET C=Z(A^A)
+ 400 PRINT
+ 410 PRINT "RESULT OF Z(9999^9999) = ";C
+ 420 PRINT
+ 430 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***"
+ 440 PRINT
+ 450 PRINT "                    END TEST."
+ 460 PRINT
+ 470 PRINT "END PROGRAM 168"
+ 480 END
- 390: warning: operation overflow 
- 390: error: index out of range Z(INF)
', tests/integration.rs:37:13

---- P170 stdout ----
thread 'P170' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n170 FOR I=0 TO 10\n180 LET Z(I)=I+100\n190 NEXT I\n200 PRINT \"ABOUT TO EVALUATE Z((-2) ^ 3.00001),\"\n210 PRINT \"WHERE Z(I) = I + 100\"\n260 PRINT\n270 LET B=3.00001\n280 LET A=-2\n290 LET C=Z(A^B)\n300 PRINT\n310 PRINT \"RESULT OF Z((-2) ^ 3.00001) = \";C\n320 PRINT\n330 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\"\n340 PRINT\n350 PRINT \"                END TEST\"\n360 PRINT\n370 PRINT \"END PROGRAM 170\"\n380 END\n"`,
 right: `"290: error: negative value raised to non-integral value (-2 ^ 3.00001)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 170 FOR I=0 TO 10
+ 180 LET Z(I)=I+100
+ 190 NEXT I
+ 200 PRINT "ABOUT TO EVALUATE Z((-2) ^ 3.00001),"
+ 210 PRINT "WHERE Z(I) = I + 100"
+ 260 PRINT
+ 270 LET B=3.00001
+ 280 LET A=-2
+ 290 LET C=Z(A^B)
+ 300 PRINT
+ 310 PRINT "RESULT OF Z((-2) ^ 3.00001) = ";C
+ 320 PRINT
+ 330 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***"
+ 340 PRINT
+ 350 PRINT "                END TEST"
+ 360 PRINT
+ 370 PRINT "END PROGRAM 170"
+ 380 END
- 290: error: negative value raised to non-integral value (-2 ^ 3.00001)
', tests/integration.rs:37:13

---- P174 stdout ----
thread 'P174' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n310 PRINT C^B, C/A, A^C, EXP(D)\n320 PRINT\n330 PRINT \"IF FOUR EXCEPTIONS REPORTED AND NEGATIVE, NEGATIVE,\"\n340 PRINT \"   POSITIVE, AND POSITIVE INFINITY PRINTED, THEN\"\n350 PRINT \"*** TEST PASSED ***\"\n360 PRINT\n370 PRINT \"                    END TEST.\"\n380 PRINT\n390 PRINT \"SECTION 174.2: EXCEPTIONAL EXPRESSIONS AS TAB-ITEMS.\"\n400 PRINT\n410 PRINT \"THIS SECTION TESTS THE EFFECT OF OVERFLOW IN A TAB-ITEM.\"\n420 PRINT\n430 PRINT \"TO PASS THIS TEST:\"\n440 PRINT\n450 PRINT \"    1) THE OVERFLOW EXCEPTION MUST BE REPORTED, AND\"\n460 PRINT\n470 PRINT \"    2) EXECUTION CONTINUES, WITH THE TAB EVALUATING TO\"\n480 PRINT \"       SOME ARBITRARY PRINT POSITION.\"\n490 PRINT\n500 PRINT \"                    BEGIN TEST.\"\n510 PRINT\n520 PRINT \"ABOUT TO EXECUTE:\"\n530 PRINT \"   PRINT TAB(9^(9^9));X$\"\n540 PRINT \"   (WHERE X$ = \'X\')\"\n550 PRINT\n560 PRINT \"0000000001111111111222222222233333333334444444444\";\n570 PRINT \"55555555556666666666777\"\n580 PRINT \"1234567890123456789012345678901234567890123456789\";\n590 PRINT \"01234567890123456789012\"\n600 LET X$=\"X\"\n610 LET D=9\n620 PRINT TAB(D^(D^D));X$\n630 PRINT\n640 PRINT \"IF OVERFLOW EXCEPTION REPORTED, AND \'X\' APPEARED FOLLOWING\"\n650 PRINT \"   NUMBERED LINES, THEN\"\n660 PRINT \"*** TEST PASSED ***\"\n670 PRINT\n680 PRINT \"                    END TEST.\"\n690 PRINT\n700 PRINT \"END PROGRAM 174\"\n710 END\n"`,
 right: `"310: warning: operation overflow \n310: warning: division by zero \n310: warning: zero raised to negative value (0 ^ -1.E-33)\n310: warning: operation overflow EXP(1.E+20)\n620: warning: operation overflow \n620: warning: invalid TAB argument (-2.14748E+9)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 310 PRINT C^B, C/A, A^C, EXP(D)
+ 320 PRINT
+ 330 PRINT "IF FOUR EXCEPTIONS REPORTED AND NEGATIVE, NEGATIVE,"
+ 340 PRINT "   POSITIVE, AND POSITIVE INFINITY PRINTED, THEN"
+ 350 PRINT "*** TEST PASSED ***"
+ 360 PRINT
+ 370 PRINT "                    END TEST."
+ 380 PRINT
+ 390 PRINT "SECTION 174.2: EXCEPTIONAL EXPRESSIONS AS TAB-ITEMS."
+ 400 PRINT
+ 410 PRINT "THIS SECTION TESTS THE EFFECT OF OVERFLOW IN A TAB-ITEM."
+ 420 PRINT
+ 430 PRINT "TO PASS THIS TEST:"
+ 440 PRINT
+ 450 PRINT "    1) THE OVERFLOW EXCEPTION MUST BE REPORTED, AND"
+ 460 PRINT
+ 470 PRINT "    2) EXECUTION CONTINUES, WITH THE TAB EVALUATING TO"
+ 480 PRINT "       SOME ARBITRARY PRINT POSITION."
+ 490 PRINT
+ 500 PRINT "                    BEGIN TEST."
+ 510 PRINT
+ 520 PRINT "ABOUT TO EXECUTE:"
+ 530 PRINT "   PRINT TAB(9^(9^9));X$"
+ 540 PRINT "   (WHERE X$ = 'X')"
+ 550 PRINT
+ 560 PRINT "0000000001111111111222222222233333333334444444444";
+ 570 PRINT "55555555556666666666777"
+ 580 PRINT "1234567890123456789012345678901234567890123456789";
+ 590 PRINT "01234567890123456789012"
+ 600 LET X$="X"
+ 610 LET D=9
+ 620 PRINT TAB(D^(D^D));X$
+ 630 PRINT
+ 640 PRINT "IF OVERFLOW EXCEPTION REPORTED, AND 'X' APPEARED FOLLOWING"
+ 650 PRINT "   NUMBERED LINES, THEN"
+ 660 PRINT "*** TEST PASSED ***"
+ 670 PRINT
+ 680 PRINT "                    END TEST."
+ 690 PRINT
+ 700 PRINT "END PROGRAM 174"
+ 710 END
- 310: warning: operation overflow 
- 310: warning: division by zero 
- 310: warning: zero raised to negative value (0 ^ -1.E-33)
- 310: warning: operation overflow EXP(1.E+20)
- 620: warning: operation overflow 
- 620: warning: invalid TAB argument (-2.14748E+9)
', tests/integration.rs:37:13

---- P173 stdout ----
thread 'P173' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 173: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN TAB-ITEM.\n    ANSI STANDARD 7.5, 12.2\n\nSECTION 173.1: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN TAB-ITEM.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) EXECUTION MUST TERMINATE\n\n               BEGIN TEST.\n\nABOUT TO EXECUTE:\n   PRINT A$;TAB((-3) ^ 1.99999);B$\n   (WHERE A$ = \'111\' AND B$ = \'222\')\n\n111222\n\n*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\n\n                END TEST.\n\nEND PROGRAM 173.\n"`,
 right: `"PROGRAM FILE 173: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN TAB-ITEM.\n    ANSI STANDARD 7.5, 12.2\n\nSECTION 173.1: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN TAB-ITEM.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) EXECUTION MUST TERMINATE\n\n               BEGIN TEST.\n\nABOUT TO EXECUTE:\n   PRINT A$;TAB((-3) ^ 1.99999);B$\n   (WHERE A$ = \'111\' AND B$ = \'222\')\n\n111\n"`: 
Diff:
+ 111222
+ 
+ *** TEST FAILED: EXECUTION DID NOT TERMINATE. ***
+ 
+                 END TEST.
+ 
+ END PROGRAM 173.
- 111
', tests/integration.rs:22:13

---- P175 stdout ----
thread 'P175' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n280 PRINT A^B, (1/A)^(-B), EXP(A)\n290 PRINT\n300 PRINT \"IF THREE ZEROS PRINTED, THEN\"\n310 PRINT \"*** TEST PASSED ***\"\n320 PRINT\n330 PRINT \"                    END TEST.\"\n340 PRINT\n350 PRINT \"SECTION 175.2: NUMERIC UNDERFLOW IN TAB-ITEMS.\"\n360 PRINT\n370 PRINT \"THIS SECTION TESTS THE EFFECT OF UNDERFLOW IN A TAB-ITEM.\"\n380 PRINT\n390 PRINT \"TO PASS THIS TEST:\"\n400 PRINT\n410 PRINT \"    1) AN UNDERFLOW EXCEPTION MAY BE REPORTED\"\n420 PRINT \"       (NOT MANDATORY),\"\n430 PRINT\n440 PRINT \"    2) EXECUTION CONTINUES, WITH ZERO SUPPLIED AS THE\"\n450 PRINT \"       VALUE OF THE TAB ARGUMENT,\"\n460 PRINT\n470 PRINT \"    3) A TAB EXCEPTION MUST BE REPORTED, AND A VALUE OF\"\n480 PRINT \"       ONE SUPPLIED AS THE TAB ARGUMENT.\"\n490 PRINT\n500 PRINT \"                    BEGIN TEST.\"\n510 PRINT\n520 PRINT \"ABOUT TO EXECUTE:\"\n530 PRINT \"   PRINT A$;TAB(1E-33 ^ 3333);B$\"\n540 PRINT \"   (WHERE A$ = \'AAA\' AND B$ = \'BBB\')\"\n550 PRINT\n560 PRINT \"0000000001111111111222222222233333333334444444444\";\n570 PRINT \"55555555556666666666777\"\n580 PRINT \"1234567890123456789012345678901234567890123456789\";\n590 PRINT \"01234567890123456789012\"\n600 LET A$=\"AAA\"\n610 LET B$=\"BBB\"\n620 LET E=1E-33\n630 LET F=3333\n640 PRINT A$;TAB(E^F);B$\n650 PRINT\n660 PRINT \"IF TAB-ARGUMENT EXCEPTION REPORTED, AND \'AAA\' APPEARED IN\"\n670 PRINT \"   COL. 1-3, AND \'BBB\' IN COL. 1-3 ON A LATER LINE, THEN\"\n680 PRINT \"*** TEST PASSED ***\"\n690 PRINT\n700 PRINT \"                    END TEST.\"\n710 PRINT\n720 PRINT \"END PROGRAM 175\"\n730 END\n"`,
 right: `"280: warning: operation overflow \n280: warning: operation overflow \n280: warning: operation overflow EXP(-1.E+33)\n640: warning: operation overflow \n640: warning: invalid TAB argument (0)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 280 PRINT A^B, (1/A)^(-B), EXP(A)
+ 290 PRINT
+ 300 PRINT "IF THREE ZEROS PRINTED, THEN"
+ 310 PRINT "*** TEST PASSED ***"
+ 320 PRINT
+ 330 PRINT "                    END TEST."
+ 340 PRINT
+ 350 PRINT "SECTION 175.2: NUMERIC UNDERFLOW IN TAB-ITEMS."
+ 360 PRINT
+ 370 PRINT "THIS SECTION TESTS THE EFFECT OF UNDERFLOW IN A TAB-ITEM."
+ 380 PRINT
+ 390 PRINT "TO PASS THIS TEST:"
+ 400 PRINT
+ 410 PRINT "    1) AN UNDERFLOW EXCEPTION MAY BE REPORTED"
+ 420 PRINT "       (NOT MANDATORY),"
+ 430 PRINT
+ 440 PRINT "    2) EXECUTION CONTINUES, WITH ZERO SUPPLIED AS THE"
+ 450 PRINT "       VALUE OF THE TAB ARGUMENT,"
+ 460 PRINT
+ 470 PRINT "    3) A TAB EXCEPTION MUST BE REPORTED, AND A VALUE OF"
+ 480 PRINT "       ONE SUPPLIED AS THE TAB ARGUMENT."
+ 490 PRINT
+ 500 PRINT "                    BEGIN TEST."
+ 510 PRINT
+ 520 PRINT "ABOUT TO EXECUTE:"
+ 530 PRINT "   PRINT A$;TAB(1E-33 ^ 3333);B$"
+ 540 PRINT "   (WHERE A$ = 'AAA' AND B$ = 'BBB')"
+ 550 PRINT
+ 560 PRINT "0000000001111111111222222222233333333334444444444";
+ 570 PRINT "55555555556666666666777"
+ 580 PRINT "1234567890123456789012345678901234567890123456789";
+ 590 PRINT "01234567890123456789012"
+ 600 LET A$="AAA"
+ 610 LET B$="BBB"
+ 620 LET E=1E-33
+ 630 LET F=3333
+ 640 PRINT A$;TAB(E^F);B$
+ 650 PRINT
+ 660 PRINT "IF TAB-ARGUMENT EXCEPTION REPORTED, AND 'AAA' APPEARED IN"
+ 670 PRINT "   COL. 1-3, AND 'BBB' IN COL. 1-3 ON A LATER LINE, THEN"
+ 680 PRINT "*** TEST PASSED ***"
+ 690 PRINT
+ 700 PRINT "                    END TEST."
+ 710 PRINT
+ 720 PRINT "END PROGRAM 175"
+ 730 END
- 280: warning: operation overflow 
- 280: warning: operation overflow 
- 280: warning: operation overflow EXP(-1.E+33)
- 640: warning: operation overflow 
- 640: warning: invalid TAB argument (0)
', tests/integration.rs:37:13

---- P179 stdout ----
thread 'P179' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 ON LOG(A) GOTO 220,230,240,250,260\n212 PRINT \"CONTROL FELL THROUGH ON-GOTO.\"\n215 GOTO 300\n220 LET I=1\n225 GOTO 290\n230 LET I=2\n235 GOTO 290\n240 LET I=3\n245 GOTO 290\n250 LET I=4\n255 GOTO 290\n260 LET I=5\n265 GOTO 290\n290 PRINT \"ON-GOTO JUMPED TO LINE-NUMBER #\";I;\" IN THE LIST.\"\n300 PRINT\n1270 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\"\n1280 PRINT\n1290 PRINT \"                END TEST.\"\n1300 PRINT\n1310 PRINT \"END PROGRAM 179.\"\n1320 END\n"`,
 right: `"210: error: function domain error LOG(0)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 ON LOG(A) GOTO 220,230,240,250,260
+ 212 PRINT "CONTROL FELL THROUGH ON-GOTO."
+ 215 GOTO 300
+ 220 LET I=1
+ 225 GOTO 290
+ 230 LET I=2
+ 235 GOTO 290
+ 240 LET I=3
+ 245 GOTO 290
+ 250 LET I=4
+ 255 GOTO 290
+ 260 LET I=5
+ 265 GOTO 290
+ 290 PRINT "ON-GOTO JUMPED TO LINE-NUMBER #";I;" IN THE LIST."
+ 300 PRINT
+ 1270 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***"
+ 1280 PRINT
+ 1290 PRINT "                END TEST."
+ 1300 PRINT
+ 1310 PRINT "END PROGRAM 179."
+ 1320 END
- 210: error: function domain error LOG(0)
', tests/integration.rs:37:13

---- P180 stdout ----
thread 'P180' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 ON C/A GOTO 280,300,320\n260 LET I=0\n270 GOTO 340\n280 LET I=1\n290 GOTO 340\n300 LET I=2\n310 GOTO 340\n320 LET I=3\n330 GOTO 340\n340 PRINT\n350 PRINT \"    PATH TAKEN FOR CONTROL-EXPRESSION = \";I\n360 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE ***\"\n370 PRINT\n380 PRINT \"                    END TEST.\"\n390 PRINT\n400 PRINT \"END PROGRAM 180\"\n410 END\n"`,
 right: `"250: warning: division by zero \n250: error: index out of range \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 ON C/A GOTO 280,300,320
+ 260 LET I=0
+ 270 GOTO 340
+ 280 LET I=1
+ 290 GOTO 340
+ 300 LET I=2
+ 310 GOTO 340
+ 320 LET I=3
+ 330 GOTO 340
+ 340 PRINT
+ 350 PRINT "    PATH TAKEN FOR CONTROL-EXPRESSION = ";I
+ 360 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE ***"
+ 370 PRINT
+ 380 PRINT "                    END TEST."
+ 390 PRINT
+ 400 PRINT "END PROGRAM 180"
+ 410 END
- 250: warning: division by zero 
- 250: error: index out of range 
', tests/integration.rs:37:13

---- P177 stdout ----
thread 'P177' panicked at 'assertion failed: `(left == right)`
  left: `""`,
 right: `"290: warning: operation overflow \n290: warning: zero raised to negative value (0 ^ -1.E-33)\n"`: 
Diff:
- 290: warning: operation overflow 
- 290: warning: zero raised to negative value (0 ^ -1.E-33)
- 
', tests/integration.rs:28:13

---- P163 stdout ----
thread 'P163' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n210 LET A=FNA(1)\n220 PRINT \"PROCESSOR HAS EVALUATED FNA(1) = \";A\n230 PRINT\n240 PRINT \"                             END TEST.\"\n250 PRINT\n260 PRINT \"END PROGRAM 163\"\n270 END\n"`,
 right: `"210: error: undefined function FNA\n LET A=FNA(1)\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 210 LET A=FNA(1)
+ 220 PRINT "PROCESSOR HAS EVALUATED FNA(1) = ";A
+ 230 PRINT
+ 240 PRINT "                             END TEST."
+ 250 PRINT
+ 260 PRINT "END PROGRAM 163"
+ 270 END
- 210: error: undefined function FNA
-  LET A=FNA(1)
-        ^
', tests/integration.rs:37:13

---- P182 stdout ----
thread 'P182' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n190 FOR I= A^B TO 9\n200 LET X=I\n210 GOTO 220\n215 NEXT I\n220 PRINT \"I WAS INITIALIZED TO:\";X\n240 PRINT\n250 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\"\n260 PRINT\n270 PRINT \"                 END TEST.\"\n280 PRINT\n290 PRINT \"END PROGRAM 182.\"\n300 END\n"`,
 right: `"190: error: negative value raised to non-integral value (-2 ^ 1.E-33)\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 190 FOR I= A^B TO 9
+ 200 LET X=I
+ 210 GOTO 220
+ 215 NEXT I
+ 220 PRINT "I WAS INITIALIZED TO:";X
+ 240 PRINT
+ 250 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***"
+ 260 PRINT
+ 270 PRINT "                 END TEST."
+ 280 PRINT
+ 290 PRINT "END PROGRAM 182."
+ 300 END
- 190: error: negative value raised to non-integral value (-2 ^ 1.E-33)
', tests/integration.rs:37:13

---- P176 stdout ----
thread 'P176' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 176: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN IF-STATEMENT.\n    ANSI STANDARD 7.5, 10.2\n\nSECTION 176.1: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN IF-STATEMENT.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) EXECUTION MUST TERMINATE\n\n                BEGIN TEST.\n\nABOUT TO EXECUTE:\n   IF (-3) ^ 3.00001 < 0 ...\n\nIF-STATEMENT TESTED FALSE.\n\n*** TEST FAILED: EXECUTION DID NOT TERMINATE. ***\n\n                END TEST.\n\nEND PROGRAM 176.\n"`,
 right: `"PROGRAM FILE 176: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN IF-STATEMENT.\n    ANSI STANDARD 7.5, 10.2\n\nSECTION 176.1: EXCEPTION - NEGATIVE QUANTITY RAISED TO\n        A NON-INTEGRAL POWER IN IF-STATEMENT.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) EXECUTION MUST TERMINATE\n\n                BEGIN TEST.\n\nABOUT TO EXECUTE:\n   IF (-3) ^ 3.00001 < 0 ...\n\n"`: 
Diff:
+ IF-STATEMENT TESTED FALSE.
+ 
+ *** TEST FAILED: EXECUTION DID NOT TERMINATE. ***
+ 
+                 END TEST.
+ 
+ END PROGRAM 176.
', tests/integration.rs:22:13

---- P181 stdout ----
thread 'P181' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n300 ON EXP(A) GOTO 330,350,370\n310 LET I=0\n320 GOTO 390\n330 LET I=1\n340 GOTO 390\n350 LET I=2\n360 GOTO 390\n370 LET I=3\n380 GOTO 390\n390 PRINT\n400 PRINT \"    PATH TAKEN FOR CONTROL-EXPRESSION = \";I\n405 PRINT\n410 PRINT \"*** TEST FAILED: EXECUTION DID NOT TERMINATE ***\"\n420 PRINT\n430 PRINT \"                    END TEST.\"\n440 PRINT\n450 PRINT \"END PROGRAM 181\"\n460 END\n"`,
 right: `"300: warning: operation overflow EXP(-1.E+11)\n300: error: index out of range \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 300 ON EXP(A) GOTO 330,350,370
+ 310 LET I=0
+ 320 GOTO 390
+ 330 LET I=1
+ 340 GOTO 390
+ 350 LET I=2
+ 360 GOTO 390
+ 370 LET I=3
+ 380 GOTO 390
+ 390 PRINT
+ 400 PRINT "    PATH TAKEN FOR CONTROL-EXPRESSION = ";I
+ 405 PRINT
+ 410 PRINT "*** TEST FAILED: EXECUTION DID NOT TERMINATE ***"
+ 420 PRINT
+ 430 PRINT "                    END TEST."
+ 440 PRINT
+ 450 PRINT "END PROGRAM 181"
+ 460 END
- 300: warning: operation overflow EXP(-1.E+11)
- 300: error: index out of range 
', tests/integration.rs:37:13

---- P186 stdout ----
thread 'P186' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n130         LET         I           =        -    3     +  1    +   2\n140     GO                            TO            160\n150 LET I=I+1\n160                       IF     I     =      1        THEN          180\n170      LET      I     =     +       2\n180 IF I=2 THEN 210\n190 PRINT \"***  TEST FAILED  ***\"\n200 GOTO 220\n210 PRINT \"***  TEST PASSED  ***\"\n220 PRINT\n230 PRINT \"                   END TEST.\"\n240 PRINT\n250 PRINT \"END PROGRAM 186\"\n260 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 130         LET         I           =        -    3     +  1    +   2
+ 140     GO                            TO            160
+ 150 LET I=I+1
+ 160                       IF     I     =      1        THEN          180
+ 170      LET      I     =     +       2
+ 180 IF I=2 THEN 210
+ 190 PRINT "***  TEST FAILED  ***"
+ 200 GOTO 220
+ 210 PRINT "***  TEST PASSED  ***"
+ 220 PRINT
+ 230 PRINT "                   END TEST."
+ 240 PRINT
+ 250 PRINT "END PROGRAM 186"
+ 260 END
+ 
', tests/integration.rs:37:13

---- P187 stdout ----
thread 'P187' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n 220 PRINT \"THE PROCESSOR HAS EXECUTED A LINE BEGINNING WITH A SPACE.\"\n230 PRINT\n240 PRINT \"                                 END TEST.\"\n250 PRINT\n260 PRINT \"END PROGRAM 187\"\n270 END\n"`,
 right: `"P187.BAS:23: error: invalid line number \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+  220 PRINT "THE PROCESSOR HAS EXECUTED A LINE BEGINNING WITH A SPACE."
+ 230 PRINT
+ 240 PRINT "                                 END TEST."
+ 250 PRINT
+ 260 PRINT "END PROGRAM 187"
+ 270 END
- P187.BAS:23: error: invalid line number 
', tests/integration.rs:37:13

---- P178 stdout ----
thread 'P178' panicked at 'assertion failed: `(left == right)`
  left: `""`,
 right: `"280: warning: operation overflow \n"`: 
Diff:
- 280: warning: operation overflow 
- 
', tests/integration.rs:28:13

---- P183 stdout ----
thread 'P183' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n360 FOR I = ATN(C/Z) TO Z\n370 LET X=X+1\n380 PRINT X,I,J\n390 IF ABS(1-(I/J)) > .01 THEN 530\n400 LET J=J+1\n410 NEXT I\n420 PRINT \"EXITING LOOP.\"\n430 LET J=.4293037\n435 PRINT \" \",I,J\n440 IF ABS(1-(I/J)) > .01 THEN 530\n450 IF X=2 THEN 490\n460 PRINT\n470 PRINT \"NO. TIMES THROUGH LOOP SHOULD BE 2, ACTUALLY =\";X\n480 GOTO 550\n490 PRINT\n500 PRINT \"IF ZERO-DIVIDE  REPORTED, THEN\"\n510 PRINT \"*** TEST PASSED ***\"\n520 GOTO 570\n530 PRINT\n540 PRINT \"CONTROL-VARIABLE SHOULD BE\";J;\" ACTUALLY =\";I\n550 PRINT\n560 PRINT \"***  TEST FAILED  ***\"\n570 PRINT\n580 PRINT \"                      END TEST.\"\n590 PRINT\n600 PRINT \"END PROGRAM 183\"\n610 END\n"`,
 right: `"360: warning: division by zero \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 360 FOR I = ATN(C/Z) TO Z
+ 370 LET X=X+1
+ 380 PRINT X,I,J
+ 390 IF ABS(1-(I/J)) > .01 THEN 530
+ 400 LET J=J+1
+ 410 NEXT I
+ 420 PRINT "EXITING LOOP."
+ 430 LET J=.4293037
+ 435 PRINT " ",I,J
+ 440 IF ABS(1-(I/J)) > .01 THEN 530
+ 450 IF X=2 THEN 490
+ 460 PRINT
+ 470 PRINT "NO. TIMES THROUGH LOOP SHOULD BE 2, ACTUALLY =";X
+ 480 GOTO 550
+ 490 PRINT
+ 500 PRINT "IF ZERO-DIVIDE  REPORTED, THEN"
+ 510 PRINT "*** TEST PASSED ***"
+ 520 GOTO 570
+ 530 PRINT
+ 540 PRINT "CONTROL-VARIABLE SHOULD BE";J;" ACTUALLY =";I
+ 550 PRINT
+ 560 PRINT "***  TEST FAILED  ***"
+ 570 PRINT
+ 580 PRINT "                      END TEST."
+ 590 PRINT
+ 600 PRINT "END PROGRAM 183"
+ 610 END
- 360: warning: division by zero 
', tests/integration.rs:37:13

---- P184 stdout ----
thread 'P184' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n310 FOR I = .1^C TO 1E-36 STEP 3E-37\n320 LET X=X+1\n330 PRINT X,I,J\n340 IF J<>0 THEN 370\n350 IF I=0 THEN 380\n360 GOTO 510\n370 IF ABS(1-(I/J)) > .01 THEN 510\n380 LET J=J+3E-37\n390 NEXT I\n400 PRINT \"EXITING LOOP.\"\n410 LET J=12E-37\n420 PRINT \" \",I,J\n430 IF ABS(1-(I/J)) > .01 THEN 510\n440 IF X=4 THEN 480\n450 PRINT\n460 PRINT \"NO. TIMES THROUGH LOOP SHOULD BE 4, ACTUALLY =\";X\n470 GOTO 530\n480 PRINT\n490 PRINT \"*** TEST PASSED ***\"\n500 GOTO 550\n510 PRINT\n520 PRINT \"CONTROL-VARIABLE SHOULD BE \";J;\" ACTUALLY = \";I\n530 PRINT\n540 PRINT \"***  TEST FAILED  ***\"\n550 PRINT\n560 PRINT \"                    END TEST.\"\n570 PRINT\n580 PRINT \"END PROGRAM 184\"\n590 END\n"`,
 right: `"310: warning: operation overflow \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 310 FOR I = .1^C TO 1E-36 STEP 3E-37
+ 320 LET X=X+1
+ 330 PRINT X,I,J
+ 340 IF J<>0 THEN 370
+ 350 IF I=0 THEN 380
+ 360 GOTO 510
+ 370 IF ABS(1-(I/J)) > .01 THEN 510
+ 380 LET J=J+3E-37
+ 390 NEXT I
+ 400 PRINT "EXITING LOOP."
+ 410 LET J=12E-37
+ 420 PRINT " ",I,J
+ 430 IF ABS(1-(I/J)) > .01 THEN 510
+ 440 IF X=4 THEN 480
+ 450 PRINT
+ 460 PRINT "NO. TIMES THROUGH LOOP SHOULD BE 4, ACTUALLY =";X
+ 470 GOTO 530
+ 480 PRINT
+ 490 PRINT "*** TEST PASSED ***"
+ 500 GOTO 550
+ 510 PRINT
+ 520 PRINT "CONTROL-VARIABLE SHOULD BE ";J;" ACTUALLY = ";I
+ 530 PRINT
+ 540 PRINT "***  TEST FAILED  ***"
+ 550 PRINT
+ 560 PRINT "                    END TEST."
+ 570 PRINT
+ 580 PRINT "END PROGRAM 184"
+ 590 END
- 310: warning: operation overflow 
', tests/integration.rs:37:13

---- P188 stdout ----
thread 'P188' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n2 40 PRINT \"THE PROCESSOR HAS EXECUTED TWO LINES CONTAINING\"\n25 0 PRINT \"SPACES WITHIN LINE-NUMBERS.\"\n260 PRINT\n270 PRINT \"                               END TEST.\"\n280 PRINT\n290 PRINT \"END PROGRAM 188\"\n300 END\n"`,
 right: `"P188.BAS:24: error: invalid line order \nP188.BAS:25: error: invalid line order \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 2 40 PRINT "THE PROCESSOR HAS EXECUTED TWO LINES CONTAINING"
+ 25 0 PRINT "SPACES WITHIN LINE-NUMBERS."
+ 260 PRINT
+ 270 PRINT "                               END TEST."
+ 280 PRINT
+ 290 PRINT "END PROGRAM 188"
+ 300 END
- P188.BAS:24: error: invalid line order 
- P188.BAS:25: error: invalid line order 
', tests/integration.rs:37:13

---- P190 stdout ----
thread 'P190' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250LET X=10\n260IF X=10THEN 330\n270 IF X=10 THEN 330\n280IF X=0 THEN 360\n290 PRINT \"THE PROCESSOR DID NOT EXECUTE THE STATEMENTS\"\n300 PRINT \"WHICH DID NOT CONTAIN A SPACE BEFORE THE KEYWORDS\"\n310 PRINT \"LET AND IF.\"\n320 GOTO 410\n330 PRINT \"THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT\"\n340 PRINT \"CONTAIN A SPACE BEFORE THE KEYWORD LET.\"\n350 GOTO 410\n360 PRINT \"THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT\"\n370 PRINT \"CONTAIN A SPACE BEFORE THE KEYWORD IF.\"\n380 GOTO 410\n390 PRINT \"THE PROCESSOR EXECUTED STATEMENTS WHICH DID NOT\"\n400 PRINT \"CONTAIN A SPACE BEFORE THE KEYWORDS LET AND IF.\"\n410 PRINT\n420 PRINT \"                               END TEST.\"\n430 PRINT\n440 PRINT \"END PROGRAM 190\"\n450 END\n"`,
 right: `"P190.BAS:25: error: no space after line number \nP190.BAS:26: error: no space after line number \nP190.BAS:28: error: no space after line number \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250LET X=10
+ 260IF X=10THEN 330
+ 270 IF X=10 THEN 330
+ 280IF X=0 THEN 360
+ 290 PRINT "THE PROCESSOR DID NOT EXECUTE THE STATEMENTS"
+ 300 PRINT "WHICH DID NOT CONTAIN A SPACE BEFORE THE KEYWORDS"
+ 310 PRINT "LET AND IF."
+ 320 GOTO 410
+ 330 PRINT "THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT"
+ 340 PRINT "CONTAIN A SPACE BEFORE THE KEYWORD LET."
+ 350 GOTO 410
+ 360 PRINT "THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT"
+ 370 PRINT "CONTAIN A SPACE BEFORE THE KEYWORD IF."
+ 380 GOTO 410
+ 390 PRINT "THE PROCESSOR EXECUTED STATEMENTS WHICH DID NOT"
+ 400 PRINT "CONTAIN A SPACE BEFORE THE KEYWORDS LET AND IF."
+ 410 PRINT
+ 420 PRINT "                               END TEST."
+ 430 PRINT
+ 440 PRINT "END PROGRAM 190"
+ 450 END
- P190.BAS:25: error: no space after line number 
- P190.BAS:26: error: no space after line number 
- P190.BAS:28: error: no space after line number 
', tests/integration.rs:37:13

---- P189 stdout ----
thread 'P189' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n240 L E T X=10\n250 I F X=10 THEN 370\n260 IF X=10 THEN 310\n270 I F X=0 THEN 340\n280 PRINT \"THE PROCESSOR DID NOT EXECUTE THE STATEMENTS\"\n290 PRINT \"CONTAINING SPACES WITHIN THE KEYWORDS LET AND IF.\"\n300 GOTO 390\n310 PRINT \"THE PROCESSOR EXECUTED A STATEMENT CONTAINING A\"\n320 PRINT \"SPACE WITHIN THE KEYWORD LET.\"\n330 GOTO 390\n340 PRINT \"THE PROCESSOR EXECUTED A STATEMENT CONTAINING A\"\n350 PRINT \"SPACE WITHIN THE KEYWORD IF.\"\n360 GOTO 390\n370 PRINT \"THE PROCESSOR EXECUTED STATEMENTS CONTAINING SPACES\"\n380 PRINT \"WITHIN THE KEYWORDS LET AND IF.\"\n390 PRINT\n400 PRINT \"                               END TEST.\"\n410 PRINT\n420 PRINT \"END PROGRAM 189\"\n430 END\n"`,
 right: `"240: error: syntax error \n L E T X=10\n ^\n250: error: syntax error \n I F X=10 THEN 370\n ^\n270: error: syntax error \n I F X=0 THEN 340\n ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 240 L E T X=10
+ 250 I F X=10 THEN 370
+ 260 IF X=10 THEN 310
+ 270 I F X=0 THEN 340
+ 280 PRINT "THE PROCESSOR DID NOT EXECUTE THE STATEMENTS"
+ 290 PRINT "CONTAINING SPACES WITHIN THE KEYWORDS LET AND IF."
+ 300 GOTO 390
+ 310 PRINT "THE PROCESSOR EXECUTED A STATEMENT CONTAINING A"
+ 320 PRINT "SPACE WITHIN THE KEYWORD LET."
+ 330 GOTO 390
+ 340 PRINT "THE PROCESSOR EXECUTED A STATEMENT CONTAINING A"
+ 350 PRINT "SPACE WITHIN THE KEYWORD IF."
+ 360 GOTO 390
+ 370 PRINT "THE PROCESSOR EXECUTED STATEMENTS CONTAINING SPACES"
+ 380 PRINT "WITHIN THE KEYWORDS LET AND IF."
+ 390 PRINT
+ 400 PRINT "                               END TEST."
+ 410 PRINT
+ 420 PRINT "END PROGRAM 189"
+ 430 END
- 240: error: syntax error 
-  L E T X=10
-  ^
- 250: error: syntax error 
-  I F X=10 THEN 370
-  ^
- 270: error: syntax error 
-  I F X=0 THEN 340
-  ^
', tests/integration.rs:37:13

---- P192 stdout ----
thread 'P192' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n280 PRINT \"                       *\"?\"\n290 PRINT\n300 PRINT \"                               END TEST.\"\n310 PRINT\n320 PRINT \"END PROGRAM 192\"\n330 END\n"`,
 right: `"280: error: syntax error \n PRINT \"                       *\"?\"\n                                 ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 280 PRINT "                       *"?"
+ 290 PRINT
+ 300 PRINT "                               END TEST."
+ 310 PRINT
+ 320 PRINT "END PROGRAM 192"
+ 330 END
- 280: error: syntax error 
-  PRINT "                       *"?"
-                                  ^
', tests/integration.rs:37:13

---- P194 stdout ----
thread 'P194' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 LET A$=\"*\"?\"\n270 PRINT \"A$=\";A$\n310 PRINT\n320 PRINT \"                               END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 194\"\n350 END\n"`,
 right: `"260: error: syntax error \n LET A$=\"*\"?\"\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 LET A$="*"?"
+ 270 PRINT "A$=";A$
+ 310 PRINT
+ 320 PRINT "                               END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 194"
+ 350 END
- 260: error: syntax error 
-  LET A$="*"?"
-            ^
', tests/integration.rs:37:13

---- P195 stdout ----
thread 'P195' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n260 LET A$=\"*\"\"?\"\n270 PRINT \"A$=\";A$\n310 PRINT\n320 PRINT \"                               END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 195\"\n350 END\n"`,
 right: `"260: error: syntax error \n LET A$=\"*\"\"?\"\n           ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 260 LET A$="*""?"
+ 270 PRINT "A$=";A$
+ 310 PRINT
+ 320 PRINT "                               END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 195"
+ 350 END
- 260: error: syntax error 
-  LET A$="*""?"
-            ^
', tests/integration.rs:37:13

---- P191 stdout ----
thread 'P191' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n250 LETX=10\n260 IFX=10 THEN 390\n270 IF X=10 THEN 330\n280 IFX=0 THEN 360\n290 PRINT \"THE PROCESSOR DID NOT EXECUTE THE STATEMENTS\"\n300 PRINT \"WHICH DID NOT CONTAIN A SPACE AFTER THE KEYWORDS\"\n310 PRINT \"LET AND IF.\"\n320 GOTO 410\n330 PRINT \"THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT\"\n340 PRINT \"CONTAIN A SPACE AFTER THE KEYWORD LET.\"\n350 GOTO 410\n360 PRINT \"THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT\"\n370 PRINT \"CONTAIN A SPACE AFTER THE KEYWORD IF.\"\n380 GOTO 410\n390 PRINT \"THE PROCESSOR EXECUTED STATEMENTS WHICH DID NOT\"\n400 PRINT \"CONTAIN A SPACE AFTER THE KEYWORDS LET AND IF.\"\n410 PRINT\n420 PRINT \"                               END TEST.\"\n430 PRINT\n440 PRINT \"END PROGRAM 191\"\n450 END\n"`,
 right: `"250: error: syntax error \n LETX=10\n ^\n260: error: syntax error \n IFX=10 THEN 390\n ^\n280: error: syntax error \n IFX=0 THEN 360\n ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 250 LETX=10
+ 260 IFX=10 THEN 390
+ 270 IF X=10 THEN 330
+ 280 IFX=0 THEN 360
+ 290 PRINT "THE PROCESSOR DID NOT EXECUTE THE STATEMENTS"
+ 300 PRINT "WHICH DID NOT CONTAIN A SPACE AFTER THE KEYWORDS"
+ 310 PRINT "LET AND IF."
+ 320 GOTO 410
+ 330 PRINT "THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT"
+ 340 PRINT "CONTAIN A SPACE AFTER THE KEYWORD LET."
+ 350 GOTO 410
+ 360 PRINT "THE PROCESSOR EXECUTED A STATEMENT WHICH DID NOT"
+ 370 PRINT "CONTAIN A SPACE AFTER THE KEYWORD IF."
+ 380 GOTO 410
+ 390 PRINT "THE PROCESSOR EXECUTED STATEMENTS WHICH DID NOT"
+ 400 PRINT "CONTAIN A SPACE AFTER THE KEYWORDS LET AND IF."
+ 410 PRINT
+ 420 PRINT "                               END TEST."
+ 430 PRINT
+ 440 PRINT "END PROGRAM 191"
+ 450 END
- 250: error: syntax error 
-  LETX=10
-  ^
- 260: error: syntax error 
-  IFX=10 THEN 390
-  ^
- 280: error: syntax error 
-  IFX=0 THEN 360
-  ^
', tests/integration.rs:37:13

---- P193 stdout ----
thread 'P193' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n300 PRINT \"                       *\"\"?\"\n310 PRINT\n320 PRINT \"                               END TEST.\"\n330 PRINT\n340 PRINT \"END PROGRAM 193\"\n350 END\n"`,
 right: `"300: error: syntax error \n PRINT \"                       *\"\"?\"\n                                 ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 300 PRINT "                       *""?"
+ 310 PRINT
+ 320 PRINT "                               END TEST."
+ 330 PRINT
+ 340 PRINT "END PROGRAM 193"
+ 350 END
- 300: error: syntax error 
-  PRINT "                       *""?"
-                                  ^
', tests/integration.rs:37:13

---- P197 stdout ----
thread 'P197' panicked at 'assertion failed: `(left == right)`
  left: `"error: duplicate line number 220"`,
 right: `"P197.BAS:23: error: duplicated line number \n"`: 
Diff:
+ error: duplicate line number 220
- P197.BAS:23: error: duplicated line number 
- 
', tests/integration.rs:37:13

---- P199 stdout ----
thread 'P199' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n10000 PRINT \"THE PROCESSOR HAS EXECUTED STATEMENTS WITH FIVE-DIGIT\"\n10010 PRINT \"LINE-NUMBERS.\"\n10020 PRINT\n10030 PRINT \"                              END TEST.\"\n10040 PRINT\n10050 PRINT \"END PROGRAM 199\"\n10060 END\n"`,
 right: `"P199.BAS:23: error: invalid line number \nP199.BAS:24: error: invalid line number \nP199.BAS:25: error: invalid line number \nP199.BAS:26: error: invalid line number \nP199.BAS:27: error: invalid line number \nP199.BAS:28: error: invalid line number \nP199.BAS:29: error: invalid line number \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 10000 PRINT "THE PROCESSOR HAS EXECUTED STATEMENTS WITH FIVE-DIGIT"
+ 10010 PRINT "LINE-NUMBERS."
+ 10020 PRINT
+ 10030 PRINT "                              END TEST."
+ 10040 PRINT
+ 10050 PRINT "END PROGRAM 199"
+ 10060 END
- P199.BAS:23: error: invalid line number 
- P199.BAS:24: error: invalid line number 
- P199.BAS:25: error: invalid line number 
- P199.BAS:26: error: invalid line number 
- P199.BAS:27: error: invalid line number 
- P199.BAS:28: error: invalid line number 
- P199.BAS:29: error: invalid line number 
', tests/integration.rs:37:13

---- P185 stdout ----
thread 'P185' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n240 X1=12\n280 PRINT \"VALUE OF X1 = \";X1\n290 PRINT\n300 PRINT \"                        END TEST.\"\n310 PRINT\n320 PRINT \"END PROGRAM 185\"\n330 END\n"`,
 right: `"240: error: syntax error \n X1=12\n ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 240 X1=12
+ 280 PRINT "VALUE OF X1 = ";X1
+ 290 PRINT
+ 300 PRINT "                        END TEST."
+ 310 PRINT
+ 320 PRINT "END PROGRAM 185"
+ 330 END
- 240: error: syntax error 
-  X1=12
-  ^
', tests/integration.rs:37:13

---- P200 stdout ----
thread 'P200' panicked at 'assertion failed: `(left == right)`
  left: `"A STATEMENT WITH A LINE-NUMBER OF 0 HAS BEEN EXECUTED.\n\nPROGRAM FILE 2000: ERROR - LINE-NUMBER ZERO.\n    ANSI STANDARD 4.4\n\nSECTION 200.1: ERROR - LINE-NUMBER ZERO.\n\nTHIS IS A TEST FOR A NON-STANDARD FEATURE OF MINIMAL BASIC.\nTO PASS THIS TEST, THE PROCESSOR MUST EITHER:\n\n   1) ACCEPT THE PROGRAM AND BE ACCOMPANIED BY DOCUMENTATION\n      ACCURATELY DESCRIBING THE FEATURE\'S INTERPRETATION\n      BY THE PROCESSOR, OR\n\n   2) REJECT THE PROGRAM WITH AN APPROPRIATE ERROR MESSAGE\n\nSEE THE NBS MINIMAL BASIC TEST PROGRAMS USER\'S MANUAL\nFOR DETAILED CRITERIA.\n\n                              BEGIN TEST.\n\nTHIS PROGRAM TESTS TO SEE IF THE PROCESSOR ACCEPTS PROGRAMS\nCONTAINING LINE-NUMBERS WITH THE VALUE OF 0. THE FIRST\nSTATEMENT IN THIS PROGRAM HAS A LINE-NUMBER OF 0. IT IS A\nPRINT-STATEMENT WHICH PRINTS THE MESSAGE THAT A LINE-NUMBER\nOF 0 HAS BEEN EXECUTED. CHECK THE FIRST LINE OF OUTPUT.\n\n                               END TEST.\n\nEND PROGRAM 200\n"`,
 right: `""`: 
Diff:
+ A STATEMENT WITH A LINE-NUMBER OF 0 HAS BEEN EXECUTED.
+ 
+ PROGRAM FILE 2000: ERROR - LINE-NUMBER ZERO.
+     ANSI STANDARD 4.4
+ 
+ SECTION 200.1: ERROR - LINE-NUMBER ZERO.
+ 
+ THIS IS A TEST FOR A NON-STANDARD FEATURE OF MINIMAL BASIC.
+ TO PASS THIS TEST, THE PROCESSOR MUST EITHER:
+ 
+    1) ACCEPT THE PROGRAM AND BE ACCOMPANIED BY DOCUMENTATION
+       ACCURATELY DESCRIBING THE FEATURE'S INTERPRETATION
+       BY THE PROCESSOR, OR
+ 
+    2) REJECT THE PROGRAM WITH AN APPROPRIATE ERROR MESSAGE
+ 
+ SEE THE NBS MINIMAL BASIC TEST PROGRAMS USER'S MANUAL
+ FOR DETAILED CRITERIA.
+ 
+                               BEGIN TEST.
+ 
+ THIS PROGRAM TESTS TO SEE IF THE PROCESSOR ACCEPTS PROGRAMS
+ CONTAINING LINE-NUMBERS WITH THE VALUE OF 0. THE FIRST
+ STATEMENT IN THIS PROGRAM HAS A LINE-NUMBER OF 0. IT IS A
+ PRINT-STATEMENT WHICH PRINTS THE MESSAGE THAT A LINE-NUMBER
+ OF 0 HAS BEEN EXECUTED. CHECK THE FIRST LINE OF OUTPUT.
+ 
+                                END TEST.
+ 
+ END PROGRAM 200
+ 
', tests/integration.rs:22:13

---- P201 stdout ----
thread 'P201' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\nPRINT \"PROGRAM FILE 201: ERROR - STATEMENTS WITHOUT LINE-NUMBERS.\"\nPRINT \"    ANSI STANDARD 4.2, 4.4\"\nPRINT\nPRINT \"SECTION 201.1: ERROR - STATEMENTS WITHOUT LINE-NUMBERS.\"\nPRINT\nPRINT \"THIS PROGRAM TESTS TO SEE IF THE BASIC PROCESSOR\"\nPRINT \"ACCEPTS PROGRAMS CONTAINING STATEMENTS WITH NO\"\nPRINT \"LINE-NUMBERS.\"\nPRINT\nPRINT \"THIS IS A TEST FOR A NON-STANDARD FEATURE OF MINIMAL BASIC.\"\nPRINT \"TO PASS THIS TEST, THE PROCESSOR MUST EITHER:\"\nPRINT\nPRINT \"   1) ACCEPT THE PROGRAM AND BE ACCOMPANIED BY DOCUMENTATION\"\nPRINT \"      ACCURATELY DESCRIBING THE FEATURE\'S INTERPRETATION\"\nPRINT \"      BY THE PROCESSOR, OR\"\nPRINT\nPRINT \"   2) REJECT THE PROGRAM WITH AN APPROPRIATE ERROR MESSAGE\"\nPRINT\nPRINT \"SEE THE NBS MINIMAL BASIC TEST PROGRAM USER\'S MANUAL\"\nPRINT \"FOR DETAILED CRITERIA.\"\nPRINT\nPRINT \"                              BEGIN TEST.\"\nPRINT\nPRINT \"IF THIS PROGRAM GENERATED ANY OUTPUT, THEN THE\"\nPRINT \"PROCESSOR HAS EXECUTED STATEMENTS WITH NO LINE-NUMBERS.\"\nPRINT\nPRINT \"                               END TEST.\"\nPRINT\nPRINT \"END PROGRAM 201\"\nEND\n"`,
 right: `"P201.BAS:1: error: invalid line number \nP201.BAS:2: error: invalid line number \nP201.BAS:3: error: invalid line number \nP201.BAS:4: error: invalid line number \nP201.BAS:5: error: invalid line number \nP201.BAS:6: error: invalid line number \nP201.BAS:7: error: invalid line number \nP201.BAS:8: error: invalid line number \nP201.BAS:9: error: invalid line number \nP201.BAS:10: error: invalid line number \nP201.BAS:11: error: invalid line number \nP201.BAS:12: error: invalid line number \nP201.BAS:13: error: invalid line number \nP201.BAS:14: error: invalid line number \nP201.BAS:15: error: invalid line number \nP201.BAS:16: error: invalid line number \nP201.BAS:17: error: invalid line number \nP201.BAS:18: error: invalid line number \nP201.BAS:19: error: invalid line number \nP201.BAS:20: error: invalid line number \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ PRINT "PROGRAM FILE 201: ERROR - STATEMENTS WITHOUT LINE-NUMBERS."
+ PRINT "    ANSI STANDARD 4.2, 4.4"
+ PRINT
+ PRINT "SECTION 201.1: ERROR - STATEMENTS WITHOUT LINE-NUMBERS."
+ PRINT
+ PRINT "THIS PROGRAM TESTS TO SEE IF THE BASIC PROCESSOR"
+ PRINT "ACCEPTS PROGRAMS CONTAINING STATEMENTS WITH NO"
+ PRINT "LINE-NUMBERS."
+ PRINT
+ PRINT "THIS IS A TEST FOR A NON-STANDARD FEATURE OF MINIMAL BASIC."
+ PRINT "TO PASS THIS TEST, THE PROCESSOR MUST EITHER:"
+ PRINT
+ PRINT "   1) ACCEPT THE PROGRAM AND BE ACCOMPANIED BY DOCUMENTATION"
+ PRINT "      ACCURATELY DESCRIBING THE FEATURE'S INTERPRETATION"
+ PRINT "      BY THE PROCESSOR, OR"
+ PRINT
+ PRINT "   2) REJECT THE PROGRAM WITH AN APPROPRIATE ERROR MESSAGE"
+ PRINT
+ PRINT "SEE THE NBS MINIMAL BASIC TEST PROGRAM USER'S MANUAL"
+ PRINT "FOR DETAILED CRITERIA."
+ PRINT
+ PRINT "                              BEGIN TEST."
+ PRINT
+ PRINT "IF THIS PROGRAM GENERATED ANY OUTPUT, THEN THE"
+ PRINT "PROCESSOR HAS EXECUTED STATEMENTS WITH NO LINE-NUMBERS."
+ PRINT
+ PRINT "                               END TEST."
+ PRINT
+ PRINT "END PROGRAM 201"
+ END
- P201.BAS:1: error: invalid line number 
- P201.BAS:2: error: invalid line number 
- P201.BAS:3: error: invalid line number 
- P201.BAS:4: error: invalid line number 
- P201.BAS:5: error: invalid line number 
- P201.BAS:6: error: invalid line number 
- P201.BAS:7: error: invalid line number 
- P201.BAS:8: error: invalid line number 
- P201.BAS:9: error: invalid line number 
- P201.BAS:10: error: invalid line number 
- P201.BAS:11: error: invalid line number 
- P201.BAS:12: error: invalid line number 
- P201.BAS:13: error: invalid line number 
- P201.BAS:14: error: invalid line number 
- P201.BAS:15: error: invalid line number 
- P201.BAS:16: error: invalid line number 
- P201.BAS:17: error: invalid line number 
- P201.BAS:18: error: invalid line number 
- P201.BAS:19: error: invalid line number 
- P201.BAS:20: error: invalid line number 
', tests/integration.rs:37:13

---- P198 stdout ----
thread 'P198' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 ON A GOTO 250,270,290\n250 PRINT \"NEITHER OF THE UNORDERED LINES WAS EXECUTED.\"\n260 GOTO 300\n270 PRINT \"THE LINES WERE EXECUTED IN ORDER OF THEIR LINE-NUMBERS.\"\n280 GOTO 300\n290 PRINT \"THE LINES WERE EXECUTED IN THEIR PHYSICAL SEQUENCE.\"\n300 PRINT\n320 PRINT\n330 PRINT \"                                END TEST.\"\n340 PRINT\n350 PRINT \"END PROGRAM 198.\"\n360 PRINT\n370 END\n"`,
 right: `"P198.BAS:22: error: invalid line order \n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 ON A GOTO 250,270,290
+ 250 PRINT "NEITHER OF THE UNORDERED LINES WAS EXECUTED."
+ 260 GOTO 300
+ 270 PRINT "THE LINES WERE EXECUTED IN ORDER OF THEIR LINE-NUMBERS."
+ 280 GOTO 300
+ 290 PRINT "THE LINES WERE EXECUTED IN THEIR PHYSICAL SEQUENCE."
+ 300 PRINT
+ 320 PRINT
+ 330 PRINT "                                END TEST."
+ 340 PRINT
+ 350 PRINT "END PROGRAM 198."
+ 360 PRINT
+ 370 END
- P198.BAS:22: error: invalid line order 
', tests/integration.rs:37:13

---- P207 stdout ----
thread 'P207' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 LET X=A$\n280 PRINT\n290 PRINT \"RESULTING VALUE OF X = \";X\n300 PRINT\n310 PRINT \"                      END TEST.\"\n320 PRINT\n330 PRINT \"END PROGRAM 207\"\n340 END\n"`,
 right: `"270: error: numeric expression expected \n LET X=A$\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 LET X=A$
+ 280 PRINT
+ 290 PRINT "RESULTING VALUE OF X = ";X
+ 300 PRINT
+ 310 PRINT "                      END TEST."
+ 320 PRINT
+ 330 PRINT "END PROGRAM 207"
+ 340 END
- 270: error: numeric expression expected 
-  LET X=A$
-        ^
', tests/integration.rs:37:13

---- P204 stdout ----
thread 'P204' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n220 print\n230 PRINT \"IF A BLANK LINE IMMEDIATELY PRECEDES THIS SENTENCE, THEN\"\n240 PRINT \"THE PROCESSOR EXECUTED A PRINT STATEMENT IN WHICH THE\"\n250 PRINT \"WORD \'PRINT\' APPEARS IN LOWERCASE LETTERS.\"\n260 PRINT\n270 PRINT\n280 PRINT \"this sentence is generated by a quoted-string print-item\"\n290 PRINT \"containing lower-case characters.\"\n320 PRINT\n330 PRINT \"                               END TEST.\"\n340 PRINT\n350 PRINT \"END PROGRAM 204\"\n360 END\n"`,
 right: `"P204.BAS:24: error: invalid characters found \n 220 print\n     ^\nP204.BAS:30: error: invalid characters found \n 280 PRINT \"this sentence is generated by a quoted-string print-item\"\n            ^\nP204.BAS:31: error: invalid characters found \n 290 PRINT \"containing lower-case characters.\"\n            ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 220 print
+ 230 PRINT "IF A BLANK LINE IMMEDIATELY PRECEDES THIS SENTENCE, THEN"
+ 240 PRINT "THE PROCESSOR EXECUTED A PRINT STATEMENT IN WHICH THE"
+ 250 PRINT "WORD 'PRINT' APPEARS IN LOWERCASE LETTERS."
+ 260 PRINT
+ 270 PRINT
+ 280 PRINT "this sentence is generated by a quoted-string print-item"
+ 290 PRINT "containing lower-case characters."
+ 320 PRINT
+ 330 PRINT "                               END TEST."
+ 340 PRINT
+ 350 PRINT "END PROGRAM 204"
+ 360 END
- P204.BAS:24: error: invalid characters found 
-  220 print
-      ^
- P204.BAS:30: error: invalid characters found 
-  280 PRINT "this sentence is generated by a quoted-string print-item"
-             ^
- P204.BAS:31: error: invalid characters found 
-  290 PRINT "containing lower-case characters."
-             ^
', tests/integration.rs:37:13

---- P202 stdout ----
thread 'P202' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n230 PRINT \"THE PROCESSOR HAS EXECUTED A STATEMENT CONTAINING\"; 9999     -9921;\n235 PRINT \"CHARACTERS.\"\n240 PRINT\n250 PRINT \"                                END TEST.\"\n260 PRINT\n270 PRINT \"END PROGRAM 202\"\n280 END\n"`,
 right: `""`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 230 PRINT "THE PROCESSOR HAS EXECUTED A STATEMENT CONTAINING"; 9999     -9921;
+ 235 PRINT "CHARACTERS."
+ 240 PRINT
+ 250 PRINT "                                END TEST."
+ 260 PRINT
+ 270 PRINT "END PROGRAM 202"
+ 280 END
+ 
', tests/integration.rs:37:13

---- P208 stdout ----
thread 'P208' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n270 LET A$=X\n280 PRINT\n290 PRINT \"RESULTING VALUE OF A$ = \";A$\n300 PRINT\n310 PRINT \"                      END TEST.\"\n320 PRINT\n330 PRINT \"END PROGRAM 208\"\n340 END\n"`,
 right: `"270: error: string expression expected \n LET A$=X\n        ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 270 LET A$=X
+ 280 PRINT
+ 290 PRINT "RESULTING VALUE OF A$ = ";A$
+ 300 PRINT
+ 310 PRINT "                      END TEST."
+ 320 PRINT
+ 330 PRINT "END PROGRAM 208"
+ 340 END
- 270: error: string expression expected 
-  LET A$=X
-         ^
', tests/integration.rs:37:13

---- P205 stdout ----
thread 'P205' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 205: ERROR - ASSIGNED STRING CONTAINING\n        LOWERCASE CHARACTERS.\n    ANSI STANDARD 3.2, 3.4, 9.2\n\nSECTION 205.1: ERROR - ASSIGNED STRING CONTAINING\n        LOWERCASE CHARACTERS.\n\nTHIS PROGRAM TESTS TO SEE IF THE PROCESSOR ACCEPTS PROGRAMS\nCONTAINING LOWERCASE CHARACTERS IN THE QUOTED STRING OF A\nLET-STATEMENT.\n\nTHIS IS A TEST FOR A NON-STANDARD FEATURE OF MINIMAL BASIC.\nTO PASS THIS TEST, THE PROCESSOR MUST EITHER:\n\n   1) ACCEPT THE PROGRAM AND BE ACCOMPANIED BY DOCUMENTATION\n      ACCURATELY DESCRIBING THE FEATURE\'S INTERPRETATION\n      BY THE PROCESSOR, OR\n\n   2) REJECT THE PROGRAM WITH AN APPROPRIATE ERROR MESSAGE\n\nSEE THE NBS MINIMAL BASIC TEST PROGRAMS USER\'S MANUAL\nFOR DETAILED CRITERIA.\n\n                              BEGIN TEST.\n\nAN ASSIGNMENT STATEMENT HAS ATTEMPTED TO ASSOCIATE A STRING\nCONSISTING OF THE FIRST 18 CHARACTERS OF THE ALPHABET, (A-R)\nIN LOWERCASE, WITH A$.\nA$=abcdefghijklmnopqr\n\n                                END TEST.\n\nEND PROGRAM 205\n"`,
 right: `""`: 
Diff:
+ PROGRAM FILE 205: ERROR - ASSIGNED STRING CONTAINING
+         LOWERCASE CHARACTERS.
+     ANSI STANDARD 3.2, 3.4, 9.2
+ 
+ SECTION 205.1: ERROR - ASSIGNED STRING CONTAINING
+         LOWERCASE CHARACTERS.
+ 
+ THIS PROGRAM TESTS TO SEE IF THE PROCESSOR ACCEPTS PROGRAMS
+ CONTAINING LOWERCASE CHARACTERS IN THE QUOTED STRING OF A
+ LET-STATEMENT.
+ 
+ THIS IS A TEST FOR A NON-STANDARD FEATURE OF MINIMAL BASIC.
+ TO PASS THIS TEST, THE PROCESSOR MUST EITHER:
+ 
+    1) ACCEPT THE PROGRAM AND BE ACCOMPANIED BY DOCUMENTATION
+       ACCURATELY DESCRIBING THE FEATURE'S INTERPRETATION
+       BY THE PROCESSOR, OR
+ 
+    2) REJECT THE PROGRAM WITH AN APPROPRIATE ERROR MESSAGE
+ 
+ SEE THE NBS MINIMAL BASIC TEST PROGRAMS USER'S MANUAL
+ FOR DETAILED CRITERIA.
+ 
+                               BEGIN TEST.
+ 
+ AN ASSIGNMENT STATEMENT HAS ATTEMPTED TO ASSOCIATE A STRING
+ CONSISTING OF THE FIRST 18 CHARACTERS OF THE ALPHABET, (A-R)
+ IN LOWERCASE, WITH A$.
+ A$=abcdefghijklmnopqr
+ 
+                                 END TEST.
+ 
+ END PROGRAM 205
+ 
', tests/integration.rs:22:13

---- P206 stdout ----
thread 'P206' panicked at 'assertion failed: `(left == right)`
  left: `"Parser error: failed to parse program fully, remaining statements:\n330 READ W$\n340 REM THROUGHOUT, VARIABLES A$ - O$ ARE TREATED AS A STRING ARRAY,\n350 REM INDEXED BY N, 1 <= N <= 15.\n360 LET A$=W$\n370 REM Z$ IS HIGHEST SO FAR, H1 ITS INDEX\n380 LET Z$=W$\n390 LET H1=1\n400 REM LOAD IN 1ST L, AND NOTE HIGHEST\n410 FOR N=2 TO L\n420 READ W$\n430 GOSUB 4000\n440 IF W$ < Z$ THEN 470\n450 LET Z$=W$\n460 LET H1=N\n470 NEXT N\n480 REM READ NEXT L CHARACTERS, FOR EACH, COMPARE TO HIGHEST IN TABLE.\n490 REM IF THIS ONE < HIGHEST, REPLACE HIGHEST WITH IT, AND THEN\n500 REM FIND NEW HIGHEST.\n510 FOR I=1 TO L\n520 READ W$\n530 REM IF THIS > HIGHEST, SKIP\n540 IF W$ > Z$ THEN 660\n550 LET N=H1\n560 GOSUB 4000\n570 LET H1=1\n580 LET Z$ =A$\n590 REM SCAN FOR NEW HIGHEST\n600 FOR N=2 TO L\n610 GOSUB 3000\n620 IF W$<Z$ THEN 650\n630 LET Z$=W$\n640 LET H1=N\n650 NEXT N\n660 NEXT I\n670 REM TABLE NOW HAS LOWEST L CHARACTERS; DO SORT ON THOSE\n680 GOSUB 2000\n690 RESTORE\n700 LET N=1\n710 REM READ ALL L+L. PUT INTO TABLE ONLY THOSE > HIGHEST OF THE\n720 REM LOWEST L CHARACTERS ALREADY SORTED.\n730 FOR I=1 TO L+L\n740 READ W$\n750 IF W$ > Z$ THEN 770\n760 GOTO 790\n770 GOSUB 4000\n780 LET N=N+1\n790 NEXT I\n800 REM SORT THE HIGH L CHARACTERS.\n810 GOSUB 2000\n812 PRINT\n815 PRINT \"IF DOCUMENTATION AGREES WITH THE ABOVE RESULTS, THEN\"\n818 PRINT \"*** TEST PASSED ***\"\n820 PRINT\n830 PRINT \"                     END TEST.\"\n840 PRINT\n850 PRINT \"SECTION 206.2: COLLATING MULTI-CHARACTER STRINGS.\"\n860 PRINT\n870 PRINT \"THIS SECTION DISPLAYS SOME SUGGESTIVE TEST CASES TO\"\n880 PRINT \"SHOW HOW THIS IMPLEMENTATION HANDLES COMPARISONS OF\"\n890 PRINT \"MULTI-CHARACTER STRINGS. ALL STRINGS SHOWN ARE DELIMITED\"\n895 PRINT \"BY APOSTROPHES TO ENABLE THE USER TO DISTINGUISH BLANKS\"\n897 PRINT \"FROM NULL.\"\n900 PRINT\n903 PRINT \"                    BEGIN TEST.\"\n906 PRINT\n910 READ A$,B$\n920 IF A$ = \"999\" THEN 1110\n930 LET C$ = \"=\"\n940 IF A$=B$ THEN 1000\n950 LET C$=\"<\"\n960 IF A$<B$ THEN 1000\n970 LET C$=\">\"\n980 IF A$>B$ THEN 1000\n990 LET C$=\"INCOMPARABLE TO\"\n1000 PRINT \"\'\";A$;\"\' \";C$;\" \'\";B$;\"\'\"\n1010 GOTO 910\n1110 PRINT\n1120 PRINT \"IF DOCUMENTATION AGREES WITH ABOVE RESULTS, THEN\"\n1130 PRINT \"*** TEST PASSED ***\"\n1140 PRINT\n1150 PRINT \"                     END TEST.\"\n1160 PRINT\n1900 PRINT \"END PROGRAM 206\"\n1990 STOP\n2000 REM THIS SUBROUTINE SORTS AND PRINTS THE CHARACTERS IN A$ - O$\n2010 REM ALGORITHM IS SIMPLE EXCHANGE SORT\n2020 FOR I=1 TO L-1\n2030 FOR J=I+1 TO L\n2040 LET N=I\n2050 GOSUB 3000\n2060 LET X$=W$\n2070 LET N=J\n2080 GOSUB 3000\n2090 LET Y$=W$\n2100 IF X$ < Y$ THEN 2180\n2110 REM SWAP ITH AND JTH CHARACTERS\n2120 LET N=I\n2130 LET W$=Y$\n2140 GOSUB 4000\n2150 LET N=J\n2160 LET W$=X$\n2170 GOSUB 4000\n2180 NEXT J\n2190 NEXT I\n2200 PRINT \".\";\n2210 FOR N=1 TO L\n2220 GOSUB 3000\n2230 PRINT W$;\".\";\n2240 NEXT N\n2250 PRINT\n2260 RETURN\n3000 REM SUBROUTINE TO GET NTH CHARACTER INTO W$\n3010 IF N > 7 THEN 3030\n3020 ON N GOTO 3040,3060,3080,3100,3120,3140,3160\n3030 ON N-7 GOTO 3180,3200,3220,3240,3260,3280,3300,3320\n3040 LET W$=A$\n3050 GOTO 3340\n3060 LET W$=B$\n3070 GOTO 3340\n3080 LET W$=C$\n3090 GOTO 3340\n3100 LET W$=D$\n3110 GOTO 3340\n3120 LET W$=E$\n3130 GOTO 3340\n3140 LET W$=F$\n3150 GOTO 3340\n3160 LET W$=G$\n3170 GOTO 3340\n3180 LET W$=H$\n3190 GOTO 3340\n3200 LET W$=I$\n3210 GOTO 3340\n3220 LET W$=J$\n3230 GOTO 3340\n3240 LET W$=K$\n3250 GOTO 3340\n3260 LET W$=L$\n3270 GOTO 3340\n3280 LET W$=M$\n3290 GOTO 3340\n3300 LET W$=N$\n3310 GOTO 3340\n3320 LET W$=O$\n3340 RETURN\n4000 REM SUBROUTINE TO GET W$ INTO NTH CHARACTER\n4010 IF N > 7 THEN 4030\n4020 ON N GOTO 4040,4060,4080,4100,4120,4140,4160\n4030 ON N-7 GOTO 4180,4200,4220,4240,4260,4280,4300,4320\n4040 LET A$=W$\n4050 GOTO 4340\n4060 LET B$=W$\n4070 GOTO 4340\n4080 LET C$=W$\n4090 GOTO 4340\n4100 LET D$=W$\n4110 GOTO 4340\n4120 LET E$=W$\n4130 GOTO 4340\n4140 LET F$=W$\n4150 GOTO 4340\n4160 LET G$=W$\n4170 GOTO 4340\n4180 LET H$=W$\n4190 GOTO 4340\n4200 LET I$=W$\n4210 GOTO 4340\n4220 LET J$=W$\n4230 GOTO 4340\n4240 LET K$=W$\n4250 GOTO 4340\n4260 LET L$=W$\n4270 GOTO 4340\n4280 LET M$=W$\n4290 GOTO 4340\n4300 LET N$=W$\n4310 GOTO 4340\n4320 LET O$=W$\n4340 RETURN\n5000 DATA \"A\",\"M\",\"Z\",\"O\",\"1\",\"8\"\n5010 DATA \"9\",\" \",\"!\",\"#\",\"$\",\"%\"\n5020 DATA \"&\",\"\'\",\"(\",\")\",\"*\",\"+\"\n5030 DATA \",\",\"-\",\".\",\"/\",\":\",\";\"\n5040 DATA \"<\",\"=\",\">\",\"?\",\"^\",\"_\"\n6000 DATA \"ABC\",\"ABC\"\n6005 DATA \"ABC\",\"ABD\"\n6010 DATA \"ABC\",\"XYZ\"\n6020 DATA \"ABC\",\"ABC  \"\n6030 DATA \"ABC\",\"  ABC\"\n6040 DATA \"ABC  \",\"  ABC\"\n6050 DATA \"ABC\",\"ABCD\"\n6060 DATA \"ABC\",\"  \"\n6070 DATA \"ABC\",\"\"\n6080 DATA \"\",\"  \"\n6090 DATA \"  \",\"    \"\n6100 DATA \"  ABC\",\" \"\n6110 DATA \"  ABC\",\"  \"\n6120 DATA \"  ABC\",\"   \"\n7000 DATA \"999\",\"999\"\n8000 END\n"`,
 right: `"440: error: string expressions can only be tested for equality \n IF W$ < Z$ THEN 470\n       ^\n540: error: string expressions can only be tested for equality \n IF W$ > Z$ THEN 660\n       ^\n620: error: string expressions can only be tested for equality \n IF W$<Z$ THEN 650\n      ^\n750: error: string expressions can only be tested for equality \n IF W$ > Z$ THEN 770\n       ^\n960: error: string expressions can only be tested for equality \n IF A$<B$ THEN 1000\n      ^\n980: error: string expressions can only be tested for equality \n IF A$>B$ THEN 1000\n      ^\n2100: error: string expressions can only be tested for equality \n IF X$ < Y$ THEN 2180\n       ^\n"`: 
Diff:
+ Parser error: failed to parse program fully, remaining statements:
+ 330 READ W$
+ 340 REM THROUGHOUT, VARIABLES A$ - O$ ARE TREATED AS A STRING ARRAY,
+ 350 REM INDEXED BY N, 1 <= N <= 15.
+ 360 LET A$=W$
+ 370 REM Z$ IS HIGHEST SO FAR, H1 ITS INDEX
+ 380 LET Z$=W$
+ 390 LET H1=1
+ 400 REM LOAD IN 1ST L, AND NOTE HIGHEST
+ 410 FOR N=2 TO L
+ 420 READ W$
+ 430 GOSUB 4000
+ 440 IF W$ < Z$ THEN 470
+ 450 LET Z$=W$
+ 460 LET H1=N
+ 470 NEXT N
+ 480 REM READ NEXT L CHARACTERS, FOR EACH, COMPARE TO HIGHEST IN TABLE.
+ 490 REM IF THIS ONE < HIGHEST, REPLACE HIGHEST WITH IT, AND THEN
+ 500 REM FIND NEW HIGHEST.
+ 510 FOR I=1 TO L
+ 520 READ W$
+ 530 REM IF THIS > HIGHEST, SKIP
+ 540 IF W$ > Z$ THEN 660
+ 550 LET N=H1
+ 560 GOSUB 4000
+ 570 LET H1=1
+ 580 LET Z$ =A$
+ 590 REM SCAN FOR NEW HIGHEST
+ 600 FOR N=2 TO L
+ 610 GOSUB 3000
+ 620 IF W$<Z$ THEN 650
+ 630 LET Z$=W$
+ 640 LET H1=N
+ 650 NEXT N
+ 660 NEXT I
+ 670 REM TABLE NOW HAS LOWEST L CHARACTERS; DO SORT ON THOSE
+ 680 GOSUB 2000
+ 690 RESTORE
+ 700 LET N=1
+ 710 REM READ ALL L+L. PUT INTO TABLE ONLY THOSE > HIGHEST OF THE
+ 720 REM LOWEST L CHARACTERS ALREADY SORTED.
+ 730 FOR I=1 TO L+L
+ 740 READ W$
+ 750 IF W$ > Z$ THEN 770
+ 760 GOTO 790
+ 770 GOSUB 4000
+ 780 LET N=N+1
+ 790 NEXT I
+ 800 REM SORT THE HIGH L CHARACTERS.
+ 810 GOSUB 2000
+ 812 PRINT
+ 815 PRINT "IF DOCUMENTATION AGREES WITH THE ABOVE RESULTS, THEN"
+ 818 PRINT "*** TEST PASSED ***"
+ 820 PRINT
+ 830 PRINT "                     END TEST."
+ 840 PRINT
+ 850 PRINT "SECTION 206.2: COLLATING MULTI-CHARACTER STRINGS."
+ 860 PRINT
+ 870 PRINT "THIS SECTION DISPLAYS SOME SUGGESTIVE TEST CASES TO"
+ 880 PRINT "SHOW HOW THIS IMPLEMENTATION HANDLES COMPARISONS OF"
+ 890 PRINT "MULTI-CHARACTER STRINGS. ALL STRINGS SHOWN ARE DELIMITED"
+ 895 PRINT "BY APOSTROPHES TO ENABLE THE USER TO DISTINGUISH BLANKS"
+ 897 PRINT "FROM NULL."
+ 900 PRINT
+ 903 PRINT "                    BEGIN TEST."
+ 906 PRINT
+ 910 READ A$,B$
+ 920 IF A$ = "999" THEN 1110
+ 930 LET C$ = "="
+ 940 IF A$=B$ THEN 1000
+ 950 LET C$="<"
+ 960 IF A$<B$ THEN 1000
+ 970 LET C$=">"
+ 980 IF A$>B$ THEN 1000
+ 990 LET C$="INCOMPARABLE TO"
+ 1000 PRINT "'";A$;"' ";C$;" '";B$;"'"
+ 1010 GOTO 910
+ 1110 PRINT
+ 1120 PRINT "IF DOCUMENTATION AGREES WITH ABOVE RESULTS, THEN"
+ 1130 PRINT "*** TEST PASSED ***"
+ 1140 PRINT
+ 1150 PRINT "                     END TEST."
+ 1160 PRINT
+ 1900 PRINT "END PROGRAM 206"
+ 1990 STOP
+ 2000 REM THIS SUBROUTINE SORTS AND PRINTS THE CHARACTERS IN A$ - O$
+ 2010 REM ALGORITHM IS SIMPLE EXCHANGE SORT
+ 2020 FOR I=1 TO L-1
+ 2030 FOR J=I+1 TO L
+ 2040 LET N=I
+ 2050 GOSUB 3000
+ 2060 LET X$=W$
+ 2070 LET N=J
+ 2080 GOSUB 3000
+ 2090 LET Y$=W$
+ 2100 IF X$ < Y$ THEN 2180
+ 2110 REM SWAP ITH AND JTH CHARACTERS
+ 2120 LET N=I
+ 2130 LET W$=Y$
+ 2140 GOSUB 4000
+ 2150 LET N=J
+ 2160 LET W$=X$
+ 2170 GOSUB 4000
+ 2180 NEXT J
+ 2190 NEXT I
+ 2200 PRINT ".";
+ 2210 FOR N=1 TO L
+ 2220 GOSUB 3000
+ 2230 PRINT W$;".";
+ 2240 NEXT N
+ 2250 PRINT
+ 2260 RETURN
+ 3000 REM SUBROUTINE TO GET NTH CHARACTER INTO W$
+ 3010 IF N > 7 THEN 3030
+ 3020 ON N GOTO 3040,3060,3080,3100,3120,3140,3160
+ 3030 ON N-7 GOTO 3180,3200,3220,3240,3260,3280,3300,3320
+ 3040 LET W$=A$
+ 3050 GOTO 3340
+ 3060 LET W$=B$
+ 3070 GOTO 3340
+ 3080 LET W$=C$
+ 3090 GOTO 3340
+ 3100 LET W$=D$
+ 3110 GOTO 3340
+ 3120 LET W$=E$
+ 3130 GOTO 3340
+ 3140 LET W$=F$
+ 3150 GOTO 3340
+ 3160 LET W$=G$
+ 3170 GOTO 3340
+ 3180 LET W$=H$
+ 3190 GOTO 3340
+ 3200 LET W$=I$
+ 3210 GOTO 3340
+ 3220 LET W$=J$
+ 3230 GOTO 3340
+ 3240 LET W$=K$
+ 3250 GOTO 3340
+ 3260 LET W$=L$
+ 3270 GOTO 3340
+ 3280 LET W$=M$
+ 3290 GOTO 3340
+ 3300 LET W$=N$
+ 3310 GOTO 3340
+ 3320 LET W$=O$
+ 3340 RETURN
+ 4000 REM SUBROUTINE TO GET W$ INTO NTH CHARACTER
+ 4010 IF N > 7 THEN 4030
+ 4020 ON N GOTO 4040,4060,4080,4100,4120,4140,4160
+ 4030 ON N-7 GOTO 4180,4200,4220,4240,4260,4280,4300,4320
+ 4040 LET A$=W$
+ 4050 GOTO 4340
+ 4060 LET B$=W$
+ 4070 GOTO 4340
+ 4080 LET C$=W$
+ 4090 GOTO 4340
+ 4100 LET D$=W$
+ 4110 GOTO 4340
+ 4120 LET E$=W$
+ 4130 GOTO 4340
+ 4140 LET F$=W$
+ 4150 GOTO 4340
+ 4160 LET G$=W$
+ 4170 GOTO 4340
+ 4180 LET H$=W$
+ 4190 GOTO 4340
+ 4200 LET I$=W$
+ 4210 GOTO 4340
+ 4220 LET J$=W$
+ 4230 GOTO 4340
+ 4240 LET K$=W$
+ 4250 GOTO 4340
+ 4260 LET L$=W$
+ 4270 GOTO 4340
+ 4280 LET M$=W$
+ 4290 GOTO 4340
+ 4300 LET N$=W$
+ 4310 GOTO 4340
+ 4320 LET O$=W$
+ 4340 RETURN
+ 5000 DATA "A","M","Z","O","1","8"
+ 5010 DATA "9"," ","!","#","$","%"
+ 5020 DATA "&","'","(",")","*","+"
+ 5030 DATA ",","-",".","/",":",";"
+ 5040 DATA "<","=",">","?","^","_"
+ 6000 DATA "ABC","ABC"
+ 6005 DATA "ABC","ABD"
+ 6010 DATA "ABC","XYZ"
+ 6020 DATA "ABC","ABC  "
+ 6030 DATA "ABC","  ABC"
+ 6040 DATA "ABC  ","  ABC"
+ 6050 DATA "ABC","ABCD"
+ 6060 DATA "ABC","  "
+ 6070 DATA "ABC",""
+ 6080 DATA "","  "
+ 6090 DATA "  ","    "
+ 6100 DATA "  ABC"," "
+ 6110 DATA "  ABC","  "
+ 6120 DATA "  ABC","   "
+ 7000 DATA "999","999"
+ 8000 END
- 440: error: string expressions can only be tested for equality 
-  IF W$ < Z$ THEN 470
-        ^
- 540: error: string expressions can only be tested for equality 
-  IF W$ > Z$ THEN 660
-        ^
- 620: error: string expressions can only be tested for equality 
-  IF W$<Z$ THEN 650
-       ^
- 750: error: string expressions can only be tested for equality 
-  IF W$ > Z$ THEN 770
-        ^
- 960: error: string expressions can only be tested for equality 
-  IF A$<B$ THEN 1000
-       ^
- 980: error: string expressions can only be tested for equality 
-  IF A$>B$ THEN 1000
-       ^
- 2100: error: string expressions can only be tested for equality 
-  IF X$ < Y$ THEN 2180
-        ^
', tests/integration.rs:37:13

---- P029 stdout ----
thread 'P029' panicked at 'assertion failed: `(left == right)`
  left: `"PROGRAM FILE 29: EXCEPTION - OVERFLOW OF NUMERIC EXPRESSIONS.\n    ANSI STANDARD 7.5\n\nTHIS PROGRAM TESTS VARIOUS CASES OF NUMERIC OVERFLOW.\n\nSECTION 29.1: POSITIVE OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF EXPRESSION EVALUATION\nEXCEEDING POSITIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE EXPRESSION AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nABOUT TO COMPUTE  1.E+36  *  10 \nRESULT =  1.E+37 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.E+37  *  12.5893 \nRESULT =  1.25893E+38 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.25893E+38  *  16.2181 \nRESULT =  2.04174E+39 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.04174E+39  *  21.4289 \nRESULT =  4.37522E+40 \n\n----------------------------------------\n\nABOUT TO COMPUTE  4.37522E+40  *  29.1139 \nRESULT =  1.2738E+42 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.2738E+42  *  40.7859 \nRESULT =  5.19529E+43 \n\n----------------------------------------\n\nABOUT TO COMPUTE  5.19529E+43  *  59.0964 \nRESULT =  3.07023E+45 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.07023E+45  *  88.8622 \nRESULT =  2.72827E+47 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.72827E+47  *  139.184 \nRESULT =  3.79732E+49 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.79732E+49  *  228.007 \nRESULT =  8.65814E+51 \n\n----------------------------------------\n\nABOUT TO COMPUTE  8.65814E+51  *  392.412 \nRESULT =  3.39756E+54 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.39756E+54  *  713.045 \nRESULT =  2.42261E+57 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.42261E+57  *  1375.4 \nRESULT =  3.33205E+60 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.33205E+60  *  2833.16 \nRESULT =  9.44025E+63 \n\n----------------------------------------\n\nABOUT TO COMPUTE  9.44025E+63  *  6273.33 \nRESULT =  5.92218E+67 \n\n----------------------------------------\n\nABOUT TO COMPUTE  5.92218E+67  *  15040 \nRESULT =  8.90697E+71 \n\n----------------------------------------\n\nABOUT TO COMPUTE  8.90697E+71  *  39352.6 \nRESULT =  3.50512E+76 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.50512E+76  *  113363 \nRESULT =  3.9735E+81 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.9735E+81  *  363009 \nRESULT =  1.44242E+87 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.44242E+87  *  1.3059E+6 \nRESULT =  1.88365E+93 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.88365E+93  *  5.33949E+6 \nRESULT =  1.00577E+100 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.00577E+100  *  2.51333E+7 \nRESULT =  2.52784E+107 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.52784E+107  *  1.38126E+8 \nRESULT =  3.4916E+115 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.4916E+115  *  9.00124E+8 \nRESULT =  3.14287E+124 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.14287E+124  *  7.0751E+9 \nRESULT =  2.22361E+134 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.22361E+134  *  6.83449E+10 \nRESULT =  1.51973E+145 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.51973E+145  *  8.28279E+11 \nRESULT =  1.25876E+157 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.25876E+157  *  1.28823E+13 \nRESULT =  1.62157E+170 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.62157E+170  *  2.63629E+14 \nRESULT =  4.27494E+184 \n\n----------------------------------------\n\nABOUT TO COMPUTE  4.27494E+184  *  7.29614E+15 \nRESULT =  3.11905E+200 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.11905E+200  *  2.81451E+17 \nRESULT =  8.77859E+217 \n\n----------------------------------------\n\nABOUT TO COMPUTE  8.77859E+217  *  1.56438E+19 \nRESULT =  1.37331E+237 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.37331E+237  *  1.2995E+21 \nRESULT =  1.78461E+258 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.78461E+258  *  1.6794E+23 \nRESULT =  2.99708E+281 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.99708E+281  *  3.52915E+25 \nRESULT =  1.05771E+307 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.05771E+307  *  1.26601E+28 \nRESULT =  inf \n\n----------------------------------------\n\nABOUT TO COMPUTE  inf  *  8.17863E+30 \nRESULT =  inf \n\n----------------------------------------\n\nLAST TWO MULTIPLICATIONS SHOULD HAVE BEEN REPORTED\nAS OVERFLOW, AND POSITIVE INFINITY SUPPLIED; IF SO,\n*** TEST PASSED *** OTHERWISE *** TEST FAILED ***\n\n                END TEST\n\nSECTION 29.2: NEGATIVE OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF EXPRESSION EVALUATION\nEXCEEDING NEGATIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) NEGATIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE EXPRESSION AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nABOUT TO COMPUTE -1.E+36  *  10 \nRESULT = -1.E+37 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.E+37  *  12.5893 \nRESULT = -1.25893E+38 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.25893E+38  *  16.2181 \nRESULT = -2.04174E+39 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.04174E+39  *  21.4289 \nRESULT = -4.37522E+40 \n\n----------------------------------------\n\nABOUT TO COMPUTE -4.37522E+40  *  29.1139 \nRESULT = -1.2738E+42 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.2738E+42  *  40.7859 \nRESULT = -5.19529E+43 \n\n----------------------------------------\n\nABOUT TO COMPUTE -5.19529E+43  *  59.0964 \nRESULT = -3.07023E+45 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.07023E+45  *  88.8622 \nRESULT = -2.72827E+47 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.72827E+47  *  139.184 \nRESULT = -3.79732E+49 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.79732E+49  *  228.007 \nRESULT = -8.65814E+51 \n\n----------------------------------------\n\nABOUT TO COMPUTE -8.65814E+51  *  392.412 \nRESULT = -3.39756E+54 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.39756E+54  *  713.045 \nRESULT = -2.42261E+57 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.42261E+57  *  1375.4 \nRESULT = -3.33205E+60 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.33205E+60  *  2833.16 \nRESULT = -9.44025E+63 \n\n----------------------------------------\n\nABOUT TO COMPUTE -9.44025E+63  *  6273.33 \nRESULT = -5.92218E+67 \n\n----------------------------------------\n\nABOUT TO COMPUTE -5.92218E+67  *  15040 \nRESULT = -8.90697E+71 \n\n----------------------------------------\n\nABOUT TO COMPUTE -8.90697E+71  *  39352.6 \nRESULT = -3.50512E+76 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.50512E+76  *  113363 \nRESULT = -3.9735E+81 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.9735E+81  *  363009 \nRESULT = -1.44242E+87 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.44242E+87  *  1.3059E+6 \nRESULT = -1.88365E+93 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.88365E+93  *  5.33949E+6 \nRESULT = -1.00577E+100 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.00577E+100  *  2.51333E+7 \nRESULT = -2.52784E+107 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.52784E+107  *  1.38126E+8 \nRESULT = -3.4916E+115 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.4916E+115  *  9.00124E+8 \nRESULT = -3.14287E+124 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.14287E+124  *  7.0751E+9 \nRESULT = -2.22361E+134 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.22361E+134  *  6.83449E+10 \nRESULT = -1.51973E+145 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.51973E+145  *  8.28279E+11 \nRESULT = -1.25876E+157 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.25876E+157  *  1.28823E+13 \nRESULT = -1.62157E+170 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.62157E+170  *  2.63629E+14 \nRESULT = -4.27494E+184 \n\n----------------------------------------\n\nABOUT TO COMPUTE -4.27494E+184  *  7.29614E+15 \nRESULT = -3.11905E+200 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.11905E+200  *  2.81451E+17 \nRESULT = -8.77859E+217 \n\n----------------------------------------\n\nABOUT TO COMPUTE -8.77859E+217  *  1.56438E+19 \nRESULT = -1.37331E+237 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.37331E+237  *  1.2995E+21 \nRESULT = -1.78461E+258 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.78461E+258  *  1.6794E+23 \nRESULT = -2.99708E+281 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.99708E+281  *  3.52915E+25 \nRESULT = -1.05771E+307 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.05771E+307  *  1.26601E+28 \nRESULT = -inf \n\n----------------------------------------\n\nABOUT TO COMPUTE -inf  *  8.17863E+30 \nRESULT = -inf \n\n----------------------------------------\n\nLAST TWO MULTIPLICATIONS SHOULD HAVE BEEN REPORTED\nAS OVERFLOW, AND NEGATIVE INFINITY SUPPLIED; IF SO,\n*** TEST PASSES *** OTHERWISE *** TEST FAILS *** \n\n                END TEST\n\nEND PROGRAM 29\n"`,
 right: `"PROGRAM FILE 29: EXCEPTION - OVERFLOW OF NUMERIC EXPRESSIONS.\n    ANSI STANDARD 7.5\n\nTHIS PROGRAM TESTS VARIOUS CASES OF NUMERIC OVERFLOW.\n\nSECTION 29.1: POSITIVE OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF EXPRESSION EVALUATION\nEXCEEDING POSITIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) POSITIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE EXPRESSION AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nABOUT TO COMPUTE  1.E+36  *  10 \nRESULT =  1.E+37 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.E+37  *  12.5893 \nRESULT =  1.25893E+38 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.25893E+38  *  16.2181 \nRESULT =  2.04174E+39 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.04174E+39  *  21.4289 \nRESULT =  4.37522E+40 \n\n----------------------------------------\n\nABOUT TO COMPUTE  4.37522E+40  *  29.1139 \nRESULT =  1.2738E+42 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.2738E+42  *  40.7859 \nRESULT =  5.19529E+43 \n\n----------------------------------------\n\nABOUT TO COMPUTE  5.19529E+43  *  59.0964 \nRESULT =  3.07023E+45 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.07023E+45  *  88.8622 \nRESULT =  2.72827E+47 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.72827E+47  *  139.184 \nRESULT =  3.79732E+49 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.79732E+49  *  228.007 \nRESULT =  8.65814E+51 \n\n----------------------------------------\n\nABOUT TO COMPUTE  8.65814E+51  *  392.412 \nRESULT =  3.39756E+54 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.39756E+54  *  713.045 \nRESULT =  2.42261E+57 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.42261E+57  *  1375.4 \nRESULT =  3.33205E+60 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.33205E+60  *  2833.16 \nRESULT =  9.44025E+63 \n\n----------------------------------------\n\nABOUT TO COMPUTE  9.44025E+63  *  6273.33 \nRESULT =  5.92218E+67 \n\n----------------------------------------\n\nABOUT TO COMPUTE  5.92218E+67  *  15040 \nRESULT =  8.90697E+71 \n\n----------------------------------------\n\nABOUT TO COMPUTE  8.90697E+71  *  39352.6 \nRESULT =  3.50512E+76 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.50512E+76  *  113363 \nRESULT =  3.9735E+81 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.9735E+81  *  363009 \nRESULT =  1.44242E+87 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.44242E+87  *  1.3059E+6 \nRESULT =  1.88365E+93 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.88365E+93  *  5.33949E+6 \nRESULT =  1.00577E+100 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.00577E+100  *  2.51333E+7 \nRESULT =  2.52784E+107 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.52784E+107  *  1.38126E+8 \nRESULT =  3.4916E+115 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.4916E+115  *  9.00124E+8 \nRESULT =  3.14287E+124 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.14287E+124  *  7.0751E+9 \nRESULT =  2.22361E+134 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.22361E+134  *  6.83449E+10 \nRESULT =  1.51973E+145 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.51973E+145  *  8.28279E+11 \nRESULT =  1.25876E+157 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.25876E+157  *  1.28823E+13 \nRESULT =  1.62157E+170 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.62157E+170  *  2.63629E+14 \nRESULT =  4.27494E+184 \n\n----------------------------------------\n\nABOUT TO COMPUTE  4.27494E+184  *  7.29614E+15 \nRESULT =  3.11905E+200 \n\n----------------------------------------\n\nABOUT TO COMPUTE  3.11905E+200  *  2.81451E+17 \nRESULT =  8.77859E+217 \n\n----------------------------------------\n\nABOUT TO COMPUTE  8.77859E+217  *  1.56438E+19 \nRESULT =  1.37331E+237 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.37331E+237  *  1.2995E+21 \nRESULT =  1.78461E+258 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.78461E+258  *  1.6794E+23 \nRESULT =  2.99708E+281 \n\n----------------------------------------\n\nABOUT TO COMPUTE  2.99708E+281  *  3.52915E+25 \nRESULT =  1.05771E+307 \n\n----------------------------------------\n\nABOUT TO COMPUTE  1.05771E+307  *  1.26601E+28 \nRESULT =  INF \n\n----------------------------------------\n\nABOUT TO COMPUTE  INF  *  8.17863E+30 \nRESULT =  INF \n\n----------------------------------------\n\nLAST TWO MULTIPLICATIONS SHOULD HAVE BEEN REPORTED\nAS OVERFLOW, AND POSITIVE INFINITY SUPPLIED; IF SO,\n*** TEST PASSED *** OTHERWISE *** TEST FAILED ***\n\n                END TEST\n\nSECTION 29.2: NEGATIVE OVERFLOW\n\nTHIS SECTION TESTS THE RESULT OF EXPRESSION EVALUATION\nEXCEEDING NEGATIVE MACHINE INFINITY.\n\nTO PASS THIS TEST:\n\n    1) A MESSAGE IDENTIFYING THE EXCEPTION MUST BE\n       DISPLAYED, AND\n\n    2) NEGATIVE INFINITY MUST BE SUPPLIED AS THE VALUE\n       OF THE EXPRESSION AND EXECUTION CONTINUES.\n\n               BEGIN TEST\n\nABOUT TO COMPUTE -1.E+36  *  10 \nRESULT = -1.E+37 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.E+37  *  12.5893 \nRESULT = -1.25893E+38 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.25893E+38  *  16.2181 \nRESULT = -2.04174E+39 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.04174E+39  *  21.4289 \nRESULT = -4.37522E+40 \n\n----------------------------------------\n\nABOUT TO COMPUTE -4.37522E+40  *  29.1139 \nRESULT = -1.2738E+42 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.2738E+42  *  40.7859 \nRESULT = -5.19529E+43 \n\n----------------------------------------\n\nABOUT TO COMPUTE -5.19529E+43  *  59.0964 \nRESULT = -3.07023E+45 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.07023E+45  *  88.8622 \nRESULT = -2.72827E+47 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.72827E+47  *  139.184 \nRESULT = -3.79732E+49 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.79732E+49  *  228.007 \nRESULT = -8.65814E+51 \n\n----------------------------------------\n\nABOUT TO COMPUTE -8.65814E+51  *  392.412 \nRESULT = -3.39756E+54 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.39756E+54  *  713.045 \nRESULT = -2.42261E+57 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.42261E+57  *  1375.4 \nRESULT = -3.33205E+60 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.33205E+60  *  2833.16 \nRESULT = -9.44025E+63 \n\n----------------------------------------\n\nABOUT TO COMPUTE -9.44025E+63  *  6273.33 \nRESULT = -5.92218E+67 \n\n----------------------------------------\n\nABOUT TO COMPUTE -5.92218E+67  *  15040 \nRESULT = -8.90697E+71 \n\n----------------------------------------\n\nABOUT TO COMPUTE -8.90697E+71  *  39352.6 \nRESULT = -3.50512E+76 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.50512E+76  *  113363 \nRESULT = -3.9735E+81 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.9735E+81  *  363009 \nRESULT = -1.44242E+87 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.44242E+87  *  1.3059E+6 \nRESULT = -1.88365E+93 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.88365E+93  *  5.33949E+6 \nRESULT = -1.00577E+100 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.00577E+100  *  2.51333E+7 \nRESULT = -2.52784E+107 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.52784E+107  *  1.38126E+8 \nRESULT = -3.4916E+115 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.4916E+115  *  9.00124E+8 \nRESULT = -3.14287E+124 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.14287E+124  *  7.0751E+9 \nRESULT = -2.22361E+134 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.22361E+134  *  6.83449E+10 \nRESULT = -1.51973E+145 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.51973E+145  *  8.28279E+11 \nRESULT = -1.25876E+157 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.25876E+157  *  1.28823E+13 \nRESULT = -1.62157E+170 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.62157E+170  *  2.63629E+14 \nRESULT = -4.27494E+184 \n\n----------------------------------------\n\nABOUT TO COMPUTE -4.27494E+184  *  7.29614E+15 \nRESULT = -3.11905E+200 \n\n----------------------------------------\n\nABOUT TO COMPUTE -3.11905E+200  *  2.81451E+17 \nRESULT = -8.77859E+217 \n\n----------------------------------------\n\nABOUT TO COMPUTE -8.77859E+217  *  1.56438E+19 \nRESULT = -1.37331E+237 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.37331E+237  *  1.2995E+21 \nRESULT = -1.78461E+258 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.78461E+258  *  1.6794E+23 \nRESULT = -2.99708E+281 \n\n----------------------------------------\n\nABOUT TO COMPUTE -2.99708E+281  *  3.52915E+25 \nRESULT = -1.05771E+307 \n\n----------------------------------------\n\nABOUT TO COMPUTE -1.05771E+307  *  1.26601E+28 \nRESULT = -INF \n\n----------------------------------------\n\nABOUT TO COMPUTE -INF  *  8.17863E+30 \nRESULT = -INF \n\n----------------------------------------\n\nLAST TWO MULTIPLICATIONS SHOULD HAVE BEEN REPORTED\nAS OVERFLOW, AND NEGATIVE INFINITY SUPPLIED; IF SO,\n*** TEST PASSES *** OTHERWISE *** TEST FAILS *** \n\n                END TEST\n\nEND PROGRAM 29\n"`: 
Diff:
+ RESULT =  inf 
- RESULT =  INF 
+ ABOUT TO COMPUTE  inf  *  8.17863E+30 
+ RESULT =  inf 
- ABOUT TO COMPUTE  INF  *  8.17863E+30 
- RESULT =  INF 
+ RESULT = -inf 
- RESULT = -INF 
+ ABOUT TO COMPUTE -inf  *  8.17863E+30 
+ RESULT = -inf 
- ABOUT TO COMPUTE -INF  *  8.17863E+30 
- RESULT = -INF 
', tests/integration.rs:22:13


failures:
    P020
    P021
    P023
    P026
    P027
    P028
    P029
    P030
    P031
    P032
    P035
    P036
    P037
    P038
    P039
    P040
    P041
    P042
    P043
    P044
    P045
    P046
    P047
    P048
    P049
    P050
    P051
    P052
    P053
    P054
    P055
    P056
    P057
    P058
    P059
    P060
    P061
    P062
    P063
    P064
    P065
    P066
    P067
    P068
    P069
    P070
    P071
    P072
    P073
    P074
    P075
    P076
    P077
    P078
    P079
    P080
    P081
    P082
    P083
    P084
    P085
    P086
    P087
    P088
    P089
    P090
    P091
    P092
    P093
    P094
    P095
    P096
    P097
    P098
    P099
    P100
    P101
    P102
    P103
    P104
    P105
    P106
    P113
    P114
    P115
    P116
    P117
    P118
    P119
    P120
    P121
    P122
    P123
    P124
    P125
    P126
    P127
    P128
    P129
    P130
    P132
    P133
    P134
    P135
    P136
    P137
    P138
    P139
    P140
    P141
    P142
    P143
    P144
    P145
    P146
    P147
    P148
    P149
    P150
    P151
    P152
    P153
    P154
    P155
    P156
    P157
    P158
    P159
    P160
    P161
    P162
    P163
    P164
    P165
    P166
    P167
    P168
    P169
    P170
    P171
    P172
    P173
    P174
    P175
    P176
    P177
    P178
    P179
    P180
    P181
    P182
    P183
    P184
    P185
    P186
    P187
    P188
    P189
    P190
    P191
    P192
    P193
    P194
    P195
    P197
    P198
    P199
    P200
    P201
    P202
    P204
    P205
    P206
    P207
    P208

test result: FAILED. 25 passed; 175 failed; 0 ignored; 0 measured; 0 filtered out

